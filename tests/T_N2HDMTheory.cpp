#include "ScannerS/Models/CPVDM.hpp"
#include "catch.hpp"

namespace {
bool OldBFB(const std::array<double, 8> &L) {
  double sr12, sr16, sr26, discab, disc12, delta;

  if (!(L[5] > 0 && L[0] > 0 && L[1] > 0)) {
    return false;
  }

  sr16 = sqrt(L[0] * L[5]);
  sr26 = sqrt(L[1] * L[5]);
  if (!(sr26 + L[7] > 0 && sr16 + L[6] > 0)) {
    return false;
  }

  sr12 = sqrt(L[0] * L[1]);
  discab = L[6] + L[7] * sqrt(L[0] / L[1]);

  disc12 = L[3] - L[4];
  if (disc12 > 0)
    disc12 = 0;

  if (discab >= 0 && disc12 + sr12 + L[2] > 0) {
    return true;
  }
  delta = sqrt((pow(L[6], 2) - L[0] * L[5]) * (pow(L[7], 2) - L[1] * L[5]));
  if (discab <= 0 && sr26 >= L[7] && disc12 * L[5] + delta > L[6] * L[7]) {
    return true;
  }
  return false;
}

bool OldTreeUni(const std::array<double, 8> &L) {
  using std::abs;
  const double pi = acos(-1);
  double maxev = std::max(
      {abs(1 / 2. *
           (L[0] + L[1] - sqrt(4 * L[4] * L[4] + pow(L[0] - L[1], 2)))),
       abs(1 / 2. *
           (L[0] + L[1] + sqrt(4 * L[4] * L[4] + pow(L[0] - L[1], 2)))),
       abs(L[2] - L[3]), abs(L[2] + 2 * L[3] - 3 * L[4]),
       abs(L[2] + 2 * L[3] + 3 * L[4]), abs(L[6]), abs(L[7]),
       abs(1 / 2. *
           (L[0] + L[1] - sqrt(pow(L[1] - L[1], 2) + 4 * L[3] * L[3]))),
       abs(1 / 2. *
           (L[0] + L[1] + sqrt(pow(L[1] - L[1], 2) + 4 * L[3] * L[3])))});
  maxev /= pi;
  if (maxev > 8)
    return false;
  return true;
}

const std::vector<std::array<double, 8>> testpoints{
    {8.87, 6.73, 12.96, 7.73, -6.37, 6.2, -20.87, 7.28},
    {8.27, 0.5, -16.49, 10.91, 2.7, 0.38, 5.03, -15.04},
    {1.66, 1.68, 7.77, -10.84, 6.3, 7.56, 15.8, -1.72},
    {4.27, 5.18, 11.64, 1.65, 6.29, 5.14, 8.32, -18.52},
    {8.95, -0.31, -1.94, -5.32, -7.3, 10.74, 23.4, 8.99},
    {-0.65, 0.58, -1.6, 15.07, 7.94, -0.05, 13.76, -6.71},
    {5.49, 6.37, 2.3, 7.35, -2.34, 15.58, -2.32, 9.83},
    {0.25, -0.45, 16.42, 7.49, 2.38, 4.15, -13.37, -9.63},
    {3.4, 4.17, -16.12, -15.23, -8.22, 11.78, 1.52, 10.46},
    {0.73, 1.75, 3.36, 12.1, -3.02, 5.82, -18.8, -22.28},
    {3.51, 6.23, 6.53, 5.04, 6.46, 16.08, -2.65, 11.19},
    {7.3, 6.71, -10.83, -6.73, 6.28, 11.61, 1.51, 3.06},
    {7.77, -0.54, 7.17, 7.5, 0.67, 15.84, 21.53, -23.53},
    {5.87, 5.73, -2.26, 10.57, 2.15, 11.73, 15.63, -12.18},
    {3.05, 6.97, 1.99, -4.77, 2.2, 1.17, -2.92, -1.42},
    {5.17, 5.01, 10.43, -0.89, 0.93, 7.23, -17.03, 24.36},
    {2.94, 6.35, 9.76, 15.58, -0.94, 0.72, 18.35, 13.04},
    {3.42, 7.45, -1.74, -13.61, -5.17, 15.28, -8.28, -4.59},
    {7.9, -0.85, 3.29, 8.3, -8.48, 15.59, -12.17, 7.41},
    {-0.35, 8.31, -14.93, -7.02, -8.15, 16.98, -12.94, 24.57},
    {0.44, 1.36, 9.65, -5.69, -8.04, 0.37, -2.32, 3.39},
    {7.85, -0.27, 8.54, -0.39, -2.82, 6.69, 24.87, 19.72},
    {6.63, 2.22, 15.45, -2.7, 8.4, -0.8, -6.44, 1.87},
    {3.94, 3.18, -1.91, -10.94, -2.62, 12.36, -6.97, -23.69},
    {1.48, 5.51, -1.69, -13.33, 6.36, 11.38, 2.9, -16.6},
    {2.47, 3.18, 6.33, 0.16, 2.75, 14.4, -15.08, -1.45},
    {4.24, 4.46, -13.43, -5.27, -3.51, 9.6, 0.47, 14.3},
    {7.96, 7.33, -7.05, 10.38, 8.11, 12.02, 25.18, -13.17},
    {4.76, 8.68, -14.48, -3.66, -2.24, 13.73, -24.55, -4.48},
    {4.01, 8.6, 5.11, -0.97, -4.33, 3.2, -17.21, 24.82},
    {5.81, 8.41, -8.54, 15.82, -6.05, 5.02, 4.45, 17.99},
    {1.97, 2.9, -16.88, -5.47, -1.62, -0.48, 11.9, -22.99},
    {4.14, 1.68, 10.16, 1.28, -5.14, 2.73, -1.87, 10.92},
    {2.28, 2.22, 15.83, -11.32, -2.03, 0.27, -6.22, 1.93},
    {4.99, 3.77, 15.2, 9.77, 5.22, 3.98, 12.91, 24.71},
    {7.87, -0.4, 1.85, 3.22, -3.54, 3.11, 4.32, 19.19},
    {4.87, 0.92, 11.85, 12.02, 5.55, 4.09, -1.04, -19.9},
    {7.76, 7.71, -14.42, 10.57, -3.51, -0.04, 7.01, -9.4},
    {4.42, 1.66, 6.97, -16.28, -0.39, 7.12, 14.55, -1.3},
    {6.99, 8.23, 11.88, -13.22, -8.26, -0.51, -16.2, -25.04},
    {5.56, 6.79, 2.87, -10.15, 5.24, 2.02, -4.08, -10.42},
    {4.39, 7.43, 14.04, -2.88, 0.2, 12.98, -24.22, -23.65},
    {4.6, 0.68, 5.75, -6.85, 7.14, -0.61, 16.65, -14.04},
    {-0.95, 1., 12.92, 6.49, 4.92, 1.68, 2.32, -3.47},
    {-0.5, 1.92, -8.62, 0.28, -7.81, 7.1, 5.41, -9.8},
    {8.52, 1.16, -0.79, -6.79, 5.91, 13.22, -6.62, 4.79},
    {8.98, 6.18, -10.47, -14.89, -0.02, -0.1, 6.7, -1.62},
    {7.88, 8.69, -13.46, 13.11, 8.92, 0.72, 3.35, -4.26},
    {3.61, 1., 5.5, -10.43, 6.62, 15.47, 22.29, 22.73},
    {8.03, 1.23, -6.11, -1.25, 0.49, 13.22, 11.21, 2.05},
    {4.35, 4.14, -0.95, 2.36, 0.66, 1.98, 2.2, 0.15},
    {2.71, 3.72, 3.28, 4.41, -0.06, -0.76, -0.39, 3.19},
    {3.22, -0.2, 3.19, 3.99, 2.19, -0.53, 3.18, 3.18},
    {4.7, 0.09, 4.98, 0.85, 2.96, 2.47, 1.66, 4.89},
    {-0.68, 0.41, 3.04, -0.46, 3.66, 0.18, 3.01, 2.21},
    {1.96, 2.04, 0.18, -0.17, 3.56, -0.42, 3.53, 4.84},
    {-0.17, 2.57, 2.04, 1.97, 0.6, 2.4, 2.66, 1.83},
    {3.71, 4.4, 1.16, -0.51, -0.45, 1.62, -0.41, 3.59},
    {3.72, -0.96, 3.06, 0.41, -0.43, 2.73, 4.65, 0.85},
    {3.15, 1.42, -0.98, 4.31, -0.1, -0.83, 4.9, 1.01},
    {4.31, 1.03, 2.52, -0.76, 0.05, 4.07, 1.56, 2.22},
    {4.88, 0.77, 4.31, 3.08, 3.09, 3.44, 1.72, -0.43},
    {1.82, 1.55, -0.35, 3.74, 1.84, 0.96, 2.76, 0.73},
    {1.32, 3.95, 2.65, 2.78, 3.14, -0.28, 2.61, 4.39},
    {0.18, 1.89, 3.01, 0.03, 0.63, 1.81, 1.16, 2.88},
    {0.17, 1.04, 3.88, -0.26, 0.4, -0.54, 2.01, 1.17},
    {4.95, 0.68, 4.82, 1.44, 3.52, 0.94, -0.47, 2.96},
    {3.23, 1.17, 3.63, 3.31, 2.25, 1.87, 0.47, 4.6},
    {1.19, 2.67, -0.54, 1.9, 1.66, -0.97, 0.41, 3.88},
    {3.51, 0.32, 3.5, 4.41, 4.63, 4.89, 1.47, 4.06},
    {2.22, 4.68, 1.8, 1.82, 0.79, 4.15, 4.56, 2.32},
    {-0.82, 3.12, 4.52, 1.25, 4.25, 3.62, 3.76, 4.07},
    {0.12, -0.32, 3.3, 3.46, -0.71, -0.06, 4.18, 3.06},
    {4.6, 1.18, 2.88, 5., 4.79, 0.76, 2.47, 1.11},
    {2.55, 3.02, 4.18, 4.93, 4.62, 3.77, 2.01, 0.04},
    {4.14, 1.15, 0.37, 0.31, -0.28, 0.43, 2.66, 1.2},
    {4.19, 4.73, 4.27, 4.75, 4.74, 2.41, 1.03, 0.6},
    {2.58, -0.37, 0.26, 2.18, 2.94, 1.59, 4.18, 0.01},
    {1.02, 0.98, 4.49, 3.63, -0.87, -0.09, 1.6, 2.2},
    {3.79, 2.53, -0.5, 4.87, -0.05, 0.29, -0.25, 2.24},
    {4.5, 3.66, 2.55, 3.99, 1.92, -0.47, 0.31, 4.01},
    {2.26, 4.95, 4.4, 4.42, 3.95, 0.15, -0.59, 3.95},
    {1.46, 4.57, 3., 0.92, -0.88, 2.66, 3.91, -0.22},
    {1.13, 2.63, -0.75, -0.42, 4.4, 2.04, 1.53, 4.2},
    {3.78, 5., 1.09, 2.99, 2.9, 4.29, 4.35, 0.92},
    {-0.8, 4.54, -0.7, 1.74, 3.79, 1.06, 2.73, 4.51},
    {0.65, 0.33, 2.03, 3.88, 3.67, 0.5, 3.22, 3.96},
    {4.43, -0.61, 1.59, 1.69, -0.46, 3.64, 4.79, 3.24},
    {-0.67, 0.31, 3.51, 4.7, 2.57, 3.87, 2.45, 3.66},
    {-0.84, 0.04, 4.75, -0.41, 4.89, 0.08, 3.25, 1.44},
    {0.74, 4.27, 0.93, 2.51, 1.99, 3.41, -0.94, 3.57},
    {0.57, 3.76, 1.87, 4.91, 2.22, -0.65, 1.57, -0.05},
    {2.49, 2.59, 0.94, -0.44, 0.71, 3.37, 1.44, 4.05},
    {4.6, 3.52, 2.23, 2.72, 2.07, 0.09, 2.36, 2.57},
    {2.27, 3.95, 3.77, -0.51, 4.43, 3.22, 1.56, 4.26},
    {0.09, 4.36, 2.29, 2.2, 0.08, 3.38, 2.2, 3.98},
    {4.1, 3.99, 0.51, 3.65, 4.42, 2.78, 1.55, -0.38},
    {4.82, 2.31, -0.88, 4.69, 2.06, 1.14, 1.26, -0.2},
    {4.58, 0.83, 4.07, 3.5, 0.75, 0.23, 4.14, 1.27},
    {4.23, -0.59, 4.49, 2.86, 3.66, 2.47, 4.69, 4.65}};

const std::vector<double> testEVs{
    59.6745,  41.8236,  24.4219,  41.36335, 45.54735, 22.2256,  33.9226,
    46.6279,  59.835,   45.6148,  37.54735, 49.4531,  45.1472,  34.73655,
    21.0434,  38.476,   57.878,   34.54845, 36.6968,  68.6495,  16.43995,
    54.2365,  42.5893,  38.89795, 39.2789,  34.16885, 48.18615, 51.045,
    58.195,   42.38795, 36.5174,  57.2825,  31.8663,  27.44395, 65.281,
    30.332,   49.48805, 44.5,     26.88675, 50.6765,  25.88715, 67.1865,
    25.4384,  32.8517,  26.9629,  33.04435, 59.4375,  39.479,   48.24765,
    36.2521,  13.69125, 20.9308,  17.16955, 20.8831,  7.29045,  9.6943,
    11.91625, 14.9751,  15.60355, 12.18055, 15.09935, 21.7942,  9.0125,
    18.29015, 10.82145, 9.87775,  21.30175, 18.26955, 9.5361,   19.15985,
    18.41555, 17.7078,  11.97655, 20.9533,  21.7879,  13.1627,  26.7511,
    10.51775, 16.05595, 13.8602,  21.78945, 24.9631,  17.60015, 10.44285,
    19.5186,  15.20475, 11.7553,  17.31605, 13.692,   10.61105, 15.31485,
    16.4132,  11.65245, 20.1355,  18.2388,  17.63355, 16.8659,  15.5577,
    21.8576,  21.6092};

} // namespace

TEST_CASE("N2HDM Boundedness", "[unit][N2HDM][BFB]") {

  auto print = [](const std::array<double, 8> &a) {
    std::string out;
    for (double x : a) {
      out += std::to_string(x) + " ";
    }
    return out;
  };
  int n = 0;
  for (const auto &L : testpoints) {
    INFO(print(L));
    bool newVal = ScannerS::Models::CPVDM::BFB(L);
    bool oldVal = OldBFB(L);
    REQUIRE(oldVal == newVal);
    if (newVal) {
      ++n;
    }
  }
  REQUIRE(n == 32);
}

TEST_CASE("N2HDM Unitarity", "[unit][N2HDM][uni]") {
  int n = 0;
  for (size_t i = 0; i != testpoints.size(); ++i) {
    double maxEV;
    bool oldVal = OldTreeUni(testpoints[i]);
    bool newVal =
        ScannerS::Models::CPVDM::MaxUnitarityEV(testpoints[i]) < 25.1327;
    INFO(testEVs[i]);
    REQUIRE((oldVal && testEVs[i] <= 25.1327) == newVal);
    if (newVal) {
      ++n;
    }
  }
  REQUIRE(n == 47);
}
