<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>Eigen::aligned_allocator</name>
    <filename>classEigen_1_1aligned__allocator.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::AlignedBox</name>
    <filename>classEigen_1_1AlignedBox.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>CornerType</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af033550dd2c966c8cedcba38277b8246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378acf2a0393a6c031a4356ba3374f923a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae4ee3a658682ccb1b9d4c1789b7861d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1fa300b2d757828d6f0ec6248fc8e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae736c12f77cc86f926b5c8d4d31e4524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a3fdf5886ddaef3379b3a27ed23eb9878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1cb3db0f1b9527a13e4702ed1c77d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af8a08393f56285c5e2f88848003b399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a74d9c5fb8947b2cdb5c27d37c0427acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5bfca74f1f398a3fb76b738940c4cfcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a133ad4e3a3b6bc1aa67e0eeaf2a4d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a832232febef165ae0ef0a89b7acd942b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ada22e7e8acb0532577aecd665d6f8bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae7d487e841f164531aac8888b57b518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a0c792a774e1dd0f74cc843a951da75a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af033550dd2c966c8cedcba38277b8246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378acf2a0393a6c031a4356ba3374f923a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af033550dd2c966c8cedcba38277b8246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378acf2a0393a6c031a4356ba3374f923a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae4ee3a658682ccb1b9d4c1789b7861d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1fa300b2d757828d6f0ec6248fc8e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae736c12f77cc86f926b5c8d4d31e4524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a3fdf5886ddaef3379b3a27ed23eb9878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae4ee3a658682ccb1b9d4c1789b7861d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1fa300b2d757828d6f0ec6248fc8e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae736c12f77cc86f926b5c8d4d31e4524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a3fdf5886ddaef3379b3a27ed23eb9878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1cb3db0f1b9527a13e4702ed1c77d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af8a08393f56285c5e2f88848003b399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a74d9c5fb8947b2cdb5c27d37c0427acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5bfca74f1f398a3fb76b738940c4cfcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a133ad4e3a3b6bc1aa67e0eeaf2a4d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a832232febef165ae0ef0a89b7acd942b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ada22e7e8acb0532577aecd665d6f8bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae7d487e841f164531aac8888b57b518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1cb3db0f1b9527a13e4702ed1c77d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af8a08393f56285c5e2f88848003b399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a74d9c5fb8947b2cdb5c27d37c0427acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5bfca74f1f398a3fb76b738940c4cfcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a133ad4e3a3b6bc1aa67e0eeaf2a4d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a832232febef165ae0ef0a89b7acd942b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ada22e7e8acb0532577aecd665d6f8bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae7d487e841f164531aac8888b57b518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a316415d4fdf5adf57d18725c81892148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a5a6c17bed7dc553468da830c3255d503</anchor>
      <arglist>(const AlignedBox&lt; OtherScalarType, AmbientDimAtCompileTime &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ac84a59c25147ba77a65c120f340c2b1a</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a71f6c829b68c79fe605d9c0bed1a1318</anchor>
      <arglist>(const OtherVectorType1 &amp;_min, const OtherVectorType2 &amp;_max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>af7d644678160389c3ff694ec08e7e68d</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; AlignedBox, AlignedBox&lt; NewScalarType, AmbientDimAtCompileTime &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ab520cf9911d8169ecc207cda2801019d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>clamp</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ace8abc0f98f8c822c0548feb15827d01</anchor>
      <arglist>(const AlignedBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a88d1d01721ab680d69da17c5da6ec76d</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a79bf9e0941ebd7442005984c826b3190</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>corner</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae67ab77c2e09a482cfa509ca3b93e58d</anchor>
      <arglist>(CornerType corner) const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, Scalar &gt;, const VectorType, const VectorType &gt;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a88b591f978905e280bc0b13b0f366e1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a589947c0a9ab1f58f706d067eb5775c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const</type>
      <name>EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a30e50af307f14599ae37d48bf9a507d4</anchor>
      <arglist>(VectorTypeSum, RealScalar, quotient) center() const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>extend</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aa751ed3815de05ca9968c6588c688829</anchor>
      <arglist>(const AlignedBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>extend</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aec7cd40421f1e5f3ce5bd4f88fd065a5</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>NonInteger</type>
      <name>exteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aa8ef848363e769d64f730a04498af0a4</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>NonInteger</type>
      <name>exteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>acb371179c1ef69481e70892bb2a3ee69</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ad04ec714408ac2dd3b39bead5881c790</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ab2506244e1c120e6403e52502990ef7d</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a2fb19d25cf60ecdd613de5ac4bc05a0f</anchor>
      <arglist>(const AlignedBox &amp;other, const RealScalar &amp;prec=ScalarTraits::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a9af5ab5b46a3b8ca036ba857dddf40ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a44416e2660f05c3a9b1fc80c2c91b5db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;()</type>
      <name>max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ad023cf6a840a184f4fca303fe3761823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;()</type>
      <name>max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a3e71e8059c55fb7e6d864af70a6bda87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox</type>
      <name>merged</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a7b9902ef27026aea67d062a8a52f561e</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;()</type>
      <name>min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a676f463235941c739fa7d1c0a7807935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;()</type>
      <name>min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aa049f84b079579b5d841ecf5dbd580ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>sample</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>acefe7be57e0ca90b49a1fbb4aaabffea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmpty</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a4c2d77d592f739e8e47d1606504e12a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a923c602981e9093987abcde3219b693a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, Scalar &gt;, const VectorType, const VectorType &gt;</type>
      <name>sizes</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a8d045f56e28e4443321e2e1427ca2b82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredExteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a147031fdd6339ecd15553064af0f1bd5</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredExteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>af45e0a1536fd99540b7edec6fdf82d00</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>translate</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a23a8b9c4d7fd35d0c95acaac017c56f4</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_t)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>volume</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aef05f8bbdbec9522a9ac5fb66d8bad43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af033550dd2c966c8cedcba38277b8246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378acf2a0393a6c031a4356ba3374f923a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af033550dd2c966c8cedcba38277b8246</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378acf2a0393a6c031a4356ba3374f923a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae4ee3a658682ccb1b9d4c1789b7861d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1fa300b2d757828d6f0ec6248fc8e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae736c12f77cc86f926b5c8d4d31e4524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a3fdf5886ddaef3379b3a27ed23eb9878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae4ee3a658682ccb1b9d4c1789b7861d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1fa300b2d757828d6f0ec6248fc8e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae736c12f77cc86f926b5c8d4d31e4524</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a3fdf5886ddaef3379b3a27ed23eb9878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1cb3db0f1b9527a13e4702ed1c77d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af8a08393f56285c5e2f88848003b399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a74d9c5fb8947b2cdb5c27d37c0427acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5bfca74f1f398a3fb76b738940c4cfcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a133ad4e3a3b6bc1aa67e0eeaf2a4d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a832232febef165ae0ef0a89b7acd942b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ada22e7e8acb0532577aecd665d6f8bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae7d487e841f164531aac8888b57b518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a1cb3db0f1b9527a13e4702ed1c77d2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af8a08393f56285c5e2f88848003b399b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a74d9c5fb8947b2cdb5c27d37c0427acc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5bfca74f1f398a3fb76b738940c4cfcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a133ad4e3a3b6bc1aa67e0eeaf2a4d4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a832232febef165ae0ef0a89b7acd942b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ada22e7e8acb0532577aecd665d6f8bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ae7d487e841f164531aac8888b57b518e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::AMDOrdering</name>
    <filename>classEigen_1_1AMDOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1AMDOrdering.html</anchorfile>
      <anchor>afce433557abcba9e49fa81581a58fa51</anchor>
      <arglist>(const MatrixType &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1AMDOrdering.html</anchorfile>
      <anchor>a7f3fd7224b084f0f5655c97ea8eb6466</anchor>
      <arglist>(const SparseSelfAdjointView&lt; SrcType, SrcUpLo &gt; &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::AngleAxis</name>
    <filename>classEigen_1_1AngleAxis.html</filename>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>af18b62fea86e1e9e3454e7d3c4ed35b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a75f01cb66d481106539fffe843b96fdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a2b1d4d1a61bdf8b67bea4ed6ceed97cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>aad2f7b80fc3692827f59182ba20ee6cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>acbf3a8cee37111faaebda3e0698812cc</anchor>
      <arglist>(const AngleAxis&lt; OtherScalarType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a612110b4d01a7f04e93e994c7aec9584</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a5c35861549acaa035046ce692e15216b</anchor>
      <arglist>(const QuaternionBase&lt; QuatDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ab1ff6cb7f4d6b5b615a8534f72455e50</anchor>
      <arglist>(const Scalar &amp;angle, const MatrixBase&lt; Derived &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>axis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>afd2302b133e967f5ff8700ab2c3fa325</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>axis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a34b828f8b4b33614c9b195993a446f41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; AngleAxis, AngleAxis&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a2ba884b0e9b12827283bd212815835cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; Scalar &gt; &amp;</type>
      <name>fromRotationMatrix</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a5a82fb7c28b1a5ce30be39ae099ce7cf</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a3ba018c931d24cc9ea8260463705d5aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>abdc62c5992f4ad4ce2aa4160f672a175</anchor>
      <arglist>(const AngleAxis &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>QuaternionType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>adf158405e6cc54419a6f6137119c7e9a</anchor>
      <arglist>(const AngleAxis &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ad0e868bd5094a47d60744190e7191a9c</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>QuaternionType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ab7cf3f11bf84c9c787e77b7c3cd504ae</anchor>
      <arglist>(const QuaternionType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a85a49087023fd971f1eb6839f44a126a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a554ca87ba4262060f8ea8844e624ccf1</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ab75098872cb991957fd1ec484cbae06b</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; Scalar &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a602cefb30b2d1c6120f92ff5db13491d</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; Scalar &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a26c1e5d07fcd2ead92b4576dbd0be46d</anchor>
      <arglist>(const QuaternionBase&lt; QuatDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a000268efc460e3d333dde85ffe67bac2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend QuaternionType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>acdec7200dd68b70b615bcda9659fed26</anchor>
      <arglist>(const QuaternionType &amp;a, const AngleAxis &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Array</name>
    <filename>classEigen_1_1Array.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>PlainObjectBase&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; double, DPARM_SIZE, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; double, UMFPACK_CONTROL, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; double, UMFPACK_INFO, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; Index, 1, Dynamic &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; int, IPARM_SIZE, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; RealScalar, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; StorageIndex, 2, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; StorageIndex, 64, 1, DontAlign &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>PlainObjectBase&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArrayBase</name>
    <filename>classEigen_1_1ArrayBase.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>MatrixWrapper&lt; Derived &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>af01e9ea8087e390af8af453bbe4c276c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6a5ff80e9d85106a1c9958219961c21d</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9cc9fdb4d0d6eb80a45107b86aacbfed</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aac76a5e5e735b97f955189825cef7e2c</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1717e11dfe9341e9cfba13140cedddce</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8587d8d893f5225a4511e9d76d9fe3cc</anchor>
      <arglist>(const ArrayBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a80cacb05b6881fba659efb2377e4fd22</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_pow_op&lt; typename Derived::Scalar, typename ExponentDerived::Scalar &gt;, const Derived, const ExponentDerived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb769e1ab1d809abb77c7ab98021ad81</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;exponents)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Derived::Scalar, ScalarExponent &gt;, Derived, Constant&lt; ScalarExponent &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5df3d99d47747b72d61f235c9fb925e3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x, const ScalarExponent &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Scalar, Derived::Scalar &gt;, Constant&lt; Scalar &gt;, Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb7a6224d50620991d1fb9888b8be6e6</anchor>
      <arglist>(const Scalar &amp;x, const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</name>
    <filename>classEigen_1_1ArrayBase.html</filename>
    <base>DenseBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</base>
    <member kind="function">
      <type>MatrixWrapper&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>af01e9ea8087e390af8af453bbe4c276c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6a5ff80e9d85106a1c9958219961c21d</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9cc9fdb4d0d6eb80a45107b86aacbfed</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aac76a5e5e735b97f955189825cef7e2c</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1717e11dfe9341e9cfba13140cedddce</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8587d8d893f5225a4511e9d76d9fe3cc</anchor>
      <arglist>(const ArrayBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a80cacb05b6881fba659efb2377e4fd22</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_pow_op&lt; typename ArrayWrapper&lt; ExpressionType &gt; ::Scalar, typename ExponentDerived::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const ExponentDerived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb769e1ab1d809abb77c7ab98021ad81</anchor>
      <arglist>(const Eigen::ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;x, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;exponents)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; ArrayWrapper&lt; ExpressionType &gt; ::Scalar, ScalarExponent &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; ScalarExponent &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5df3d99d47747b72d61f235c9fb925e3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;x, const ScalarExponent &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Scalar, ArrayWrapper&lt; ExpressionType &gt; ::Scalar &gt;, Constant&lt; Scalar &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb7a6224d50620991d1fb9888b8be6e6</anchor>
      <arglist>(const Scalar &amp;x, const Eigen::ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArrayWrapper</name>
    <filename>classEigen_1_1ArrayWrapper.html</filename>
    <templarg></templarg>
    <base>ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1ArrayWrapper.html</anchorfile>
      <anchor>a1dff702690e4d5795b3d08c5c6c1d082</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1ArrayWrapper.html</anchorfile>
      <anchor>a1c5e643b7dc161066754e0812d57c4f1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::ArrayXpr</name>
    <filename>structEigen_1_1ArrayXpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::BDCSVD</name>
    <filename>classEigen_1_1BDCSVD.html</filename>
    <member kind="function">
      <type></type>
      <name>BDCSVD</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>ab3c53411f0893bf641367aca79234760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDCSVD</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>aa1737274fdee1bc893d4176b15223c41</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDCSVD</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a7840e5377c33be8c5b1725918ca58b50</anchor>
      <arglist>(Index rows, Index cols, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a4923796555b973dba9fe3f8744cac23e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a96232f52930af6006bc7dc1e58df1ba7</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::BiCGSTAB</name>
    <filename>classEigen_1_1BiCGSTAB.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BiCGSTAB</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>ae1a0df6ef6e947256c3cb83ce7df7eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiCGSTAB</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>a5842afd9566e254bc727de1fd7f46362</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Block</name>
    <filename>classEigen_1_1Block.html</filename>
    <templarg></templarg>
    <templarg>BlockRows</templarg>
    <templarg>BlockCols</templarg>
    <templarg>InnerPanel</templarg>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>aebf8889be487c3fd556ffc32ba97cb0a</anchor>
      <arglist>(XprType &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a66685b5f860015fd2e752489213dc0a9</anchor>
      <arglist>(XprType &amp;xpr, Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a7203a3c88122d60221c3730517fff607</anchor>
      <arglist>(XprType &amp;xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Block&lt; const Eigen::Matrix, AmbientDimAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Block.html</filename>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>aebf8889be487c3fd556ffc32ba97cb0a</anchor>
      <arglist>(const Eigen::Matrix &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a66685b5f860015fd2e752489213dc0a9</anchor>
      <arglist>(const Eigen::Matrix &amp;xpr, Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a7203a3c88122d60221c3730517fff607</anchor>
      <arglist>(const Eigen::Matrix &amp;xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Block&lt; ConstMatrixType, Dim, 1,!(internal::traits&lt; Eigen::Matrix &gt;::Flags &amp;RowMajorBit)&gt;</name>
    <filename>classEigen_1_1Block.html</filename>
  </compound>
  <compound kind="class">
    <name>Block&lt; ConstMatrixType, Dim, Dim, int(Mode)==(AffineCompact) &amp;&amp;(Options &amp;RowMajor)==0 &gt;</name>
    <filename>classEigen_1_1Block.html</filename>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>aebf8889be487c3fd556ffc32ba97cb0a</anchor>
      <arglist>(ConstMatrixType &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a66685b5f860015fd2e752489213dc0a9</anchor>
      <arglist>(ConstMatrixType &amp;xpr, Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a7203a3c88122d60221c3730517fff607</anchor>
      <arglist>(ConstMatrixType &amp;xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::BlockImpl&lt; XprType, BlockRows, BlockCols, InnerPanel, Sparse &gt;</name>
    <filename>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</filename>
    <templarg></templarg>
    <templarg>BlockRows</templarg>
    <templarg>BlockCols</templarg>
    <templarg>InnerPanel</templarg>
    <base>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>BlockImpl</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>aa724feeda73e4d5d2330c6dced2d18f9</anchor>
      <arglist>(XprType &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockImpl</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>a2fe461bd49f27e586b7d0e652e370644</anchor>
      <arglist>(XprType &amp;xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodBase</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>Eigen::SparseSolverBase</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, Lower, CholmodDecomposition&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodDecomposition&lt; _MatrixType, Lower &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodDecomposition&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodDecomposition&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, Lower, CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, Lower, CholmodSimplicialLLT&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodSimplicialLLT&lt; _MatrixType, Lower &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLLT&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLLT&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, Lower, CholmodSupernodalLLT&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodSupernodalLLT&lt; _MatrixType, Lower &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSupernodalLLT&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSupernodalLLT&lt; _MatrixType, Lower &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodDecomposition</name>
    <filename>classEigen_1_1CholmodDecomposition.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, Lower, CholmodDecomposition&lt; _MatrixType, Lower &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSimplicialLDLT</name>
    <filename>classEigen_1_1CholmodSimplicialLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, Lower, CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSimplicialLLT</name>
    <filename>classEigen_1_1CholmodSimplicialLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, Lower, CholmodSimplicialLLT&lt; _MatrixType, Lower &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSupernodalLLT</name>
    <filename>classEigen_1_1CholmodSupernodalLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, Lower, CholmodSupernodalLLT&lt; _MatrixType, Lower &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::COLAMDOrdering</name>
    <filename>classEigen_1_1COLAMDOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1COLAMDOrdering.html</anchorfile>
      <anchor>a708cb20191dcd79856d922f262405946</anchor>
      <arglist>(const MatrixType &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ColPivHouseholderQR</name>
    <filename>classEigen_1_1ColPivHouseholderQR.html</filename>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a03eceb0d6822d667f8c43b99e19a7f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a6f61ff5e01880ff0700b661dab2b417f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a3390e803dcdaf7d016bb84715693ff2e</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a165e39b9a98ca09c62d8ecef0ba6eb0e</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a90973cc2314999be8488073dabdf4361</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a31cee5c9d8058932d41abda7396acae8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR&lt; MatrixType &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a296dfd7ab8eb8404d8e70858165e48e5</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a021b7a6e361a04735e22832e9dddf587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aa49e9da055082ec8076e42b9e26d6a37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ad7d86d9047f3711e4f28ec87c5e66896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9c36115eb7bdea4f74585ac5ef045a22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; ColPivHouseholderQR &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a38a1368366ea3c9a18bb94a0f9064ac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>abec772baa25d95a770e970ccb2127caa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5f087f95fcbe2b46b374f4d9fc746c1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9148c307de4418a01b1e8747b17345f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ad0578212c2472dd1a684d6466abae3c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a4dbdbb12597f978839b1e9d50acdf782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a0d5b42116f0dfadbe3b774ffaf36689f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a81dbc8d5e642278f567dec20cf455b5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5daf4256f1c0aa869392bb517a7bf06a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9d9eb26711c2cc4698ec4ab7dad415cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a439472b02b9326c60f5ca4aaf24d1660</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5fa0fe9a8788be9a83cf071ae23cefd7</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; ColPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aba6a8c5da35c53f110d8330109e76269</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a06059c8b0b6cb80beba21e79c37e0ec0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColPivHouseholderQR&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1ColPivHouseholderQR.html</filename>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a03eceb0d6822d667f8c43b99e19a7f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a6f61ff5e01880ff0700b661dab2b417f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a3390e803dcdaf7d016bb84715693ff2e</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a165e39b9a98ca09c62d8ecef0ba6eb0e</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a90973cc2314999be8488073dabdf4361</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a31cee5c9d8058932d41abda7396acae8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR&lt; MatrixType &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a296dfd7ab8eb8404d8e70858165e48e5</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a021b7a6e361a04735e22832e9dddf587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aa49e9da055082ec8076e42b9e26d6a37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ad7d86d9047f3711e4f28ec87c5e66896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9c36115eb7bdea4f74585ac5ef045a22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; ColPivHouseholderQR &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a38a1368366ea3c9a18bb94a0f9064ac5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>abec772baa25d95a770e970ccb2127caa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5f087f95fcbe2b46b374f4d9fc746c1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9148c307de4418a01b1e8747b17345f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ad0578212c2472dd1a684d6466abae3c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a4dbdbb12597f978839b1e9d50acdf782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a0d5b42116f0dfadbe3b774ffaf36689f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a81dbc8d5e642278f567dec20cf455b5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5daf4256f1c0aa869392bb517a7bf06a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9d9eb26711c2cc4698ec4ab7dad415cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a439472b02b9326c60f5ca4aaf24d1660</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5fa0fe9a8788be9a83cf071ae23cefd7</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; ColPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aba6a8c5da35c53f110d8330109e76269</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a06059c8b0b6cb80beba21e79c37e0ec0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CommaInitializer</name>
    <filename>structEigen_1_1CommaInitializer.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>XprType &amp;</type>
      <name>finished</name>
      <anchorfile>structEigen_1_1CommaInitializer.html</anchorfile>
      <anchor>a3cf9e2b8a227940f50103130b2d2859a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CompleteOrthogonalDecomposition</name>
    <filename>classEigen_1_1CompleteOrthogonalDecomposition.html</filename>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a696617fec84f31e7c67104eb7730c04a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a840ce568e139003e3d5380e39e91b976</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a8f516572dcc8af3166201f7618a8932e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a3c42e35180b60bcd2e5cbcf665c40809</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a0ba578c8585460b95282925f2983b857</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a1b4ecb1175fc4b481b4532c2e2dcf8ff</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a82d984ea71e3fd71deee3714f4cba27d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a972796fef246b735aed219003882fb48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a018310c319a0b882803df8584050a7c4</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>af6078dfaf66eb146b074cf07ba17e8f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a9003ee5cf474fc844d4cd70ae4cfd53f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>aab866dfe1dafa0d538ad4269ebd7703e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a145d259549986474ceec375a368cd6ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a2612ff6b2ed536afd722b6de6594ac47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQTZ</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a72dbb7f5dd360e5bd032328bad2ff233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a0cda23204fe13dbb987466570168f19c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a7eec20981d040a5485646890493d018b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>abed03abdb0a56649ef767764a4412043</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a391bf43a76cae861863d60761eebae6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; CompleteOrthogonalDecomposition &gt;</type>
      <name>pseudoInverse</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a4c8315ef65938596f597b3722f72adfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>afdb6466aa4144f5c7caf79c6b934fd28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CompleteOrthogonalDecomposition &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>afb81e14cf4b774207037dc779fc40e38</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>CompleteOrthogonalDecomposition &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ae491ac7e0f4b875c855870eb848830a5</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CompleteOrthogonalDecomposition, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ae54fd4aa5283e01f7fdde5b19710534f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>aa78851c5409f8198ef055ecb9919c996</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>zCoeffs</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a2a348fd0a1b33b1124a02f826fa046c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyZAdjointOnTheLeftInPlace</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a21595a777293e5418cd916274188759b</anchor>
      <arglist>(Rhs &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeInPlace</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a77de2b27521a5ed02ec99e800f0866c7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ComplexEigenSolver</name>
    <filename>classEigen_1_1ComplexEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3604c99a69fac3bee42c88cb2b589143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;(~RowMajor), MaxColsAtCompileTime, 1 &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ad3a663b1ff5200a098dabbbf9b7162b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a67cd4d20590abfd86b2639c4c8ea3dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>abc0218d8b902af0d6c759bfc0a8a8d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ad61f6278843a601096276c9a72c0252f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a61035d40c9498bb1d47628cdd4946785</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3322a21574c61eefd450c003515ad802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a748de5c1e7f730e16421e6d451437600</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a86751f64ebcd5c554551fb5eaaa02db7</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>ComplexEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>aeb7e38c6db5369f5c974f3786e94c1f0</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>const EigenvalueType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a10c25c7620e7faedcd39991cce3a757b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EigenvectorType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3aa5e27800349990778da8fa532c1270</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>aeec4754e32bf2d1c650bf3aed110c3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ad4d9d8b90145900b9686d2dabbe46730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComplexEigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a0c5a974da17774d75be41e351e6bda62</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ComplexSchur</name>
    <filename>classEigen_1_1ComplexSchur.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>ComplexMatrixType</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>af61fe57877d51cfb50178f78534042f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ae1a4713b53f821867fbad617e426832a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a652104d13723a5b1db2937866a034557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9a8ee9df37ee1f90d0e53103c58683c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9c92c6e4c33890d2d063c5c8dd22777d</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad707d9978dc36b3b15e460c2a83f4093</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a3543d2c286563108cd9ace672bbb1c09</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a05dfbf329047aba756a844f8fe2de314</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a2fc0b7bc409a49e7cdb7b6edcfff26eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a8c5ee15fecfd126fc362c3f2fd28f51e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>add3ab5ed83f7f2f06b79fa910a2d5684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>afed8177cf9836f032d42bdb6c6bc6e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a6ca227fbd5387f3a625351354b8eec44</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad37ef6058ce690a1fac4cc524b70cbf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComplexSchur&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1ComplexSchur.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>ComplexMatrixType</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>af61fe57877d51cfb50178f78534042f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ae1a4713b53f821867fbad617e426832a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a652104d13723a5b1db2937866a034557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9a8ee9df37ee1f90d0e53103c58683c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9c92c6e4c33890d2d063c5c8dd22777d</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad707d9978dc36b3b15e460c2a83f4093</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a3543d2c286563108cd9ace672bbb1c09</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a05dfbf329047aba756a844f8fe2de314</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a2fc0b7bc409a49e7cdb7b6edcfff26eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a8c5ee15fecfd126fc362c3f2fd28f51e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>add3ab5ed83f7f2f06b79fa910a2d5684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>afed8177cf9836f032d42bdb6c6bc6e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a6ca227fbd5387f3a625351354b8eec44</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad37ef6058ce690a1fac4cc524b70cbf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ConjugateGradient</name>
    <filename>classEigen_1_1ConjugateGradient.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ConjugateGradient</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>a92a9656ca9fa4da240194f89229255eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConjugateGradient</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>ac10f778fcd137eca1f6057c8ddd3d644</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseBinaryOp</name>
    <filename>classEigen_1_1CwiseBinaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const BinaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>adfb40100689f5e13be1786db5d7fecbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _LhsNested &amp;</type>
      <name>lhs</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>a33b8ee8eda1d963591b80ec07525f918</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _RhsNested &amp;</type>
      <name>rhs</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>ae508116a8a328c0ca01df38cb4819663</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseNullaryOp</name>
    <filename>classEigen_1_1CwiseNullaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const NullaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseNullaryOp.html</anchorfile>
      <anchor>afef9c2479e357786e4c92da1aa625248</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseTernaryOp</name>
    <filename>classEigen_1_1CwiseTernaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const _Arg1Nested &amp;</type>
      <name>arg1</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>a776de41baf8921bcdba24ec2166f0a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _Arg2Nested &amp;</type>
      <name>arg2</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>afebd6d4ed4101bcbb34c36f99ff27fda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _Arg3Nested &amp;</type>
      <name>arg3</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>a07e6cc21d253ae0bd68913fb65aa8151</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TernaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>a9009f896ee1103c8f28a748e59f12b9a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseUnaryOp</name>
    <filename>classEigen_1_1CwiseUnaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const UnaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>aa70041dd94ec46f330cf19a06425d172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::remove_all&lt; XprTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a073345b7e19f058c1890f8538e0cfd96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; XprTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a89589b919998657056de6378dd7dedc3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseUnaryView</name>
    <filename>classEigen_1_1CwiseUnaryView.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const ViewOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>af01271cdadcbcf195b5d3130ff2e1a48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::remove_reference&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>add6689b53e595e968e89592ea30b6800</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>a21d59e387e600b1d650cb002175760b4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::Dense</name>
    <filename>structEigen_1_1Dense.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::doxygen::dense_xpr_base_dispatcher</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher_3_01Array_3_01__Scalar_00_01__Rows_00_01_9f66d076f8f04907f9f0093247d3c377.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>Eigen::ArrayBase</base>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher_3_01Matrix_3_01__Scalar_00_01__Rows_00_0116fa1ae814876cf66b62915b437740e6.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>Eigen::MatrixBase</base>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>dense_xpr_base_dispatcher&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseBase</name>
    <filename>classEigen_1_1DenseBase.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77adb37c78ebbf15aa20b65c3b70415a1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a787f85fd67ee5985917eb2cef6e70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a25cb495affdbd796198462b8ef06be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77ad2baadea085372837b0e80dc93be1306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77acc3a41000cf1d29dd1a320b2a09d2a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a3a459062d39cb34452518f5f201161d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a1156955c8099c5072934b74c72654ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a7392c9b2ad41ba3c16fdc5306c04d581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a406b6af91d61d348ba1c9764bdd66008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a787f85fd67ee5985917eb2cef6e70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a7392c9b2ad41ba3c16fdc5306c04d581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a406b6af91d61d348ba1c9764bdd66008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a1156955c8099c5072934b74c72654ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77acc3a41000cf1d29dd1a320b2a09d2a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77ad2baadea085372837b0e80dc93be1306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a3a459062d39cb34452518f5f201161d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; typename internal::traits&lt; Derived &gt;::Scalar, internal::traits&lt; Derived &gt;::RowsAtCompileTime, internal::traits&lt; Derived &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Derived &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; Derived &gt;::MaxRowsAtCompileTime, internal::traits&lt; Derived &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainArray</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65328b7d6fc10a26ff6cd5801a6a44eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; Derived &gt;::Scalar, internal::traits&lt; Derived &gt;::RowsAtCompileTime, internal::traits&lt; Derived &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Derived &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; Derived &gt;::MaxRowsAtCompileTime, internal::traits&lt; Derived &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainMatrix</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa301ef39d63443e9ef0b84f47350116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; internal::is_same&lt; typename internal::traits&lt; Derived &gt;::XprKind, MatrixXpr &gt;::value, PlainMatrix, PlainArray &gt;::type</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aae45af9b5aca5a9caae98fd201f47cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77adb37c78ebbf15aa20b65c3b70415a1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5feed465b3a8e60c47e73ecce83e39a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a25cb495affdbd796198462b8ef06be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d1aba3f6c414715d830f760913c7e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9276182dab8236c33f1e7abf491d504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae42ab60296c120e9f45ce3b44e1761a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1e669fd3aaae50a4870dc1b8f3b8884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abfbf4cb72dd577e62fbe035b1c53e695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1bdb06bdae22712b53d52adb3419a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a229be090c665b9bf7d1fcdfd1ab6e0c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa73e57a2f0f7cfcb4ad4d55ea0b6414b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9be169c308801411aa24be93d30930bf</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const EIGEN_DEPRECATED Derived &amp;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5815e87ecd984879138601e24f56422</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; Derived &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab231f1a6057f28d4244145e12c9fc0c7</anchor>
      <arglist>(const IOFormat &amp;fmt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab13d158c900560d3e1b25d85d2d33dd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a714a7964441e3db0510fe7675c2cae6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae8443357b808cd393be1b51974213f9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9b150d48bc5e4366887ccb466e40c6b</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1ca84e4179b3e5081ed11d89bbd9e74f</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c4db0c6dd974fa88bbb58b2cf3d5664</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfca6ff4e473f68fbbeabbd03b7504a9</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa56d6b4477cd3c92a9cf42f4b96e47c2</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af36014ec300f53a65083057ed4e89822</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f3710cb36d81cd490b3a2ff3556471b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe70186a582e114a590afe9570dcc926</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a784e23ccbb39e7c57b70af386f94f8b5</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a21ac6c0419a72ad7a88ea0bc189017d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaeb695853e9a28ba1dd54861d0cd9d8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a950a030154fa3c525a213dfda8267a85</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5731b75a9120bf45202b5d863faa9ee4</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; Derived &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e2761e2b6da74dba1d17b40cc918bf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7183cf5d426883fb8ca5ef6f8a2c49c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; Derived &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57fed90701b138c1d38ec52871f4cef1</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; Derived &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5a75198edac1ad62205648445ee30d34</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; Derived &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a997ef3960458fb5dedb8f7f78b068a9b</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0f0e34696162b34762b2bf4bd948f90c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0e575eb0ba6cc6bc5f347872abd8509d</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
      <docanchor file="classEigen_1_1DenseBase.html">MatrixBaseCommaInitRef</docanchor>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5281dadff89f46eef719b38e5d073a8f</anchor>
      <arglist>(const DenseBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab66155169d20c035e80d521a8b918e97</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58915510693d64164e567bd762e1032f</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4cded241a08ab74be620599bb033864d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af119d9a4efe5a15cd83c1ccdf01b3a4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a63ce1e4fab36bff43bbadcdd06a67724</anchor>
      <arglist>(const Func &amp;func) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a60dadfe80b813d808e91e4521c722a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, Dynamic, Dynamic &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afae2d5e36f1158d1b1681dac3cdbd58e</anchor>
      <arglist>(Index rowFactor, Index colFactor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2ec5bac4e1ab95808808ef50ccf4cb39</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a25e2b4887b47b1f2346857d1931efa0f</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a38ea394036d8b096abf322469c80198f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e2f3ac4019184abf95ca0e1a8d82866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adb8045155ea45f7961fc2a5170e1d921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2da10891d4d5497f131dba68035811e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65e78cfcbc9852e6923bebff4323ddca</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57ef09a843004095f84c198dd145641b</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e8e78c75887d4539071a0b7a61ca103</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac2f1e50d1f567da38da1d2f07c5ab559</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeb023532476d3f14c457367e0eb5f3f1</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d1ce9e801fa502e02b9b8cd9141ad0a</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a250ef1b827e748f3f898fb2e55cb96e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac476e5852129ba32beaa1a8a3d7ee0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af230a143de50695d2d1fae93db7e4dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>addd7080d5c202795820e361768d0140c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9e7e4305fdb7781f2b2f05fa801f21e</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a44e25adc6da9cd1d79f4c5bd7c1819cb</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac575a73f01b20b628bb910d0f395cb33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac501bd942994af7a95d95bee7a16ad2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8515f719046aa4851e385661f45595b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4225b90fcc74f18dd479b401124b3841</anchor>
      <arglist>(Visitor &amp;func) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed89b5cc6e3b7d9d5bd63aed245ccd6d</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a68a7ece6c5629d1e9447a321fcb14ccd</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1fdd3189ae3a41d250593334d82210cf</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad8098aa5971139a5585e623dddbea860</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaef589c1dbd7fad93f97bd3fa1b1e768</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a111ba763100d5c287ab25d1c81342501</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0dd2c2ee796c50a63126e1e87b55985</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2755cb4023f7376880523626a8e05101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8b2a51018a73a766f5b91aef3487f013</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab710a58e4a80fbcb2594242372c8fe56</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae814abb451b48ed872819192dc188c19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae97f8d9d08f969c733c8144be6225756</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7eb5f974a8f0b67eac7080db1da0e308</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a422ddeef58bedc7bddb1d4357688d761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae41a9b5050ed27d9e93c82c9c8622cd3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac22f79b812fa564061042407f2ba8f5b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseBase</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa284042d0e1b0ad9b6a00db7fd2d9f7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</name>
    <filename>classEigen_1_1DenseBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a787f85fd67ee5985917eb2cef6e70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a7392c9b2ad41ba3c16fdc5306c04d581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a406b6af91d61d348ba1c9764bdd66008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a1156955c8099c5072934b74c72654ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77acc3a41000cf1d29dd1a320b2a09d2a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77ad2baadea085372837b0e80dc93be1306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a3a459062d39cb34452518f5f201161d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; typename internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar, internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::RowsAtCompileTime, internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::MaxRowsAtCompileTime, internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainArray</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65328b7d6fc10a26ff6cd5801a6a44eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar, internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::RowsAtCompileTime, internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::MaxRowsAtCompileTime, internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainMatrix</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa301ef39d63443e9ef0b84f47350116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; internal::is_same&lt; typename internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::XprKind, MatrixXpr &gt;::value, PlainMatrix, PlainArray &gt;::type</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aae45af9b5aca5a9caae98fd201f47cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77adb37c78ebbf15aa20b65c3b70415a1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5feed465b3a8e60c47e73ecce83e39a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a25cb495affdbd796198462b8ef06be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d1aba3f6c414715d830f760913c7e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9276182dab8236c33f1e7abf491d504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae42ab60296c120e9f45ce3b44e1761a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1e669fd3aaae50a4870dc1b8f3b8884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abfbf4cb72dd577e62fbe035b1c53e695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1bdb06bdae22712b53d52adb3419a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a229be090c665b9bf7d1fcdfd1ab6e0c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa73e57a2f0f7cfcb4ad4d55ea0b6414b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9be169c308801411aa24be93d30930bf</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const EIGEN_DEPRECATED ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5815e87ecd984879138601e24f56422</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab231f1a6057f28d4244145e12c9fc0c7</anchor>
      <arglist>(const IOFormat &amp;fmt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab13d158c900560d3e1b25d85d2d33dd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a714a7964441e3db0510fe7675c2cae6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae8443357b808cd393be1b51974213f9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9b150d48bc5e4366887ccb466e40c6b</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1ca84e4179b3e5081ed11d89bbd9e74f</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c4db0c6dd974fa88bbb58b2cf3d5664</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfca6ff4e473f68fbbeabbd03b7504a9</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa56d6b4477cd3c92a9cf42f4b96e47c2</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af36014ec300f53a65083057ed4e89822</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f3710cb36d81cd490b3a2ff3556471b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe70186a582e114a590afe9570dcc926</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a784e23ccbb39e7c57b70af386f94f8b5</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a21ac6c0419a72ad7a88ea0bc189017d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaeb695853e9a28ba1dd54861d0cd9d8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a950a030154fa3c525a213dfda8267a85</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5731b75a9120bf45202b5d863faa9ee4</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e2761e2b6da74dba1d17b40cc918bf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7183cf5d426883fb8ca5ef6f8a2c49c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57fed90701b138c1d38ec52871f4cef1</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5a75198edac1ad62205648445ee30d34</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a997ef3960458fb5dedb8f7f78b068a9b</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0f0e34696162b34762b2bf4bd948f90c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0e575eb0ba6cc6bc5f347872abd8509d</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5281dadff89f46eef719b38e5d073a8f</anchor>
      <arglist>(const DenseBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab66155169d20c035e80d521a8b918e97</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58915510693d64164e567bd762e1032f</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4cded241a08ab74be620599bb033864d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af119d9a4efe5a15cd83c1ccdf01b3a4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;::Scalar</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a63ce1e4fab36bff43bbadcdd06a67724</anchor>
      <arglist>(const Func &amp;func) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ArrayWrapper&lt; ExpressionType &gt;, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a60dadfe80b813d808e91e4521c722a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ArrayWrapper&lt; ExpressionType &gt;, Dynamic, Dynamic &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afae2d5e36f1158d1b1681dac3cdbd58e</anchor>
      <arglist>(Index rowFactor, Index colFactor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2ec5bac4e1ab95808808ef50ccf4cb39</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a25e2b4887b47b1f2346857d1931efa0f</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a38ea394036d8b096abf322469c80198f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e2f3ac4019184abf95ca0e1a8d82866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adb8045155ea45f7961fc2a5170e1d921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2da10891d4d5497f131dba68035811e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; ArrayWrapper&lt; ExpressionType &gt;, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65e78cfcbc9852e6923bebff4323ddca</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; ArrayWrapper&lt; ExpressionType &gt;, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57ef09a843004095f84c198dd145641b</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; ArrayWrapper&lt; ExpressionType &gt;, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e8e78c75887d4539071a0b7a61ca103</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac2f1e50d1f567da38da1d2f07c5ab559</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeb023532476d3f14c457367e0eb5f3f1</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d1ce9e801fa502e02b9b8cd9141ad0a</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a250ef1b827e748f3f898fb2e55cb96e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac476e5852129ba32beaa1a8a3d7ee0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af230a143de50695d2d1fae93db7e4dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>addd7080d5c202795820e361768d0140c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9e7e4305fdb7781f2b2f05fa801f21e</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a44e25adc6da9cd1d79f4c5bd7c1819cb</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac575a73f01b20b628bb910d0f395cb33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac501bd942994af7a95d95bee7a16ad2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8515f719046aa4851e385661f45595b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4225b90fcc74f18dd479b401124b3841</anchor>
      <arglist>(Visitor &amp;func) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed89b5cc6e3b7d9d5bd63aed245ccd6d</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a68a7ece6c5629d1e9447a321fcb14ccd</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1fdd3189ae3a41d250593334d82210cf</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad8098aa5971139a5585e623dddbea860</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaef589c1dbd7fad93f97bd3fa1b1e768</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a111ba763100d5c287ab25d1c81342501</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0dd2c2ee796c50a63126e1e87b55985</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2755cb4023f7376880523626a8e05101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8b2a51018a73a766f5b91aef3487f013</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab710a58e4a80fbcb2594242372c8fe56</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae814abb451b48ed872819192dc188c19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae97f8d9d08f969c733c8144be6225756</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7eb5f974a8f0b67eac7080db1da0e308</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a422ddeef58bedc7bddb1d4357688d761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae41a9b5050ed27d9e93c82c9c8622cd3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac22f79b812fa564061042407f2ba8f5b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseBase</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa284042d0e1b0ad9b6a00db7fd2d9f7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</name>
    <filename>classEigen_1_1DenseBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a787f85fd67ee5985917eb2cef6e70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a7392c9b2ad41ba3c16fdc5306c04d581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a406b6af91d61d348ba1c9764bdd66008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a1156955c8099c5072934b74c72654ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77acc3a41000cf1d29dd1a320b2a09d2a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77ad2baadea085372837b0e80dc93be1306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a3a459062d39cb34452518f5f201161d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; typename internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar, internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::RowsAtCompileTime, internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::MaxRowsAtCompileTime, internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainArray</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65328b7d6fc10a26ff6cd5801a6a44eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar, internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::RowsAtCompileTime, internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::MaxRowsAtCompileTime, internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainMatrix</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa301ef39d63443e9ef0b84f47350116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; internal::is_same&lt; typename internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::XprKind, MatrixXpr &gt;::value, PlainMatrix, PlainArray &gt;::type</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aae45af9b5aca5a9caae98fd201f47cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77adb37c78ebbf15aa20b65c3b70415a1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5feed465b3a8e60c47e73ecce83e39a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a86241c772c74c04eeeb0480b99c5ab77a25cb495affdbd796198462b8ef06be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d1aba3f6c414715d830f760913c7e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9276182dab8236c33f1e7abf491d504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae42ab60296c120e9f45ce3b44e1761a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1e669fd3aaae50a4870dc1b8f3b8884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abfbf4cb72dd577e62fbe035b1c53e695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1bdb06bdae22712b53d52adb3419a15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a229be090c665b9bf7d1fcdfd1ab6e0c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa73e57a2f0f7cfcb4ad4d55ea0b6414b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9be169c308801411aa24be93d30930bf</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const EIGEN_DEPRECATED Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae5815e87ecd984879138601e24f56422</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab231f1a6057f28d4244145e12c9fc0c7</anchor>
      <arglist>(const IOFormat &amp;fmt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab13d158c900560d3e1b25d85d2d33dd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a714a7964441e3db0510fe7675c2cae6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae8443357b808cd393be1b51974213f9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9b150d48bc5e4366887ccb466e40c6b</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1ca84e4179b3e5081ed11d89bbd9e74f</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c4db0c6dd974fa88bbb58b2cf3d5664</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfca6ff4e473f68fbbeabbd03b7504a9</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa56d6b4477cd3c92a9cf42f4b96e47c2</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af36014ec300f53a65083057ed4e89822</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f3710cb36d81cd490b3a2ff3556471b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe70186a582e114a590afe9570dcc926</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a784e23ccbb39e7c57b70af386f94f8b5</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a21ac6c0419a72ad7a88ea0bc189017d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaeb695853e9a28ba1dd54861d0cd9d8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a950a030154fa3c525a213dfda8267a85</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5731b75a9120bf45202b5d863faa9ee4</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e2761e2b6da74dba1d17b40cc918bf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7183cf5d426883fb8ca5ef6f8a2c49c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57fed90701b138c1d38ec52871f4cef1</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5a75198edac1ad62205648445ee30d34</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseNullaryOp&lt; CustomNullaryOp, typename DenseBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a997ef3960458fb5dedb8f7f78b068a9b</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0f0e34696162b34762b2bf4bd948f90c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0e575eb0ba6cc6bc5f347872abd8509d</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5281dadff89f46eef719b38e5d073a8f</anchor>
      <arglist>(const DenseBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab66155169d20c035e80d521a8b918e97</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58915510693d64164e567bd762e1032f</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4cded241a08ab74be620599bb033864d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af119d9a4efe5a15cd83c1ccdf01b3a4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a63ce1e4fab36bff43bbadcdd06a67724</anchor>
      <arglist>(const Func &amp;func) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Solve&lt; Decomposition, RhsType &gt;, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a60dadfe80b813d808e91e4521c722a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Solve&lt; Decomposition, RhsType &gt;, Dynamic, Dynamic &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afae2d5e36f1158d1b1681dac3cdbd58e</anchor>
      <arglist>(Index rowFactor, Index colFactor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2ec5bac4e1ab95808808ef50ccf4cb39</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a25e2b4887b47b1f2346857d1931efa0f</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a38ea394036d8b096abf322469c80198f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e2f3ac4019184abf95ca0e1a8d82866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adb8045155ea45f7961fc2a5170e1d921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2da10891d4d5497f131dba68035811e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Solve&lt; Decomposition, RhsType &gt;, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65e78cfcbc9852e6923bebff4323ddca</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Solve&lt; Decomposition, RhsType &gt;, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57ef09a843004095f84c198dd145641b</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Solve&lt; Decomposition, RhsType &gt;, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e8e78c75887d4539071a0b7a61ca103</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac2f1e50d1f567da38da1d2f07c5ab559</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeb023532476d3f14c457367e0eb5f3f1</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d1ce9e801fa502e02b9b8cd9141ad0a</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a250ef1b827e748f3f898fb2e55cb96e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac476e5852129ba32beaa1a8a3d7ee0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af230a143de50695d2d1fae93db7e4dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>addd7080d5c202795820e361768d0140c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9e7e4305fdb7781f2b2f05fa801f21e</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a44e25adc6da9cd1d79f4c5bd7c1819cb</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac575a73f01b20b628bb910d0f395cb33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac501bd942994af7a95d95bee7a16ad2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8515f719046aa4851e385661f45595b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4225b90fcc74f18dd479b401124b3841</anchor>
      <arglist>(Visitor &amp;func) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed89b5cc6e3b7d9d5bd63aed245ccd6d</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a68a7ece6c5629d1e9447a321fcb14ccd</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1fdd3189ae3a41d250593334d82210cf</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad8098aa5971139a5585e623dddbea860</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaef589c1dbd7fad93f97bd3fa1b1e768</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a111ba763100d5c287ab25d1c81342501</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0dd2c2ee796c50a63126e1e87b55985</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2755cb4023f7376880523626a8e05101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8b2a51018a73a766f5b91aef3487f013</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab710a58e4a80fbcb2594242372c8fe56</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae814abb451b48ed872819192dc188c19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae97f8d9d08f969c733c8144be6225756</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7eb5f974a8f0b67eac7080db1da0e308</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a422ddeef58bedc7bddb1d4357688d761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae41a9b5050ed27d9e93c82c9c8622cd3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac22f79b812fa564061042407f2ba8f5b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseBase</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa284042d0e1b0ad9b6a00db7fd2d9f7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>colStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a58c9b86a018984ecd713489477408dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a05c7ba6bde770355051c199beee4496b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a592ea1695e6b50edaf4ff4446117dc78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rowStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a2e042a88b4ef502317af4ef16f4c5190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>colStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>ab6af285d1c2135599fc10505f8bc4473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a754e7a58a4407a8319b5beeb652d4282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a6a2cce504be7470acae3af19c0618c36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rowStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a19dc60c1e6bced467651f2b440b2655d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>aa7231d519967c37b4f98002d80756bda</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af51b00cc45490ad698239ab6a8b94393</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af9fadc22d12e48c82745dad534a1671a</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab3dbba4a15d0fe90185d2900e5ef0fd1</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a496672306836589fa04a6ab33cb0cf2a</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a926f52a94f038db63c6b9103f98dcf0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a189c80109e76752b598d60dfcdab329e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a0c6d6904a37805ce47a3238fbd735963</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a7c60c97282d4a0f8bca16ef75e231ddb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ae66b7d18b2a85f3139b703126974c900</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>adc8286576b31e11f056057be666a0ec8</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a0171eee1d9e582d1ac7ec0f18f5f615a</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ae6ba07bad9e3026afe54806fdefe32bb</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>aa2040f14e60fed1a4a68ca7f042e1bbf</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af683e04b3926aaf4091581ca24ca09ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af163a982f5a7ad7e5c3336990b3d7000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>afeaa80359bf0c1311f91cdd74a2042a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a858151a06b8c0ff407232d84e695dd73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Diagonal</name>
    <filename>classEigen_1_1Diagonal.html</filename>
    <templarg></templarg>
    <templarg>_DiagIndex</templarg>
  </compound>
  <compound kind="class">
    <name>Diagonal&lt; const Derived, Index &gt;</name>
    <filename>classEigen_1_1Diagonal.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalMatrix</name>
    <filename>classEigen_1_1DiagonalMatrix.html</filename>
    <templarg></templarg>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <member kind="function">
      <type>DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a49c751bd59187979e1406b18e3b16049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a71b770614009e5af4b63d5f8005af2a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a07deda6348ef81a6a07577c40e5a8687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a41b3d77b1ce65062a9ab53073083bac8</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a09701a17fa9ead2145174b4f4db6ab67</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a8d674e5eaa4c378d5a3f96a9007ca349</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a09d6cb930dff5e147ce22e08f2bb74b5</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ab069e106761d66fe1c2c494e7daf2244</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a5d362adc0550baabcff2095c92c5045d</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>af04e2fd5733eda42f0d82bb6b7405b42</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a58fabb4849fa44233c21f088ac33aa06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a0b2d7eb480c889693fb31fbdb02d9c09</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ad4d81f0bf2bdb022d1910a89a6f8c819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a293457cb23a0a2c95c44a1c6101ef218</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalPreconditioner</name>
    <filename>classEigen_1_1DiagonalPreconditioner.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalWrapper</name>
    <filename>classEigen_1_1DiagonalWrapper.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalWrapper.html</anchorfile>
      <anchor>afd4146738d335e1ce99cffde198f1f31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalWrapper</name>
      <anchorfile>classEigen_1_1DiagonalWrapper.html</anchorfile>
      <anchor>af71ac89792969bdd7f2661fa6d4159a0</anchor>
      <arglist>(DiagonalVectorType &amp;a_diagonal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::EigenBase</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; BandMatrix&lt; _Scalar, Rows, Cols, Supers, Subs, Options &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BandMatrix&lt; _Scalar, Rows, Cols, Supers, Subs, Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BandMatrix&lt; _Scalar, Rows, Cols, Supers, Subs, Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; BandMatrix&lt; Scalar, Rows, Cols, Supers, Subs, Options &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BandMatrix&lt; Scalar, Rows, Cols, Supers, Subs, Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BandMatrix&lt; Scalar, Rows, Cols, Supers, Subs, Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Inverse&lt; PermutationType &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Inverse&lt; PermutationType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; PermutationType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SelfAdjointView&lt; _MatrixType, UpLo &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView&lt; _MatrixType, UpLo &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SelfAdjointView&lt; _MatrixType, UpLo &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SelfAdjointView&lt; const Derived, UpLo &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView&lt; const Derived, UpLo &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SelfAdjointView&lt; const Derived, UpLo &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseSelfAdjointView&lt; const Derived, _Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView&lt; const Derived, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseSelfAdjointView&lt; const Derived, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseSymmetricPermutationProduct&lt; MatrixType, Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; MatrixType, Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseSymmetricPermutationProduct&lt; MatrixType, Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; TriangularView&lt; _MatrixType, _Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangularView&lt; _MatrixType, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TriangularView&lt; _MatrixType, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::EigenSolver</name>
    <filename>classEigen_1_1EigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4d0b2a773357d0a6ec98e026f04002ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>adc446bcb60572758fa64515f2825db62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorsType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aa140354e2f7d5ce34c6488c39e19f2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a5bff6a6bc0efac67d52c60c2c3deb9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a83acd180404ddaac8a678fa65a6b632b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a017d49fe0d59874b70a2fcf35e5aa373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a38d032b75b3e75640e3db42e7ab20c24</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a3af22d721a6401365881b2ef252d26aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a7e8ab3d89ea525af5f27f1a8e805fae1</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aa4edf56ecc178b277b75c13a2ca1089f</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>const EigenvalueType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a114189009e42f5e03372a7a3dfa33b97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenvectorsType</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a66288022802172e3ee059283b26201d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aa7668af4bcb47cd92cfe10640589d88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>ac4af54fadc33abcdd1778c87bfbf005b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>pseudoEigenvalueMatrix</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4979eafe0aeef06b19ada7fa5e19db17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>pseudoEigenvectors</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4e796226f06e1f7347cf03a38755a155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a6cff220aadfd8d8c1366b915ddefd164</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ForceAlignedAccess</name>
    <filename>classEigen_1_1ForceAlignedAccess.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::FullPivHouseholderQR</name>
    <filename>classEigen_1_1FullPivHouseholderQR.html</filename>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a7c013e864ea0f924b0b842e0e4d91fbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a3addafbf55fc6bae65d365f2c35ed764</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR&lt; MatrixType &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a0a757bc83608859fa5e4dd68213879ea</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aeb97abe9cebe75afb94d343f8f63aaa9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a2e304eeb6878b07674785744c9e1fecb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a274c770037132e5590edf931a8f5c4e4</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aaf535d9a6dea3019e9b08f4b77b783b6</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a2ed43c16429d7c10a69a5c76605881ca</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ae9f47da5e681fc79c97cfda8dd037035</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; FullPivHouseholderQR &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a691b24a5801a4b2bf913e6bab88bf119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ae1912f61ec293bbbb6c36e7a0e0760b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a372fb6716b351244e7c4e99395227d07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a095a688aefba7f5e47d3f44000901bf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a47696a5eff44fc7af180ee8158ead3d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixQReturnType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a2cdb5e200586c8a7b6289bdad5500554</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a8b0d5faa50fbd0404e643cd0d0463194</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ab84e73253caefb441350a89242b06a42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ac7896211293865e9a7b23e7c8218b895</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>afe8b2befa7f1b4ceb1828acd05eb2294</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IntDiagSizeVectorType &amp;</type>
      <name>rowsTranspositions</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>afd82228b3887febf9585a6eb02685df2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a8ede9b86bcf677f215eb7f72c536b460</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ae63a18bacb2d9bde47d2f2a02aad85cd</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; FullPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ac9fe4808897dd48af010be1464eade83</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a89e5031086d394abbf57c6cd148674d1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::FullPivLU</name>
    <filename>classEigen_1_1FullPivLU.html</filename>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ab5bb53143afaa79dbff60d396a5dbb9b</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; MatrixType &gt;::Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aad92074f9afd5c46ede46025273c2063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>abbe2d6b161f79e9875ea0a72ede56c8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a03ad44dda3c1be7b97f50f413c8582ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a1be10af9c2efc6de2ff38185ac0126f6</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aa24ad157e9c1753955a98c1d1120642d</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ad9fc69ddc8a390122b7d16552267d76b</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const internal::image_retval&lt; FullPivLU &gt;</type>
      <name>image</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a39f27c41e85e3f6279893cb078ed3f5f</anchor>
      <arglist>(const MatrixType &amp;originalMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; FullPivLU &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aeb3b300a38ce3e2597129cd5a67cbaf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a2b771856a5acb2e5253421f1fcd4d155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a45cd2c5b9a601bc270826da165234b7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a31102ddf8b3e4fe9616624d0184a3354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::kernel_retval&lt; FullPivLU &gt;</type>
      <name>kernel</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a9249476e95f961450ac4a1842a061ec7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a08a0afcf07fc9344c06a3c388fdc3b6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ac33cca899d3c342ca71dac6524216fb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a88b1bdcb3f28d7b445fc026cd694c7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationPType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aca06461419e401cecaff9feb58c8bde6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationQType &amp;</type>
      <name>permutationQ</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a787040a2044325af71f438af6ad226d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a8d99bac6fb3f0f120acabb4e7fb61104</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ac40f1c26597491cf8a8c8ed0fdb486f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ab52a586765c61319410b9c9ad120c993</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a3212fe6f3996c18b1512c0c577621dc7</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a5ab0d23fe4ce0886e1dd3c34027d9eff</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; FullPivLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a4e4c2adb580bff893e0096ec93f8fe2b</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a1827499973a8052f5a5137db56dd04b9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GeneralizedEigenSolver</name>
    <filename>classEigen_1_1GeneralizedEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>abdec07af91db1345bb4c74066e3d0ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>ComplexVectorType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>acfd144329aca76882069da2fc5d53ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; ComplexScalar, Scalar &gt;, ComplexVectorType, VectorType &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ad59af178acc401f1bc4e330ef80f286d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorsType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>afffec018dbb2d87b4c09b6acecbb79cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a46a0ff3841059479ec314e56a5645302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a56f4b9823bb9a267de3aaf48428cd247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>afb318d0b097ff8dd5a7410d31317ca47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a5aa3d1390c2b0d455c1c9b8b3101b119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ComplexVectorType</type>
      <name>alphas</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a82b1bc41267f46e5c5899d5b084a73bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>betas</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>abeaa6f56cee367b83fd09d428462ca0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeneralizedEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a275910b47dfe5f40211dcb59cfd68f3c</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>EigenvalueType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a62f01cd78271efd5e39bcb24e0fe1a58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ae745f39da43f9df192cc2875d82b4cf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a2a3528cbf75f66d3a60af9dc7b12ff65</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>aab6423ded30275cd4cdd31758c278694</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>GeneralizedEigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a2a6f96bd042068cfc0eafba839b424bd</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GeneralizedSelfAdjointEigenSolver</name>
    <filename>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</filename>
    <templarg></templarg>
    <base>Eigen::SelfAdjointEigenSolver</base>
    <member kind="function">
      <type>GeneralizedSelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>a724764fe196612b752042692156ed023</anchor>
      <arglist>(const MatrixType &amp;matA, const MatrixType &amp;matB, int options=ComputeEigenvectors|Ax_lBx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>a501effdbf722c0609ea05ff3fd4cc721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>addc0409c9cb1a5ac9cbbd00efe68908e</anchor>
      <arglist>(const MatrixType &amp;matA, const MatrixType &amp;matB, int options=ComputeEigenvectors|Ax_lBx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>aac849f01a8c6148c645acd10bd3a9b0e</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HessenbergDecomposition</name>
    <filename>classEigen_1_1HessenbergDecomposition.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</type>
      <name>CoeffVectorType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a567f99f3770365777b67bf9832b6fac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a7c1188cd5d8f550c8941df75a50a7d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e287ac222f53e2c8ce82faa43e95ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a93a611350a7db9d1da18f2c828ecea9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a9420c36226cae7d92da8308a3f97ac2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HessenbergDecomposition &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a239a6fd42c57aab3c0b048c47fde3004</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>acd22602a3e3e5a02f79990ba1e445dc9</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aee1724cb6418ede1a8b9045036a5a319</anchor>
      <arglist>(Index size=Size==Dynamic ? 2 :Size)</arglist>
    </member>
    <member kind="function">
      <type>const CoeffVectorType &amp;</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a65fa81ce79d956baa59a30a6d82f8a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixHReturnType</type>
      <name>matrixH</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e781d2e22a2304647bcf0ae913cc8ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a346441e4902a58d43d698ac3da6ff791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a1f72b7612fd4edc5a6f31005e433e1dd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HessenbergDecomposition&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1HessenbergDecomposition.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</type>
      <name>CoeffVectorType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a567f99f3770365777b67bf9832b6fac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a7c1188cd5d8f550c8941df75a50a7d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e287ac222f53e2c8ce82faa43e95ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a93a611350a7db9d1da18f2c828ecea9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a9420c36226cae7d92da8308a3f97ac2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HessenbergDecomposition &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a239a6fd42c57aab3c0b048c47fde3004</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>acd22602a3e3e5a02f79990ba1e445dc9</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aee1724cb6418ede1a8b9045036a5a319</anchor>
      <arglist>(Index size=Size==Dynamic ? 2 :Size)</arglist>
    </member>
    <member kind="function">
      <type>const CoeffVectorType &amp;</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a65fa81ce79d956baa59a30a6d82f8a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixHReturnType</type>
      <name>matrixH</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e781d2e22a2304647bcf0ae913cc8ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a346441e4902a58d43d698ac3da6ff791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a1f72b7612fd4edc5a6f31005e433e1dd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Homogeneous</name>
    <filename>classEigen_1_1Homogeneous.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::HouseholderQR</name>
    <filename>classEigen_1_1HouseholderQR.html</filename>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a5500afa2c9bd2c70d6f350526482427b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a4e552207c3714b55dface40853df7073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a44b2ac7eb826f490e4cba819dd23de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>aa831b18d62c7a50490b1f36ab09aacd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a9a978d437f8b6ffdf3489de264ab9d67</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>ac4a97c822d0b1e517ecbf1d7f4f56a03</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a2dc3c780ac7ba7a1f81d17fe0eec2755</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a5b8ec7fc9de7a2ce15648df01a0247cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>ac7f6caab2d07d6e06dd84a4e3e5fa3fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; HouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a4568a6eb89e36c0a5e3893a37919ed2e</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeInPlace</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a134583f75cca3b10d4ef84fc87e4f9b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HouseholderSequence</name>
    <filename>classEigen_1_1HouseholderSequence.html</filename>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>af4ae7500ee47391e03aae4e1d651b4fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a08e668f2dd96ac27624de6f5fc3cfb62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a94ba79850e6b39f01f4cd7e231a93907</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EssentialVectorType</type>
      <name>essentialVector</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a8585759ecd18ce6a8f2fe63a8a3a0b77</anchor>
      <arglist>(Index k) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderSequence</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ad07709d2ffb4ff7d827d463e4cf15b93</anchor>
      <arglist>(const HouseholderSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderSequence</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>aaa7d9add66161d392dea1abf4f94444b</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a9656bd0986feed9f23333304c77529dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::matrix_type_times_scalar_type&lt; Scalar, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ab07d54a92020f55d887aecde54118693</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ae3b8dc4d69707740a3caa19f17b3ec7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence &amp;</type>
      <name>setLength</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a5814f8483250a8c0cbda77980b366c46</anchor>
      <arglist>(Index length)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a776793d590909dfdd5cbc143eab710ea</anchor>
      <arglist>(Index shift)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>acd33c0144a224f102a07a5bb51dd4d3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>HouseholderSequence &amp;</type>
      <name>setTrans</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a3411fe1c83fbd3936f19135528485f1b</anchor>
      <arglist>(bool trans)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Hyperplane</name>
    <filename>classEigen_1_1Hyperplane.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a6744b1e88a5b36ed50291e404501db2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>absDistance</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>aefc58a3e6a3e3e9029d039f41878ea88</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Hyperplane, Hyperplane&lt; NewScalarType, AmbientDimAtCompileTime, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a1a6458195edf18cb575369f230589d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>af92ace13da7b7889f8a78893add7ca10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a4051aae3c0f9afefc8a257fc2d3f751b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ac4966305ab436416787b8e4b2f03c0ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a1359e8b3261f1995a99d99fcb7a97ef5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae5e70a57dc725bfda494d3a43bed663b</anchor>
      <arglist>(const Hyperplane&lt; OtherScalarType, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a28f025a5a714beba4b8244ae42c046e5</anchor>
      <arglist>(const ParametrizedLine&lt; Scalar, AmbientDimAtCompileTime &gt; &amp;parametrized)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a5cc09f1c0256f5e0705952058c406479</anchor>
      <arglist>(const VectorType &amp;n, const Scalar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ac089921bf43e7e61516512b48ca027d1</anchor>
      <arglist>(const VectorType &amp;n, const VectorType &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>aaa9e6c8814c722cd9d28ecf2460bb740</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a1b5e9c98e43b8ee1abe3c655316fbd7b</anchor>
      <arglist>(const Hyperplane &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a8744b7d02817884f6498d204fe8ed43d</anchor>
      <arglist>(const Hyperplane&lt; Scalar, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>NormalReturnType</type>
      <name>normal</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a2044fcb0bcb3c81ffeaa383389ad1645</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstNormalReturnType</type>
      <name>normal</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>aa96d2b2086f2d1d0257ef3cda397272f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a976b10f77ff8663d26635163f5490709</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>offset</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a62d88fd2a7b3af3e8591093805824413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>offset</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a9d7d7d314622c8c69c205f4b04267b61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>projection</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a3455638212926d702d5d2949854c3e08</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>signedDistance</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a8f5b633f307c39028a3a3ac1f5cf7f86</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Hyperplane &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a3ad5bde1c904a547d99bbe216856f943</anchor>
      <arglist>(const MatrixBase&lt; XprType &gt; &amp;mat, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function">
      <type>Hyperplane &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a999552c18309b4515d1504cafc965513</anchor>
      <arglist>(const Transform&lt; Scalar, AmbientDimAtCompileTime, Affine, TrOptions &gt; &amp;t, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hyperplane</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ac091145737ed1eb627b45060e459a940</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hyperplane</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a861fd6c146cc1d39bc5386298dc5af25</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1, const VectorType &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IdentityPreconditioner</name>
    <filename>classEigen_1_1IdentityPreconditioner.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::IncompleteCholesky</name>
    <filename>classEigen_1_1IncompleteCholesky.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>SparseSolverBase&lt; IncompleteCholesky&lt; Scalar, Lower, AMDOrdering&lt; int &gt; &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a702560ecdddef77dc51d20ab22bd974e</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a0d66a1c8e340617e7ff404e63186fedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a7966bedeebbeaa7a8fe4dd1da3797a0b</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>ac39c75ff7ca5d2db9a9f03b937e12601</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncompleteCholesky</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>adaaa3975b8cf53f910d6a3344af92379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncompleteCholesky</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a757499fc814988a5b112b1f34d0295e1</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>ada0e68cb22601849464506f5986a88c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FactorType &amp;</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a7d1f1878505fd1862e6f2286d27ff09a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a0d52cec5e17f485a362766363ba90b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a4780a83266c871782595081021268b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorRx &amp;</type>
      <name>scalingS</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a30d66dd77147a84ec3302e7d5fe5d924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialShift</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a409c9586e7d29566dda2c8f5e38a1228</anchor>
      <arglist>(RealScalar shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IncompleteLUT</name>
    <filename>classEigen_1_1IncompleteLUT.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>SparseSolverBase&lt; IncompleteLUT&lt; _Scalar, int &gt; &gt;</base>
    <class kind="struct">Eigen::IncompleteLUT::keep_diag</class>
    <member kind="function">
      <type>IncompleteLUT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a488e37ab51d8ed37a297eeca521f1817</anchor>
      <arglist>(const MatrixType &amp;amat)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a941c7d34f15d7bc287e780636be0ee2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDroptol</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a9628c5a595e9e984c72d1f8e671a6925</anchor>
      <arglist>(const RealScalar &amp;droptol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillfactor</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a327767d12b55ff8a023f12a030051e17</anchor>
      <arglist>(int fillfactor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::InnerStride</name>
    <filename>classEigen_1_1InnerStride.html</filename>
    <templarg>Value</templarg>
    <base>Stride&lt; 0, Value &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::Inverse</name>
    <filename>classEigen_1_1Inverse.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::IOFormat</name>
    <filename>structEigen_1_1IOFormat.html</filename>
    <member kind="function">
      <type></type>
      <name>IOFormat</name>
      <anchorfile>structEigen_1_1IOFormat.html</anchorfile>
      <anchor>a840cac6401adc4de421260d63dc3d861</anchor>
      <arglist>(int _precision=StreamPrecision, int _flags=0, const std::string &amp;_coeffSeparator=&quot; &quot;, const std::string &amp;_rowSeparator=&quot;\n&quot;, const std::string &amp;_rowPrefix=&quot;&quot;, const std::string &amp;_rowSuffix=&quot;&quot;, const std::string &amp;_matPrefix=&quot;&quot;, const std::string &amp;_matSuffix=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IterativeSolverBase</name>
    <filename>classEigen_1_1IterativeSolverBase.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseSolverBase</base>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3f684fb41019ca04d97ddc08a0d8be2e</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7dfa55c55e82d697bde227696a630914</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a117c241af3fb1141ad0916a3cf3157ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a1374b141721629983cd8276b4b87fc58</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0d6b459433a316b4f12d48e5c80d61fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae778dd098bd5e6655625b20b1e9f15da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0922f2be45082690d7734aa6732fc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3c68fe3cd929ea1ff8a0d4cbcd65ebad</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a168a74c8dceb6233b220031fdd756ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a5e88f2a323a2900205cf807af94f8051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a709a056e17c49b5272e4971bc376cbe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>af83de7a7d31d9d4bd1fef6222b07335b</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ac160a444af8998f93da9aa30e858470d</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const SolveWithGuess&lt; Derived, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>adcc18d1ab283786dcbb5a3f63f4b4bd8</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acb442c19b5858d6b9be813dd7d36cc62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::JacobiRotation</name>
    <filename>classEigen_1_1JacobiRotation.html</filename>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>aba693b5d01d9153c979bbd3be00d49c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiRotation</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a2d8cd006c58ec7f89ffadf182a2f5926</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiRotation</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a0a86ccb0947e7e37dfd91c656483f207</anchor>
      <arglist>(const Scalar &amp;c, const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeJacobi</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a0f95b8d08df1ff8c5d82e408a45f56d2</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;, Index p, Index q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeJacobi</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>afe3f5660f40c331d191a086d93dc066b</anchor>
      <arglist>(const RealScalar &amp;x, const Scalar &amp;y, const RealScalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>af97d161cc650d4675ac87efb970e599d</anchor>
      <arglist>(const JacobiRotation &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a00530123585e987d724cc042bd15fa16</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::JacobiSVD</name>
    <filename>classEigen_1_1JacobiSVD.html</filename>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>aff0004d97d0c038141d47308a08ecd47</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a0ba0a7e1c22fd4ea7067befc60956f4b</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a580e7d880aec007fd56338ea1e180ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>aaf3ef2feca7e431c378eba97b4ebbcc6</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>af7467bffc4e90fa732372653401c4011</anchor>
      <arglist>(Index rows, Index cols, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a30b89e24f42f1692079eea31b361d26a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::IncompleteLUT::keep_diag</name>
    <filename>structEigen_1_1IncompleteLUT_1_1keep__diag.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::SimplicialCholeskyBase::keep_diag</name>
    <filename>structEigen_1_1SimplicialCholeskyBase_1_1keep__diag.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::LDLT</name>
    <filename>classEigen_1_1LDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ad9c57eb2fb3bbccd51b9d2e111bea355</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LDLT &amp;</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ac656a209860fa0c6a8faa8bb9f9a06ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LDLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a1777488d0bde83d5f23a622bf8431ef2</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a6bd6008501a537d2e16ea672a853bf3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegative</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aabd3e7aebe844034caca4c62dbe9c1eb</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositive</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a5e1c6b7ba8d7b82575d6ffdc3bf35bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a2e06dedd2651649c5b251fbf9ba4e7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ad0e8d2131ea1a626a08d98e9effb1cc5</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>adf853d6cbbc49f3535a44439bca344d9</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a154aa41bd2460199d48861eaf5e4f597</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>af0e6a0df5679873b42cf82a372dd8ddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aa5e0fd09dcd5251a8521fa248b95db0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a54838a2e31e53bbe4dcb78b5e80c8484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LDLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a858dc77b65dd48248299bb6a6a758abf</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;w, const typename LDLT&lt; MatrixType, _UpLo &gt;::RealScalar &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ae646403fdde3a4b18e278a32c61a0953</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ae3693372ca29f50d87d324dfadaae148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a776d0ab6c980847297d25b03b5d2216a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; LDLT, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aa257dd7a8acf8b347d5a22a13d6ca3e1</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const TranspositionType &amp;</type>
      <name>transpositionsP</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a47257d3500f9f7c9a4478158d0e34941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Diagonal&lt; const MatrixType &gt;</type>
      <name>vectorD</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>af60b2f826a38a00070e0efccf0572066</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LeastSquareDiagonalPreconditioner</name>
    <filename>classEigen_1_1LeastSquareDiagonalPreconditioner.html</filename>
    <templarg></templarg>
    <base>Eigen::DiagonalPreconditioner</base>
  </compound>
  <compound kind="class">
    <name>Eigen::LeastSquaresConjugateGradient</name>
    <filename>classEigen_1_1LeastSquaresConjugateGradient.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LeastSquaresConjugateGradient</name>
      <anchorfile>classEigen_1_1LeastSquaresConjugateGradient.html</anchorfile>
      <anchor>ace69f423fcc1f8960d0e2de0667447c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresConjugateGradient</name>
      <anchorfile>classEigen_1_1LeastSquaresConjugateGradient.html</anchorfile>
      <anchor>a91c4f2edc20f93cee9b721165937fb99</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LLT</name>
    <filename>classEigen_1_1LLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ac7a64274814fa76e8b1e9e945546037f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LLT &amp;</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a559aba3a7c41f7fc87ec84327bb72ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>aecb45daf711328e0804f272131142b57</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>adb1295e7d2b1fd825a041345ae08be54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a16d1ec9ea6497ba1febb242c2e8a7a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a1848a00addade9a0f7f70493c52ecc9d</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ab3656cfbdf38e03c57d5cf79bf8131b6</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a7f4a3eedbf82e7ce2d6bf0dcd84cdfa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>af62881fc95c7e54a93b63c20f2c62b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a18a390f085567e650e8345cc7e7c0df8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LLT&lt; _MatrixType, _UpLo &gt;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>aae1ee59cb3c46723721da6fd72acc21a</anchor>
      <arglist>(const VectorType &amp;v, const RealScalar &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a59338fa78db171d02fd5a2c9e4f3a30c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a8b6ba1bc41811c50e65cac8db597d802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; LLT, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a3738bb3ce6f9b837a2beb432b937499f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map</name>
    <filename>classEigen_1_1Map.html</filename>
    <templarg></templarg>
    <templarg>MapOptions</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Derived, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Derived, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, AlignedMax &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; const Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt;, Unaligned &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</name>
    <filename>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a62785b607c1f24dfc042e28dedc791f8</anchor>
      <arglist>(const Scalar *coeffs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</name>
    <filename>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a225f365e99258e028ef1ffa0031fab9b</anchor>
      <arglist>(Scalar *coeffs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; SparseMatrix&lt; _Scalar, _Flags, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; SparseMatrix&lt; Scalar, _Flags, StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; SparseMatrixType &gt;</name>
    <filename>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</anchorfile>
      <anchor>a3afd7ca5fb61494e9195a1e318078028</anchor>
      <arglist>(Index rows, Index cols, Index nnz, const StorageIndex *outerIndexPtr, const StorageIndex *innerIndexPtr, const Scalar *valuePtr, const StorageIndex *innerNonZerosPtr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</anchorfile>
      <anchor>aeecd1e0e97eeae254ad97cdf5bde9ec2</anchor>
      <arglist>(Index rows, Index cols, Index nnz, StorageIndex *outerIndexPtr, StorageIndex *innerIndexPtr, Scalar *valuePtr, StorageIndex *innerNonZerosPtr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Map</name>
      <anchorfile>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</anchorfile>
      <anchor>aefb5ce85ff8508d6a035b1b72158ca83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>aea142bb9ac9aa1b8c6b44f413daa4b88</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a6d8ebb28996655c441d5d744ac227c8d</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a474a755c6699eeeb9fd4fc70c502cdec</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>acaf91005e3230bbffe1c69a4199a0506</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ac309779622f2d4970f8cd2e95570ccf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a1bee30414766e9116a7abed067ca8007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a1ed41c4f721b9c87e8b071324532922d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MapBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1MapBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::MappedSparseMatrix</name>
    <filename>classEigen_1_1MappedSparseMatrix.html</filename>
    <templarg></templarg>
    <templarg>_Flags</templarg>
    <templarg></templarg>
    <base>Map&lt; SparseMatrix&lt; _Scalar, _Flags, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>~MappedSparseMatrix</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>a0c36a53853f1659ea59447bcb9a20799</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappedSparseMatrix&lt; Scalar, ColMajor, StorageIndex &gt;</name>
    <filename>classEigen_1_1MappedSparseMatrix.html</filename>
    <base>Map&lt; SparseMatrix&lt; Scalar, _Flags, StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>~MappedSparseMatrix</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>a0c36a53853f1659ea59447bcb9a20799</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Matrix</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>PlainObjectBase&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <docanchor file="classEigen_1_1Matrix.html">dense</docanchor>
    <docanchor file="classEigen_1_1Matrix.html">fixedsize</docanchor>
    <docanchor file="classEigen_1_1Matrix.html">maxrows</docanchor>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;(~RowMajor), MaxColsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; int, 1, MatrixType::ColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; int, MatrixType::RowsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; RealScalar, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; RealScalar, Dynamic, Dynamic, ColMajor &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, 1, Size, Options|RowMajor, 1, MaxSize &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, 3, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, AmbientDimAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, AmbientDimAtCompileTime, 1, Options &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, ColsAtCompileTime, ColsAtCompileTime, MatrixOptions, MaxColsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, DiagSizeAtCompileTime, DiagSizeAtCompileTime, MatrixOptions, MaxDiagSizeAtCompileTime, MaxDiagSizeAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Dim, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Index(AmbientDimAtCompileTime)==Dynamic ? Dynamic :Index(AmbientDimAtCompileTime)+1, 1, Options &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, RowsAtCompileTime, 1, 0, MaxRowsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, RowsAtCompileTime, RowsAtCompileTime, MatrixOptions, MaxRowsAtCompileTime, MaxRowsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Size, Size, ColMajor, MaxColsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; StorageIndex, 1, EIGEN_SIZE_MIN_PREFER_DYNAMIC(ColsAtCompileTime, RowsAtCompileTime), RowMajor, 1, EIGEN_SIZE_MIN_PREFER_FIXED(MaxColsAtCompileTime, MaxRowsAtCompileTime)&gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; StorageIndex, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; StorageIndex, MatrixType::RowsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>PlainObjectBase&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBase</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afacca1f88da57e5cd87dd07c8ff926bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a51c5982c1f64e45a939515b701fa6f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8f2c8059ef3f04cfa0c73b4c012db855</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab3e52262b41fa40e194dda245e0f9675</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3a08ad41e81d8ad4a37b5d5c7490e765</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae669131f6e18f7e8f06fae271754f435</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a45d91752925d2757fc8058a293b15462</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Derived &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a354c33eec32ceb4193d002f4d41c0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayWrapper&lt; const Derived &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72f287fe7b2a7e7a66d16cc88166d47f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Derived &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a14235b62c90f93fe910070b4743782d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; PlainObject &gt;</type>
      <name>bdcSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae171b74b5d530846ee0836135ffcf837</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f3faa00163c16824ff03e58a210c74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adee8c19c833245bbb00a591dce68e8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteOrthogonalDecomposition&lt; PlainObject &gt;</type>
      <name>completeOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae90b6846f05bd30b8d52b66e427e3e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7baaf2fdec0191a2166cf9fd84a2dcb2</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a116f3b50d2af7dbdf7473e517a5b8b0f</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a34d626eb756bbeb4069d1eb0e6494c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627e6f11bf5854ade9a5abfc344c0367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ad8f77004bb956b603bb43fd2e3c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a63882a46e6f35b432d427f280f7a18e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a13d4b8efbd7797ee8efd3dd988a7f7</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed11a711c0a3d5dbf8bc094008e29846</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab79e511b9322b8b801858e253fb257eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarBinaryOpTraits&lt; typename internal::traits&lt; Derived &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adfd32bf5fcf6ee603c924dde9bf7bc39</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a30430fa3d5b4e74d312fd4f502ac984d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixExponentialReturnValue&lt; Derived &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a70901e189e876f64d7f3fee1dbe942cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb6e1b10c5f3d130100089dca3c5ee06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; Derived &gt;, Derived &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae35213d1dd4dd13ebe9a7a762d6bb847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; Derived &gt;, Derived &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af42d92f115d4b8fa3d5aa731ed496ed1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a863bc0e06b641a089508eabec6835ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a25da97d31acab0ee5d9d13bdbb0569da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a9377aab1cea26db5f25bab7e682f8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32222d3b6677e6cdf0b801463f329b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; Derived &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7712eb69e8ea3c8f7b8da1c44dbdeebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97027ea54c8cd1ddb1c578fee5cedc67</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4ccbd8dfa06e9d47b9bf84711f8b9d40</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1e96c42d79a56f0a6ade30ce031e17eb</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aefdc8e4e4c156fdd79a21479e75dcd8a</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a7ee34ce202cac3eeea9cf20c9e4833</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae3ec1660bb4ac584220481c54ab4a64</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5745dca9c54390633b434e54a1d1eedd</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, LazyProduct &gt;</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae0c280b1066c14ed577021f38876527f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ecf058a0727a4cab8b42d79e95072e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90c45f7a30265df792d5aeaddead2635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixLogarithmReturnValue&lt; Derived &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4dc57b319fc1cf8c9035016e56602a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72586ab059e889e7d2894ff227747e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb312afbfe960cbda67811552d876fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a13291e900f7e81ddc6e5b8802f82092b</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebf4bac7dffe2685ab93734fb776e817</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>matrixFunction</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1a6cc9f734eb175e785a1118305245fc</anchor>
      <arglist>(StemFunction f) const</arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; Derived, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2c1085de7645f23f240876388457da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a196c4ec3c8ffdf5bda45d0f617154975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad16303c47ba36f7a41ea264cb26bceb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5cf2fd4c57e59604fd4116158fd34308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a028c7ac8094d610042fd0f9feca68f63</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, DiagonalDerived, LazyProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a36fb95c37f0a454e0e2e5cb120b2df7f</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae2d220efbf7047f0894787888288cfcc</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3783b6168995ca117a1c19fea3630ac4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a983cc3be0bbe11b3d041a415b76ce010</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1042124b0ddee66e78ac7b0a9ac4cc9c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a373bf62ad398162df5a71963ed7cbeff</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a80e3e1e83fdf43f9f7fb6ff51836b24d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ff9bc0b9bea2d0822a2bf3192783102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6199d8aaf26c1b8ac3097fdfa7733a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerReturnValue&lt; Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ae6c25e6a94a60e147741e76203a73b</anchor>
      <arglist>(const RealScalar &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixComplexPowerReturnValue&lt; Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a91dcacf224bd8b18346914bdf7eefc31</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template SelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad446541377593656c1399862fe6a0f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template ConstSelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67eb836f331d9b567e7f36ec0782fa07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a18e969adfdf2db4ac44c47fbdc854683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97dec020729928e328fe8ae9aad1e99e</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a02f4ff0fcbbae2f3ccaa5981e8ad5e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9c37eab2dc7baf83809269254c9129e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixSquareRootReturnValue&lt; Derived &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad873dca860bd47baeeede8663e161b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8da566526419f9742a6c471bbd87e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab84d3e64f855813b1eea4202c0697dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableNormalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0b1443fa322615379557ade3399a3c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>stableNormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a399dca938633b9f8df5ec4beefeccec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a544b609f65eb2bd3e368b3fc2d79479e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a56665aa894f49f2765291fee0eaeb9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa044521145e74117ad1df42460d7b520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a98bb9a0f705c6dfde85b0bfff31bf88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acf33ce20ef03ead47cb3dbcd5f416ede</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9daf6d22d10ed8ae00432b0f641455df</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7a03a61014f37ddd2fe61ebac0c9539</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af56ba94e5b0330827003eadd26cfadc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a555b7cf626cced54670b98668c4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a00850083489e20249b1d05b394fc5efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aabdcdeff1c822a5465fcbe1f78e5afe0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <base>DenseBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</base>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afacca1f88da57e5cd87dd07c8ff926bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a51c5982c1f64e45a939515b701fa6f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8f2c8059ef3f04cfa0c73b4c012db855</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab3e52262b41fa40e194dda245e0f9675</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3a08ad41e81d8ad4a37b5d5c7490e765</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae669131f6e18f7e8f06fae271754f435</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a45d91752925d2757fc8058a293b15462</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a354c33eec32ceb4193d002f4d41c0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayWrapper&lt; const Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72f287fe7b2a7e7a66d16cc88166d47f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a14235b62c90f93fe910070b4743782d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; PlainObject &gt;</type>
      <name>bdcSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae171b74b5d530846ee0836135ffcf837</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f3faa00163c16824ff03e58a210c74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adee8c19c833245bbb00a591dce68e8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteOrthogonalDecomposition&lt; PlainObject &gt;</type>
      <name>completeOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae90b6846f05bd30b8d52b66e427e3e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7baaf2fdec0191a2166cf9fd84a2dcb2</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a116f3b50d2af7dbdf7473e517a5b8b0f</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a34d626eb756bbeb4069d1eb0e6494c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627e6f11bf5854ade9a5abfc344c0367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ad8f77004bb956b603bb43fd2e3c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a63882a46e6f35b432d427f280f7a18e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a13d4b8efbd7797ee8efd3dd988a7f7</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed11a711c0a3d5dbf8bc094008e29846</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab79e511b9322b8b801858e253fb257eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarBinaryOpTraits&lt; typename internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adfd32bf5fcf6ee603c924dde9bf7bc39</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a30430fa3d5b4e74d312fd4f502ac984d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixExponentialReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a70901e189e876f64d7f3fee1dbe942cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb6e1b10c5f3d130100089dca3c5ee06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; Solve&lt; Decomposition, RhsType &gt; &gt;, Solve&lt; Decomposition, RhsType &gt; &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae35213d1dd4dd13ebe9a7a762d6bb847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; Solve&lt; Decomposition, RhsType &gt; &gt;, Solve&lt; Decomposition, RhsType &gt; &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af42d92f115d4b8fa3d5aa731ed496ed1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a863bc0e06b641a089508eabec6835ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a25da97d31acab0ee5d9d13bdbb0569da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a9377aab1cea26db5f25bab7e682f8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32222d3b6677e6cdf0b801463f329b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7712eb69e8ea3c8f7b8da1c44dbdeebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97027ea54c8cd1ddb1c578fee5cedc67</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4ccbd8dfa06e9d47b9bf84711f8b9d40</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1e96c42d79a56f0a6ade30ce031e17eb</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aefdc8e4e4c156fdd79a21479e75dcd8a</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a7ee34ce202cac3eeea9cf20c9e4833</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae3ec1660bb4ac584220481c54ab4a64</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5745dca9c54390633b434e54a1d1eedd</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Solve&lt; Decomposition, RhsType &gt;, OtherDerived, LazyProduct &gt;</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae0c280b1066c14ed577021f38876527f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ecf058a0727a4cab8b42d79e95072e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90c45f7a30265df792d5aeaddead2635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixLogarithmReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4dc57b319fc1cf8c9035016e56602a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72586ab059e889e7d2894ff227747e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb312afbfe960cbda67811552d876fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a13291e900f7e81ddc6e5b8802f82092b</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebf4bac7dffe2685ab93734fb776e817</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>matrixFunction</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1a6cc9f734eb175e785a1118305245fc</anchor>
      <arglist>(StemFunction f) const</arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; Solve&lt; Decomposition, RhsType &gt;, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2c1085de7645f23f240876388457da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a196c4ec3c8ffdf5bda45d0f617154975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad16303c47ba36f7a41ea264cb26bceb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5cf2fd4c57e59604fd4116158fd34308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a028c7ac8094d610042fd0f9feca68f63</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Solve&lt; Decomposition, RhsType &gt;, DiagonalDerived, LazyProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a36fb95c37f0a454e0e2e5cb120b2df7f</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Solve&lt; Decomposition, RhsType &gt;, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae2d220efbf7047f0894787888288cfcc</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3783b6168995ca117a1c19fea3630ac4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a983cc3be0bbe11b3d041a415b76ce010</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1042124b0ddee66e78ac7b0a9ac4cc9c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a373bf62ad398162df5a71963ed7cbeff</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a80e3e1e83fdf43f9f7fb6ff51836b24d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ff9bc0b9bea2d0822a2bf3192783102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6199d8aaf26c1b8ac3097fdfa7733a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ae6c25e6a94a60e147741e76203a73b</anchor>
      <arglist>(const RealScalar &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixComplexPowerReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a91dcacf224bd8b18346914bdf7eefc31</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template SelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad446541377593656c1399862fe6a0f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template ConstSelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67eb836f331d9b567e7f36ec0782fa07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a18e969adfdf2db4ac44c47fbdc854683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97dec020729928e328fe8ae9aad1e99e</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a02f4ff0fcbbae2f3ccaa5981e8ad5e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9c37eab2dc7baf83809269254c9129e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixSquareRootReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad873dca860bd47baeeede8663e161b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8da566526419f9742a6c471bbd87e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab84d3e64f855813b1eea4202c0697dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableNormalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0b1443fa322615379557ade3399a3c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>stableNormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a399dca938633b9f8df5ec4beefeccec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a544b609f65eb2bd3e368b3fc2d79479e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a56665aa894f49f2765291fee0eaeb9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa044521145e74117ad1df42460d7b520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a98bb9a0f705c6dfde85b0bfff31bf88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acf33ce20ef03ead47cb3dbcd5f416ede</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9daf6d22d10ed8ae00432b0f641455df</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7a03a61014f37ddd2fe61ebac0c9539</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af56ba94e5b0330827003eadd26cfadc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a555b7cf626cced54670b98668c4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a00850083489e20249b1d05b394fc5efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aabdcdeff1c822a5465fcbe1f78e5afe0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixWrapper</name>
    <filename>classEigen_1_1MatrixWrapper.html</filename>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1MatrixWrapper.html</anchorfile>
      <anchor>a1712f7e4840af7950ff480aa2efe1b8f</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1MatrixWrapper.html</anchorfile>
      <anchor>a41d991d9d3e380c88c2d7f1051c8d3f4</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixXpr</name>
    <filename>structEigen_1_1MatrixXpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::MetisOrdering</name>
    <filename>classEigen_1_1MetisOrdering.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NaturalOrdering</name>
    <filename>classEigen_1_1NaturalOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1NaturalOrdering.html</anchorfile>
      <anchor>aa39e772105ed66da9e909f2a9385be37</anchor>
      <arglist>(const MatrixType &amp;, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::NestByValue</name>
    <filename>classEigen_1_1NestByValue.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NoAlias</name>
    <filename>classEigen_1_1NoAlias.html</filename>
    <templarg></templarg>
    <templarg>StorageBase</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NumTraits</name>
    <filename>structEigen_1_1NumTraits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>NumTraits&lt; Scalar &gt;</name>
    <filename>structEigen_1_1NumTraits.html</filename>
  </compound>
  <compound kind="class">
    <name>NumTraits&lt; typename MatrixType::Scalar &gt;</name>
    <filename>structEigen_1_1NumTraits.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::OuterStride</name>
    <filename>classEigen_1_1OuterStride.html</filename>
    <templarg>Value</templarg>
    <base>Stride&lt; Value, 0 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::ParametrizedLine</name>
    <filename>classEigen_1_1ParametrizedLine.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>ae2d24d0584d1d51e88bf0909f7b63831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; ParametrizedLine, ParametrizedLine&lt; NewScalarType, AmbientDimAtCompileTime, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>abc9db98ec6d5ef9ab5408caa1951f95e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a052a548c40ddc9c23d54ac8ff4a83ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>distance</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>af5239d217f4a42b9718459287c09eee6</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>_Scalar</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a882c3242f201b32bdae32b5d7b4aac81</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const</arglist>
    </member>
    <member kind="function">
      <type>_Scalar</type>
      <name>intersectionParameter</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>aee7b6cdd3532670572ccfd0143715ca4</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>intersectionPoint</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a120630228b6982b68d701220cc6a5f93</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a40499d8ca5cbc90188a5ebaa0690be0c</anchor>
      <arglist>(const ParametrizedLine &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a798dc30c645329d006d60ed5e61133b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>afd85ff9972370479f3d07fa7c39bdf37</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a61d7667a53616d49148f7ed4e613029e</anchor>
      <arglist>(const ParametrizedLine&lt; OtherScalarType, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a1b238b8b5fde91db2922005edd860539</anchor>
      <arglist>(const VectorType &amp;origin, const VectorType &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>af1eaa5083d01b2a936ea7c75d0bdfdae</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>pointAt</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a369278cba74f76ef8abb4d999a8225e1</anchor>
      <arglist>(const Scalar &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>projection</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a68fb94e7899b60642b073d0c6de33c83</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredDistance</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a0e647d5a411def9a0274d87671d4c94c</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParametrizedLine</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>ae5262664eb6f36a3e76004c948a4e9d4</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLDLT</name>
    <filename>classEigen_1_1PardisoLDLT.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLLT</name>
    <filename>classEigen_1_1PardisoLLT.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLU</name>
    <filename>classEigen_1_1PardisoLU.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PartialPivLU</name>
    <filename>classEigen_1_1PartialPivLU.html</filename>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a7463611de2f7ccc5b1c66b857d98ca78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; PartialPivLU &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ad42ee3215533313febf86442d71a12fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a8fe282fbb5bdc51e1e9608624560eed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a27d5af4e6d13c175794233329c8c05cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a2af05ff1ce2d7cc4873962016d114605</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ae90ee629ae010f106ed712cefb93c0ca</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a708eda30806d4ad4731c5b7ad4accade</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a128d22259d05c8c038c876b53f6ddec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a0282876192eec57ce10b8869542f7915</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>ad0070ee919960206a9e4e162f0f93bea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PartialPivLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>aa1db4a8af12e76d777846f4db4c8d45a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PartialReduxExpr</name>
    <filename>classEigen_1_1PartialReduxExpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLDLT</name>
    <filename>classEigen_1_1PastixLDLT.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>aab040289e7ba703326c03b11fb084341</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a7713ed923776078c7b3502edd4648215</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a1c0a387365fb676515c4a7d437708c4f</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLLT</name>
    <filename>classEigen_1_1PastixLLT.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a00f7fb339fe7a89af66c8307b7078804</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a5d6c118b2723d7e88291e138a132f215</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a2ab5dcc58f707a2551d4dd5dacde08d4</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLU</name>
    <filename>classEigen_1_1PastixLU.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>a4fc46a120032a448fca3b0be1c4ae5c0</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>acb4fddee92e3e74fd67ced0afaa99d35</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>a51bfa28ba2b74220906a682e8d002dea</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationBase</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <templarg></templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a865e88989a76b7e92f39bad5250b89c4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ae81574e059f6b9b7de2ea747fd346a1b</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f404810659d5095a6db906a4728ddfb</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>EigenBase&lt; Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &gt;</base>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a865e88989a76b7e92f39bad5250b89c4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ae81574e059f6b9b7de2ea747fd346a1b</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f404810659d5095a6db906a4728ddfb</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>EigenBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a865e88989a76b7e92f39bad5250b89c4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ae81574e059f6b9b7de2ea747fd346a1b</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f404810659d5095a6db906a4728ddfb</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>EigenBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a865e88989a76b7e92f39bad5250b89c4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ae81574e059f6b9b7de2ea747fd346a1b</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f404810659d5095a6db906a4728ddfb</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>EigenBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</base>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a865e88989a76b7e92f39bad5250b89c4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>ae81574e059f6b9b7de2ea747fd346a1b</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a3f404810659d5095a6db906a4728ddfb</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationMatrix</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <templarg></templarg>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationMatrix&lt; ColsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt;</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationMatrix&lt; RowsAtCompileTime, MaxRowsAtCompileTime &gt;</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::PermutationStorage</name>
    <filename>structEigen_1_1PermutationStorage.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationWrapper</name>
    <filename>classEigen_1_1PermutationWrapper.html</filename>
    <templarg></templarg>
    <base>PermutationBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</base>
    <member kind="function">
      <type>const internal::remove_all&lt; typename IndicesType::Nested &gt;::type &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationWrapper.html</anchorfile>
      <anchor>a88ae93cc14c136b2eec4a286b4c10c34</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PlainObjectBase</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <templarg></templarg>
    <base>Eigen::doxygen::dense_xpr_base_dispatcher</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Derived &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Derived &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Derived &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Derived &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; double, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; Index, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Array&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; ComplexScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; int, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; RealScalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>dense_xpr_base_dispatcher&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_resize_to_match</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a35c62d0feeb92a83704d518402cdbfdf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set_noalias</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af638f6f03edf4384b1ff1070485987b6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a54a3d3aba10bf017b41f0dbd9342dea0</anchor>
      <arglist>(Index rows, Index cols, typename internal::enable_if&lt; Base::SizeAtCompileTime!=2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2eaf38d7a71d5c0849a9dcb3396abe89</anchor>
      <arglist>(const T0 &amp;val0, const T1 &amp;val1, typename internal::enable_if&lt; Base::SizeAtCompileTime==2, T0 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init2</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac9c37eb6466e33da2af0a2f5e673c764</anchor>
      <arglist>(const Index &amp;val0, const Index &amp;val1, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; T0, Index &gt;::value) &amp;&amp;(internal::is_same&lt; T1, Index &gt;::value) &amp;&amp;Base::SizeAtCompileTime==2, T1 &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aeb0be79ed80a425cad223d47ccda07b8</anchor>
      <arglist>(Index size, typename internal::enable_if&lt;(Base::SizeAtCompileTime!=1||!internal::is_convertible&lt; T, Scalar &gt;::value) &amp;&amp;((!internal::is_same&lt; typename internal::traits&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value||Base::SizeAtCompileTime==Dynamic)), T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8295af1e8236ad2be1a1dc8023a49edf</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad5830b59e4c7b759c72afe0c2e28cced</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime==1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa688fc09ad2cf7e22fc027618812aec3</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a6da7fb21280c9919478741e53116cd9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab26db59f31522ed08b3ffed51dfd20f7</anchor>
      <arglist>(const Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a49cdb807ab54602a8f2fd51dcc0ace92</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aad467f7b89f967fe3fdf7c8420ef5eb9</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a507e484ddddd9fb4e09de46c3b52e874</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2cdf8906cbc61e655beae78baafbf4d6</anchor>
      <arglist>(const Scalar &amp;val0, typename internal::enable_if&lt; Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T &gt;::type *=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>_init1</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2f2ffa0c97bf3eb697743d91bfe45f00</anchor>
      <arglist>(const Index &amp;val0, typename internal::enable_if&lt;(!internal::is_same&lt; Index, Scalar &gt;::value) &amp;&amp;(internal::is_same&lt; Index, T &gt;::value) &amp;&amp;Base::SizeAtCompileTime!=Dynamic &amp;&amp;Base::SizeAtCompileTime!=1 &amp;&amp;internal::is_convertible&lt; T, Scalar &gt;::value &amp;&amp;internal::is_same&lt; typename internal::traits&lt; Matrix&lt; StorageIndex, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;::XprKind, ArrayXpr &gt;::value, T * &gt;::type *=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf9fcc07dc13f89cf71d4a4e2b220d24</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab5392255cbc16c3d3d91b09088e027b4</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd3e2e293d1d8591a5e6772ecc4d2c4c</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ab195765374a1d5dee35dff790346bd42</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstMapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>adffe779fdca149b5eba4dc542bf76b94</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MapType</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad1815d868cb69ebba3d4e1c9e263d2af</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8ed320f4d926ab401117564cafc3e232</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a240ab54b8839d02bdd35e358a3d66b73</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aebf9df309b9b6f4e5cc0d495a423f749</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aaf22e2ddbebc397d1e6b17a95af8e7d4</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a1a3a8fd56500cda9a96189cd55472203</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>Map</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad41d75bfc07b50b2912f99212a7265ed</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae618ce2543ce8deef2a838864de2b610</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aa3281e4121e5e404f93ee9890c13e1dd</anchor>
      <arglist>(Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a7314ec5e42ff5f3563cf3f77090d8318</anchor>
      <arglist>(const Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a62d868608b47d93e3e0c86339870bc43</anchor>
      <arglist>(Scalar *data, Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConstAlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8b161ab58c8370b97ac8131efb6964dc</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static AlignedMapType</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a98a4e03be918eb01bd7719d260debe1a</anchor>
      <arglist>(Scalar *data, Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aadc343ac6294b26d8e2033a1c1400600</anchor>
      <arglist>(const Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>abd8ce90b470cfa30cae08f9c673912c9</anchor>
      <arglist>(Scalar *data, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a91374e2e77a219a44d980cc14be3a961</anchor>
      <arglist>(const Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a2b1ce06138d53af1bb729ec1dab87e5a</anchor>
      <arglist>(Scalar *data, Index size, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedConstAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a48fbb5cbf164540617c5ca3e05afe953</anchor>
      <arglist>(const Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StridedAlignedMapType&lt; Stride&lt; Outer, Inner &gt; &gt;::type</type>
      <name>MapAligned</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af2ce47a0cde3943e528e00f2b191f7da</anchor>
      <arglist>(Scalar *data, Index rows, Index cols, const Stride&lt; Outer, Inner &gt; &amp;stride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Product</name>
    <filename>classEigen_1_1Product.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Option</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Quaternion</name>
    <filename>classEigen_1_1Quaternion.html</filename>
    <member kind="function">
      <type>Quaternion&lt; Scalar, Options &gt;</type>
      <name>FromTwoVectors</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a76f8beacbb8f2e767faebbca541bc908</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a511ed4ea8d95687fbc80b7107600972e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a115f2b0989a70935e25c980eb21f8a78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>ac740a87dffad530c0b8472ca1d658435</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>ab5d66963438bbbdfb4e6b6f73ac537cc</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a0a940749afbb104bf0af2660479e6c6b</anchor>
      <arglist>(const Quaternion&lt; OtherScalar, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a472b5049e3c3c870d27e0fc7feab565f</anchor>
      <arglist>(const QuaternionBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a4e6800985f1205f94c2e83260ebe90cf</anchor>
      <arglist>(const Scalar &amp;w, const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a152161652db7d33ded0b807f5705097a</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>UnitRandom</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a1206caa1296736aae0bfac4094698896</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuaternionBase</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a26434ee57d8ebb6604398d7510042eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a53df1cea432edc20d7652ccd16fa73c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae35177f4791e16e4f43fd2591182b517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aae0b06729e20b45be97dc829f506914d</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a12159cadd5a89f090bdcf8b38e97bdbf</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480d2f8b79899e8b23b06b7dc4d94b8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a00986c3290118d9cd385c4c215790d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8d16b93314ed50b1495e2a6bfde02810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>af974d91025bf11cd64a3a13c4c353977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a04dc8bb8cc0e25759a8389e71887adcb</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a121b81deba9f9f201b80fc8028ad04af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac8da1a3e241f5493e73f1586f9a24085</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a48f5dfe21e6e4a438a0264ca2e2f87db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a894d4f21395f99179cd03003b358bfcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a608acc14666e7e2ccc2ab35a267daabe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad0e868bd5094a47d60744190e7191a9c</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a0d8ed138199542f6dd68bd341b6ea434</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a85a49087023fd971f1eb6839f44a126a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a554ca87ba4262060f8ea8844e624ccf1</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab75098872cb991957fd1ec484cbae06b</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a511ed4ea8d95687fbc80b7107600972e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aee7918572664d4db973a7e715b7b637c</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1940babfaf4ffe9a8f6113eb9b96c231</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bbc5f68a5a037b25582df0dab75e509</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a47a0a068545d0f13b0ba760e01d81c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a375c44ddb5ca53dbfbe3e4856f27bfaa</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a993aaf8b6d7292de112f45eac4d63ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acce07806d2abb15723d1af573f30a75a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a28e5b09f233ec3b1297183df22cfb65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3badfa126f5201a6809d11361ac4beb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab49bcd30100a0fc2b448704ae9c14e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>af66fce093317119c5a1c27dcbd108ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aca891c8982b3f4fab750afe4e0be4560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7324d2f8345a4f5509cd0a8be1c68c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a10e9a73f3b80ca87422a598bc091cd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1f0fd789a474ecf3ca9d4820ca0c0513</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab4aa3b1df2726383387896aede553013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a56ca2bbfff4f75c1452111a4e1cd3e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6af047252a3faceb78cee0f0b1d02277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuaternionBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a26434ee57d8ebb6604398d7510042eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a53df1cea432edc20d7652ccd16fa73c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae35177f4791e16e4f43fd2591182b517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aae0b06729e20b45be97dc829f506914d</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a12159cadd5a89f090bdcf8b38e97bdbf</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480d2f8b79899e8b23b06b7dc4d94b8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a00986c3290118d9cd385c4c215790d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8d16b93314ed50b1495e2a6bfde02810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>af974d91025bf11cd64a3a13c4c353977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a04dc8bb8cc0e25759a8389e71887adcb</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a121b81deba9f9f201b80fc8028ad04af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac8da1a3e241f5493e73f1586f9a24085</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a48f5dfe21e6e4a438a0264ca2e2f87db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a894d4f21395f99179cd03003b358bfcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a608acc14666e7e2ccc2ab35a267daabe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad0e868bd5094a47d60744190e7191a9c</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a0d8ed138199542f6dd68bd341b6ea434</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a85a49087023fd971f1eb6839f44a126a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a554ca87ba4262060f8ea8844e624ccf1</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab75098872cb991957fd1ec484cbae06b</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a511ed4ea8d95687fbc80b7107600972e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aee7918572664d4db973a7e715b7b637c</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1940babfaf4ffe9a8f6113eb9b96c231</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bbc5f68a5a037b25582df0dab75e509</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a47a0a068545d0f13b0ba760e01d81c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a375c44ddb5ca53dbfbe3e4856f27bfaa</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a993aaf8b6d7292de112f45eac4d63ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acce07806d2abb15723d1af573f30a75a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a28e5b09f233ec3b1297183df22cfb65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3badfa126f5201a6809d11361ac4beb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab49bcd30100a0fc2b448704ae9c14e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>af66fce093317119c5a1c27dcbd108ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aca891c8982b3f4fab750afe4e0be4560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7324d2f8345a4f5509cd0a8be1c68c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a10e9a73f3b80ca87422a598bc091cd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1f0fd789a474ecf3ca9d4820ca0c0513</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab4aa3b1df2726383387896aede553013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a56ca2bbfff4f75c1452111a4e1cd3e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6af047252a3faceb78cee0f0b1d02277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuaternionBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a26434ee57d8ebb6604398d7510042eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a53df1cea432edc20d7652ccd16fa73c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae35177f4791e16e4f43fd2591182b517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aae0b06729e20b45be97dc829f506914d</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a12159cadd5a89f090bdcf8b38e97bdbf</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a480d2f8b79899e8b23b06b7dc4d94b8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a00986c3290118d9cd385c4c215790d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8d16b93314ed50b1495e2a6bfde02810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>af974d91025bf11cd64a3a13c4c353977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a04dc8bb8cc0e25759a8389e71887adcb</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a121b81deba9f9f201b80fc8028ad04af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac8da1a3e241f5493e73f1586f9a24085</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a48f5dfe21e6e4a438a0264ca2e2f87db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a894d4f21395f99179cd03003b358bfcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a608acc14666e7e2ccc2ab35a267daabe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad0e868bd5094a47d60744190e7191a9c</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a0d8ed138199542f6dd68bd341b6ea434</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a85a49087023fd971f1eb6839f44a126a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a554ca87ba4262060f8ea8844e624ccf1</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab75098872cb991957fd1ec484cbae06b</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a511ed4ea8d95687fbc80b7107600972e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aee7918572664d4db973a7e715b7b637c</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1940babfaf4ffe9a8f6113eb9b96c231</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7bbc5f68a5a037b25582df0dab75e509</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a47a0a068545d0f13b0ba760e01d81c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a375c44ddb5ca53dbfbe3e4856f27bfaa</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a993aaf8b6d7292de112f45eac4d63ec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>acce07806d2abb15723d1af573f30a75a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a28e5b09f233ec3b1297183df22cfb65c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a3badfa126f5201a6809d11361ac4beb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab49bcd30100a0fc2b448704ae9c14e67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>af66fce093317119c5a1c27dcbd108ff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aca891c8982b3f4fab750afe4e0be4560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7324d2f8345a4f5509cd0a8be1c68c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a10e9a73f3b80ca87422a598bc091cd8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a1f0fd789a474ecf3ca9d4820ca0c0513</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab4aa3b1df2726383387896aede553013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a56ca2bbfff4f75c1452111a4e1cd3e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6af047252a3faceb78cee0f0b1d02277</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RealQZ</name>
    <filename>classEigen_1_1RealQZ.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a6201e534e901b5f4e66f72c176b534a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a2b6847964d9f1903193cc3e67c196849</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a36bd77afed89f3f5c110a715e69e4c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>afbecc6d0ab1de42be9db79428da48ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a212bc2f69ea4eff830fde70e209e40fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixS</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad24d7bf534afb55adaef00f00846adaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a8dc963d8ea2a17df9d8d718e9e34d06f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a19a116383f11423179b4d8f316da6f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ac6e41c839f8dae31c9a3906ea7540119</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad8fb9235870a8361a2fdd8dcc2e80d01</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a30ae65666b1757e4a2b6a28eaec12226</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealQZ&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1RealQZ.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a6201e534e901b5f4e66f72c176b534a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a2b6847964d9f1903193cc3e67c196849</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a36bd77afed89f3f5c110a715e69e4c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>afbecc6d0ab1de42be9db79428da48ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a212bc2f69ea4eff830fde70e209e40fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixS</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad24d7bf534afb55adaef00f00846adaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a8dc963d8ea2a17df9d8d718e9e34d06f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a19a116383f11423179b4d8f316da6f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ac6e41c839f8dae31c9a3906ea7540119</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad8fb9235870a8361a2fdd8dcc2e80d01</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a30ae65666b1757e4a2b6a28eaec12226</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RealSchur</name>
    <filename>classEigen_1_1RealSchur.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a8bd4653e2d9569a44ecc95e746422d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a60caf9ffad11d728ea458c4dd36d0a98</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ac4acc917dcaddefae5f35acd2c536d65</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a99453076a9617a6af353b5b1f3220c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a386fd2b1a3a8401eca7183ac074deec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>abb78996b43b8642a5f507415730445cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a85622ccbecff99c8933d21f0a22b22bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>afef4d3dc5a493aca2760c20b34337016</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a826c83e2f1d4c8332606a14ea121ff5f</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ad189e8776ee20a12046694f98b354322</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a5cf45fb60964a3e7ea3a6718a8d7acdf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealSchur&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1RealSchur.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a8bd4653e2d9569a44ecc95e746422d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a60caf9ffad11d728ea458c4dd36d0a98</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ac4acc917dcaddefae5f35acd2c536d65</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a99453076a9617a6af353b5b1f3220c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a386fd2b1a3a8401eca7183ac074deec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>abb78996b43b8642a5f507415730445cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a85622ccbecff99c8933d21f0a22b22bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>afef4d3dc5a493aca2760c20b34337016</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a826c83e2f1d4c8332606a14ea121ff5f</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ad189e8776ee20a12046694f98b354322</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a5cf45fb60964a3e7ea3a6718a8d7acdf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref</name>
    <filename>classEigen_1_1Ref.html</filename>
    <templarg></templarg>
    <templarg>Options</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref.html</anchorfile>
      <anchor>a037addaa81f13e5765e30a92d2c4f2b1</anchor>
      <arglist>(DenseBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ref&lt; const UmfpackMatrixType, StandardCompressedFormat &gt;</name>
    <filename>classEigen_1_1Ref.html</filename>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref.html</anchorfile>
      <anchor>a037addaa81f13e5765e30a92d2c4f2b1</anchor>
      <arglist>(DenseBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref&lt; SparseMatrixType, Options &gt;</name>
    <filename>classEigen_1_1Ref_3_01SparseMatrixType_00_01Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>Options</templarg>
    <base>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref_3_01SparseMatrixType_00_01Options_01_4.html</anchorfile>
      <anchor>a5a27af935f839a42d85421f5cce99a68</anchor>
      <arglist>(SparseCompressedBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref&lt; SparseVectorType &gt;</name>
    <filename>classEigen_1_1Ref_3_01SparseVectorType_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref_3_01SparseVectorType_01_4.html</anchorfile>
      <anchor>a125c83639030247f78157fa606c03f56</anchor>
      <arglist>(SparseCompressedBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Replicate</name>
    <filename>classEigen_1_1Replicate.html</filename>
    <templarg></templarg>
    <templarg>RowFactor</templarg>
    <templarg>ColFactor</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Reverse</name>
    <filename>classEigen_1_1Reverse.html</filename>
    <templarg></templarg>
    <templarg>Direction</templarg>
  </compound>
  <compound kind="class">
    <name>Reverse&lt; const ArrayWrapper&lt; ExpressionType &gt;, BothDirections &gt;</name>
    <filename>classEigen_1_1Reverse.html</filename>
  </compound>
  <compound kind="class">
    <name>Reverse&lt; const Derived, BothDirections &gt;</name>
    <filename>classEigen_1_1Reverse.html</filename>
  </compound>
  <compound kind="class">
    <name>Reverse&lt; const Solve&lt; Decomposition, RhsType &gt;, BothDirections &gt;</name>
    <filename>classEigen_1_1Reverse.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::Rotation2D</name>
    <filename>classEigen_1_1Rotation2D.html</filename>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a6f18e82316c3194f5c4dd320005f24ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a6ce8059b1551e2b2fffafd5f332d9ff6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a52ec73665dcabe64bfc55e794da7decf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Rotation2D, Rotation2D&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a5d7a207869a40c6f8e05b776cb8fcf0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D&lt; Scalar &gt; &amp;</type>
      <name>fromRotationMatrix</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>acffd6e1bce042a2b09424f743e8be468</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a7769229f6b02266de6a216f11b5de58f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>aee2106652602083f97b7d9cb2c76e7b7</anchor>
      <arglist>(const Rotation2D &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ad0e868bd5094a47d60744190e7191a9c</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ad08fed425c440adfff7aef45a474ac4a</anchor>
      <arglist>(const Rotation2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a85a49087023fd971f1eb6839f44a126a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a554ca87ba4262060f8ea8844e624ccf1</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ab75098872cb991957fd1ec484cbae06b</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a6486dcdd971077150578a909e65538c6</anchor>
      <arglist>(const Vector2 &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a8acc3aa9240bd19109c5044419acb913</anchor>
      <arglist>(const Rotation2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>aaab78f22569ed25ad5ba056cd0aebc6c</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a0dbfe608279fccdbc9a1e07ade0e5975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a2c0dba0c5f9dffed2ccc2637553a35fe</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ae6ba393cc76235616a8d940eced9a281</anchor>
      <arglist>(const Rotation2D&lt; OtherScalarType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>adc829d303a59b9a1efe53d29b819d4a3</anchor>
      <arglist>(const Scalar &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>af01d59bb7515d204150f1bcb78c7983e</anchor>
      <arglist>(const Scalar &amp;t, const Rotation2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>smallestAngle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ae90e68e111701cc2ae9c87f09a7a9348</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>smallestPositiveAngle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ac262aae104109725bdd7e6a9c92f5338</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a775fa4530a251d256a3e11b0f22a8ea4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RotationBase</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a98999cd115b5012425fb5d463a5674f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab610d6962186e763b08357bf9b1a5b3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ae9d8405d348dde8ab58be6d1ec137e74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a702ddd439b158e9ea4eb98ca5ba5f178</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ad0e868bd5094a47d60744190e7191a9c</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a85a49087023fd971f1eb6839f44a126a</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a554ca87ba4262060f8ea8844e624ccf1</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab75098872cb991957fd1ec484cbae06b</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a56acf187673460d1d66f81cc27213b8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a615ece720e9826703b399dfaeaba1ae0</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a38f506f2d3617685d1f684cdbc4f8dd4</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ScalarBinaryOpTraits</name>
    <filename>structEigen_1_1ScalarBinaryOpTraits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Scaling</name>
    <filename>classScaling.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::Select</name>
    <filename>classEigen_1_1Select.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SelfAdjointEigenSolver</name>
    <filename>classEigen_1_1SelfAdjointEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a8a59ab7734b6eae2754fd78bc7c3a360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a5dae5f422a3c71060e6bd31332bf64fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::plain_col_type&lt; MatrixType, RealScalar &gt;::type</type>
      <name>RealVectorType</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>acd090d5fdfc3cc017a13b6d8daa92287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a0bfcedf4245b6846007ca4f01e4feb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>adf397f6bce9f93c4b0139a47e261fc24</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>computeDirect</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>afe520161701f5f585bcc4cedb8657bd1</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>computeFromTridiagonal</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a297893df7098c43278d385e4d4e23fe4</anchor>
      <arglist>(const RealVectorType &amp;diag, const SubDiagonalType &amp;subdiag, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a3df8721abcc71132f7f02bf9dfe78e41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EigenvectorsType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a229c4c26d87c5d2663cd3cc8a4c68266</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a31e8a509231e57e684c53799693607ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorInverseSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>ae4b13fe4ce22faf74e50d346fc51a66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>aeeedb2ae618f21a4eb59465746c1cee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a8f3dde67faa971dd97e8141617762326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a7d8cba55cce60cb3931148208cc5bd0e</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a825919ee41153a19910c72d1bff31c8e</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterations</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a9ba10b83f095b18dbea345db7304acfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SelfAdjointView</name>
    <filename>classEigen_1_1SelfAdjointView.html</filename>
    <templarg></templarg>
    <templarg>UpLo</templarg>
    <base>TriangularBase&lt; SelfAdjointView&lt; _MatrixType, UpLo &gt; &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; RealScalar, internal::traits&lt; MatrixType &gt;::ColsAtCompileTime, 1 &gt;</type>
      <name>EigenvaluesReturnType</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a8ae92703d920130b38a383f8b165146c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af9f0234ebeae4c4ca512bcd5fb5e8bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SelfAdjointView &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af52acc0942ece2de9b6db4a99cc6656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1297532e129be85c6a9ff0c8ef735301</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aa4e1f964b34c76697bcdd3b54b84d814</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ab5b030515fcee3d1d4f84c0d9d13bd67</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>const ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a6671a26f31ead5f6e14d1d7d1221d9ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a9fcc7108054ac4a3b0ef758c794c16a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad4f34424b4ea12de9bbc5623cb938b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject, UpLo &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a644155eef17b37c95d85b9f65bb49ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject, UpLo &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a405e810491642a7f7b785f2ad6f93619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SelfAdjointView, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af18c39fdc7783c63766ba22ce0e784c3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a12a7da482e31ec9c517dca92dd7bae61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1b5afab9f9df919cba99d8ed1a260567</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const MatrixBase&lt; DerivedV &gt; &amp;v, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>acc37b0437e0eee05f861bce511df9c77</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad779637ca3e3aeff2d35e1806e59f7d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a33950671584ae306fbdc1c23f010be88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt;(TriMode &amp;(Upper|Lower))==(UpLo &amp;(Upper|Lower)), TriangularView&lt; MatrixType, TriMode &gt;, TriangularView&lt; typename MatrixType::AdjointReturnType, TriMode &gt; &gt;::type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aacba330c3a12d1cac75c2f9df8c0f347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>const friend Product&lt; OtherDerived, SelfAdjointView &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a2fb955589b841c308dc875e3ab3193e8</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SelfAdjointView&lt; const Derived, UpLo &gt;</name>
    <filename>classEigen_1_1SelfAdjointView.html</filename>
    <base>TriangularBase&lt; SelfAdjointView&lt; const Derived, UpLo &gt; &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; RealScalar, internal::traits&lt; MatrixType &gt;::ColsAtCompileTime, 1 &gt;</type>
      <name>EigenvaluesReturnType</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a8ae92703d920130b38a383f8b165146c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af9f0234ebeae4c4ca512bcd5fb5e8bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SelfAdjointView &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af52acc0942ece2de9b6db4a99cc6656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1297532e129be85c6a9ff0c8ef735301</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aa4e1f964b34c76697bcdd3b54b84d814</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ab5b030515fcee3d1d4f84c0d9d13bd67</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>const ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a6671a26f31ead5f6e14d1d7d1221d9ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a9fcc7108054ac4a3b0ef758c794c16a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad4f34424b4ea12de9bbc5623cb938b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject, UpLo &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a644155eef17b37c95d85b9f65bb49ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject, UpLo &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a405e810491642a7f7b785f2ad6f93619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SelfAdjointView, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af18c39fdc7783c63766ba22ce0e784c3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a12a7da482e31ec9c517dca92dd7bae61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1b5afab9f9df919cba99d8ed1a260567</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const MatrixBase&lt; DerivedV &gt; &amp;v, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>acc37b0437e0eee05f861bce511df9c77</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad779637ca3e3aeff2d35e1806e59f7d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a33950671584ae306fbdc1c23f010be88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt;(TriMode &amp;(Upper|Lower))==(UpLo &amp;(Upper|Lower)), TriangularView&lt; MatrixType, TriMode &gt;, TriangularView&lt; typename MatrixType::AdjointReturnType, TriMode &gt; &gt;::type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aacba330c3a12d1cac75c2f9df8c0f347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>const friend Product&lt; OtherDerived, SelfAdjointView &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a2fb955589b841c308dc875e3ab3193e8</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialCholesky</name>
    <filename>classEigen_1_1SimplicialCholesky.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>abd631e700699e3abca942ae4a40b1e88</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialCholesky &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>a2228f0937ba77a513c907ab1c3504d42</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>ab83cd3d6d8ad6144ebc1efdca97f7c0f</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialCholeskyBase</name>
    <filename>classEigen_1_1SimplicialCholeskyBase.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseSolverBase</base>
    <class kind="struct">Eigen::SimplicialCholeskyBase::keep_diag</class>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a3ac877f73aaaff670e6ae7554eb02fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aff1480e595a21726beaec9a586a94d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0e23d1f4a88c211be7098faf1cb41674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a362352f755101faaac59c1ed9d5e3559</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialCholeskyBase</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a098baba1dbe07ca3a775c8df1f8a0e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a9a741744dda2261cae26cddf96a35bf0</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialLDLT</name>
    <filename>classEigen_1_1SimplicialLDLT.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a6becf242cd792d5c8cb095184e31d699</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLDLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a3917387194863ce995478c2dedf60e73</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a29e14dd450da71659b599ce53c6c0bd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>ad2d911f7ae8812e50ed2c425acca1e5b</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a80dfe1f4b4c8991252178de385e310bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>ab486c0cd928c8b0c1c20c314f0963ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLDLT</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a16eb3402b26cc70f9f24da75f0c74426</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLDLT</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a819d581e3768db316bc51f0f50fd0976</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const VectorType</type>
      <name>vectorD</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a5ce93133b485996d477db4eb2b32fb32</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialLLT</name>
    <filename>classEigen_1_1SimplicialLLT.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a0356f4b58924502dd71ce234ec358567</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a329535cf4d5e5370cb8b5cacd8cb6a6a</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a05a34e5f9da53de1205780bd991b310d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>aae5b7771084e24f22f0074f6551db14f</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a232f994f0106fa405c4066f7dbf81c95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a173073880c5fc17661b4505259de4aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLLT</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>abd9294399538d5a62418cb0b62dc0cec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLLT</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a6df9cc66170620b7f53a4d39e2c8b4f1</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Solve</name>
    <filename>classEigen_1_1Solve.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SolverBase</name>
    <filename>classEigen_1_1SolverBase.html</filename>
    <templarg></templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a05a3686a89888681c8e0c2bcab6d1ce5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a7fd647d110487799205df6f99547879d</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolverBase</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a4d5e5baddfba3790ab1a5f247dcc4dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a732e75b5132bb4db3775916927b0e86c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::SolverStorage</name>
    <filename>structEigen_1_1SolverStorage.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::SolveWithGuess</name>
    <filename>classEigen_1_1SolveWithGuess.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::Sparse</name>
    <filename>structEigen_1_1Sparse.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseCompressedBase</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Derived &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, int &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Transpose&lt; MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aff03e28a4bb93cd473d12452906065c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a9cb41e40b43f7dbe6fd8b3e9e3755172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d3fd9bf7f186dbfd4297d0dd003cabf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac0c50033e593cfe2729012fa4f8cb79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ac8dad03980598adb585dbc1cee32d977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7780293a4b936231f7d0b687bc50347c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1d2602a8c30f924857be54ff6de5f47e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a1f41e3360fd9f0c749686c6ffb829a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a3990734332d9ef15b09efaa552a2fb19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a891c75ed270dde48054db2603a774b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a4d6bf2cb53121f653f4212e45922a830</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseLU</name>
    <filename>classEigen_1_1SparseLU.html</filename>
    <member kind="function">
      <type>Scalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a3833903fc2bd7252803c969cdbdf45eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a9cb0e2b4ad31ec465884b2b2462db6ab</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a4b9e6a3c7ee9326e3ae1672a109462f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>ad2f4e92cebb96ca75fede58f13178c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a9648e81c2d0264abb5996f75b7e0b569</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a9e5dfcab5a0b75771afb5c49f9294ffc</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a5fad91f861a11cc3c6eae2642eb0d42a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>isSymmetric</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a271b0287c4b2ec235504216f80ab0019</anchor>
      <arglist>(bool sym)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastErrorMessage</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a752e8d4dae2d15a0ad668eb90f2673f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a7548f80c5cdce49ddc6f994567a26eac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseLUMatrixLReturnType&lt; SCMatrix &gt;</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a35df62f4c1f7ed32f6ac39d94701b9a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseLUMatrixUReturnType&lt; SCMatrix, MappedSparseMatrix&lt; Scalar, ColMajor, StorageIndex &gt; &gt;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a5aa9a62f8d2c593a5817f4bc77c3e276</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>rowsPermutation</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a1833ed31ad8b60b4ac3dd8dfd435f458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>ac5aea9a81a8a567d32546b9d73af7fd4</anchor>
      <arglist>(const RealScalar &amp;thresh)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>signDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a6a8117bd54d5bb0d0d8358c2a00e095e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SparseLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a1a0c8d5e08202f159553ceb01afb07d6</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>SparseCompressedBase&lt; Derived &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a195e66f79171f78cc22d91fff37e36e3</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a0fc44f3781a869a3a410edd6691fd899</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab044564756f472877b2c1a5706e540e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a2b35a1d701d6c6ea36b2d9f19660a68c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a0df6dba8d71e0fb15b2995510853f83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>aafab4afa7ab2ff89eff049d4c71e2ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a753e975b7b3643d821dc061141786870</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a24c55dd8de4aca30e7c90b69aa5dca6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3d6ede19db6d42074ae063bc876231b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3cdd6cab0abd7ac01925a695fc315d34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a574ea9371c22eabebdda21c0787312dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMapBase</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab375aedf824909a7f1a6af24ee60d70f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>aa9c42d48b9dd6f947ce3c257fe4bf2ca</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af5cd1f13dde8578eb9891a4ac4a11977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af877ea4e285a4497f80987fea66f7459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a3b74af754254837fc591cd9936688b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af91648a18729ae8ff29cb1d8751c5655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMapBase</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a4dfbcf3ac411885b1710ad04892c984d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMatrix</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <templarg></templarg>
    <base>SparseCompressedBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar, ColMajor, int &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, int &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar, ColMajor, StorageIndex &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar, RowMajor, StorageIndex &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>SparseCompressedBase&lt; SparseMatrix&lt; Scalar, _Options, StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae257333ca0e0b16cf5d3080bbefeaf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae53743108cd668b8da927ff149631fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMatrixBase</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0fcbfc42cf85a978c92dfd4a0d0547d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abf59e847d1277c2f5c04dabaeac299d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>add4b0e8126a2705ba55fa5718d7cf9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad64903381b0536a81f88e8ca96999c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae194084a73058aeeb400d287ee69aa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a39610093c39554f566f31336225d8f6a</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad3ca4e1ded557f6e0fe2c8885514c6bb</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acf9260baa71466c08657d86e017850aa</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac34daa88b4b8ee8569b38eac5d7bf2</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac5284446fb5e4c873f4b93b325fd20b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a85d94dc3f045465a18e02cc1e3286f66</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a38fe4f8e107c8a368e7ff6f7f1713abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6e46074733ebb685aacd0437d247ff7c</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa03eb464159adaae99b379809a6f159e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a37eaebb941ba412be98924d53bba2067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a366885f979063ef6feb195a65ebc3b49</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0fcbfc42cf85a978c92dfd4a0d0547d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abf59e847d1277c2f5c04dabaeac299d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>add4b0e8126a2705ba55fa5718d7cf9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad64903381b0536a81f88e8ca96999c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae194084a73058aeeb400d287ee69aa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a39610093c39554f566f31336225d8f6a</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad3ca4e1ded557f6e0fe2c8885514c6bb</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acf9260baa71466c08657d86e017850aa</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac34daa88b4b8ee8569b38eac5d7bf2</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac5284446fb5e4c873f4b93b325fd20b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a85d94dc3f045465a18e02cc1e3286f66</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a38fe4f8e107c8a368e7ff6f7f1713abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6e46074733ebb685aacd0437d247ff7c</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa03eb464159adaae99b379809a6f159e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a37eaebb941ba412be98924d53bba2067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a366885f979063ef6feb195a65ebc3b49</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0fcbfc42cf85a978c92dfd4a0d0547d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abf59e847d1277c2f5c04dabaeac299d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>add4b0e8126a2705ba55fa5718d7cf9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad64903381b0536a81f88e8ca96999c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae194084a73058aeeb400d287ee69aa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a39610093c39554f566f31336225d8f6a</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad3ca4e1ded557f6e0fe2c8885514c6bb</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acf9260baa71466c08657d86e017850aa</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac34daa88b4b8ee8569b38eac5d7bf2</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac5284446fb5e4c873f4b93b325fd20b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a85d94dc3f045465a18e02cc1e3286f66</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a38fe4f8e107c8a368e7ff6f7f1713abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6e46074733ebb685aacd0437d247ff7c</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa03eb464159adaae99b379809a6f159e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a37eaebb941ba412be98924d53bba2067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a366885f979063ef6feb195a65ebc3b49</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0fcbfc42cf85a978c92dfd4a0d0547d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abf59e847d1277c2f5c04dabaeac299d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>add4b0e8126a2705ba55fa5718d7cf9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad64903381b0536a81f88e8ca96999c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae194084a73058aeeb400d287ee69aa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a39610093c39554f566f31336225d8f6a</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad3ca4e1ded557f6e0fe2c8885514c6bb</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acf9260baa71466c08657d86e017850aa</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac34daa88b4b8ee8569b38eac5d7bf2</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac5284446fb5e4c873f4b93b325fd20b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a85d94dc3f045465a18e02cc1e3286f66</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a38fe4f8e107c8a368e7ff6f7f1713abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6e46074733ebb685aacd0437d247ff7c</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa03eb464159adaae99b379809a6f159e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a37eaebb941ba412be98924d53bba2067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a366885f979063ef6feb195a65ebc3b49</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Transpose&lt; MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0fcbfc42cf85a978c92dfd4a0d0547d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abf59e847d1277c2f5c04dabaeac299d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>add4b0e8126a2705ba55fa5718d7cf9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad64903381b0536a81f88e8ca96999c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae194084a73058aeeb400d287ee69aa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a39610093c39554f566f31336225d8f6a</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad3ca4e1ded557f6e0fe2c8885514c6bb</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acf9260baa71466c08657d86e017850aa</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac34daa88b4b8ee8569b38eac5d7bf2</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac5284446fb5e4c873f4b93b325fd20b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a85d94dc3f045465a18e02cc1e3286f66</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a38fe4f8e107c8a368e7ff6f7f1713abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6e46074733ebb685aacd0437d247ff7c</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa03eb464159adaae99b379809a6f159e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a37eaebb941ba412be98924d53bba2067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a366885f979063ef6feb195a65ebc3b49</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726af609dda5d4abc02a20e4eab811482ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a16d040e0a5f5124f8604fbaf9716453a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a6088cc45a7bc146bec538f33b106f219</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a2351fc1d1a86ff3479eaa07d3065baec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6f2eddbab215bae9f93f7b1c85688726a0faee1e1352da0ff591ab96447fea48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0fcbfc42cf85a978c92dfd4a0d0547d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abf59e847d1277c2f5c04dabaeac299d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>add4b0e8126a2705ba55fa5718d7cf9cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad64903381b0536a81f88e8ca96999c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae194084a73058aeeb400d287ee69aa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a39610093c39554f566f31336225d8f6a</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad3ca4e1ded557f6e0fe2c8885514c6bb</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>acf9260baa71466c08657d86e017850aa</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac34daa88b4b8ee8569b38eac5d7bf2</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac5284446fb5e4c873f4b93b325fd20b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a85d94dc3f045465a18e02cc1e3286f66</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a38fe4f8e107c8a368e7ff6f7f1713abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6e46074733ebb685aacd0437d247ff7c</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa03eb464159adaae99b379809a6f159e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a37eaebb941ba412be98924d53bba2067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a366885f979063ef6feb195a65ebc3b49</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseQR</name>
    <filename>classEigen_1_1SparseQR.html</filename>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>aa4f0d64bb0ee07ad15ee77c535efb8c4</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a87730dd85f0d77de74bca724d0b21624</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a22f63d6baabc4dff27320776d9a1a3a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a08587fcc35e496692787f09617a9d97f</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ae9a8e244a6637d8c434d0a691b158493</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>aa04cc22061d0771f988509c54be3a740</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastErrorMessage</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a6482832ec30ef30db571f922e63e5092</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseQRMatrixQReturnType&lt; SparseQR &gt;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a348c5c00788b912c2bcb3e80be467877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const QRMatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>abe62644e0879b3e75836d63edf623899</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a4ae2c5bdaa3c18ae5a364f65030722c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a02e8ec566854085df2b5c6649f43fc88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a51206691317b0111955a71de3e76b814</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SparseQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a2892802e7cc880357af770ee02515859</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseQR</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a33f76a247183dc50c9c1cbf151288839</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseSelfAdjointView</name>
    <filename>classEigen_1_1SparseSelfAdjointView.html</filename>
    <templarg></templarg>
    <templarg>_Mode</templarg>
    <base>EigenBase&lt; SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &gt;</base>
    <member kind="function">
      <type>Product&lt; SparseSelfAdjointView, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a887e3b5fa468af8413276141ddc8bb93</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Product&lt; SparseSelfAdjointView, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a9d1e5ef26775e3b43be08fd4ae191aa8</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>abe66734215f8d8220be0985d67901021</anchor>
      <arglist>(const SparseMatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; _MatrixTypeNested, Mode &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>acde15b45cf7b43520e1005ec65d55f3c</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="friend">
      <type>friend Product&lt; OtherDerived, SparseSelfAdjointView &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a346ad7b3c5c8769c0fe29ae9e921b429</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Product&lt; OtherDerived, SparseSelfAdjointView &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a9bbe41a5c050f8067d4fe77372eb0b7a</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSelfAdjointView&lt; const Derived, UpLo &gt;</name>
    <filename>classEigen_1_1SparseSelfAdjointView.html</filename>
    <base>EigenBase&lt; SparseSelfAdjointView&lt; const Derived, _Mode &gt; &gt;</base>
    <member kind="function">
      <type>Product&lt; SparseSelfAdjointView, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a887e3b5fa468af8413276141ddc8bb93</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Product&lt; SparseSelfAdjointView, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a9d1e5ef26775e3b43be08fd4ae191aa8</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>abe66734215f8d8220be0985d67901021</anchor>
      <arglist>(const SparseMatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; _MatrixTypeNested, Mode &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>acde15b45cf7b43520e1005ec65d55f3c</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="friend">
      <type>friend Product&lt; OtherDerived, SparseSelfAdjointView &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a346ad7b3c5c8769c0fe29ae9e921b429</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Product&lt; OtherDerived, SparseSelfAdjointView &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a9bbe41a5c050f8067d4fe77372eb0b7a</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseSolverBase</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodDecomposition&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodDecomposition&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodDecomposition&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLDLT&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodSimplicialLLT&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLLT&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLLT&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodSupernodalLLT&lt; _MatrixType, Lower &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodSupernodalLLT&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodSupernodalLLT&lt; _MatrixType, Lower &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; IncompleteCholesky&lt; Scalar, Lower, AMDOrdering&lt; int &gt; &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; IncompleteCholesky&lt; Scalar, Lower, AMDOrdering&lt; int &gt; &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; IncompleteCholesky&lt; Scalar, Lower, AMDOrdering&lt; int &gt; &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; IncompleteLUT&lt; _Scalar, int &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; IncompleteLUT&lt; _Scalar, int &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; IncompleteLUT&lt; _Scalar, int &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SuperILU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SuperILU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SuperILU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SuperLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SuperLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SuperLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; UmfPackLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; UmfPackLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; UmfPackLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseVector</name>
    <filename>classEigen_1_1SparseVector.html</filename>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>ad512e8e607f3c537b5e1836eea3502f9</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>abc6d75178a429bfddd4ca4a36261f213</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a6c211a24bcd0af8a4e241c4704abffe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a2304bf75c891bcf5545783d5eb3284ed</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a9b42c595fd4df10700260dc71887ecd2</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a2ea1091874a71c8511be8a21bf238f5a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>af48da9cac4c4d8d06d712f7ca4c81ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>af0902c911efcf6f162022175b3efd12b</anchor>
      <arglist>(SparseVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseVector</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a60f8fe4b5aaa647d734201d82a7f4354</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseView</name>
    <filename>classEigen_1_1SparseView.html</filename>
    <member kind="function">
      <type>const internal::remove_all&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1SparseView.html</anchorfile>
      <anchor>a847e35904787cd7753655620ed68a477</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SPQR</name>
    <filename>classEigen_1_1SPQR.html</filename>
    <member kind="function">
      <type>cholmod_common *</type>
      <name>cholmodCommon</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a64761b06dec908b81506c0c2619cd290</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>acf75fdb279f16d7c4907118ca3eb69ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationType</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a6c4ad8d482dd7f23029c428dbd8e13e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>afbbebf50229522d4487befff158e0d19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SPQRMatrixQReturnType&lt; SPQR &gt;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a4179a9d595d9bd58a649ef695b3db3c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a99389f43e9eebe0b222e3b75318046e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a66382a71d51b09a8526268467156fbc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>aed6e79a5a027d906f3cbf241e533b972</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>afd88c7631cf384fd5703bae4efacce3a</anchor>
      <arglist>(const RealScalar &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSPQROrdering</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a7f0fa283af9cb2114f55a84a134cd603</anchor>
      <arglist>(int ord)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Stride</name>
    <filename>classEigen_1_1Stride.html</filename>
    <templarg>_OuterStrideAtCompileTime</templarg>
    <templarg>_InnerStrideAtCompileTime</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Stride&lt; 0, Value &gt;</name>
    <filename>classEigen_1_1Stride.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Stride&lt; StrideType::OuterStrideAtCompileTime, StrideType::InnerStrideAtCompileTime &gt;</name>
    <filename>classEigen_1_1Stride.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Stride&lt; Value, 0 &gt;</name>
    <filename>classEigen_1_1Stride.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperILU</name>
    <filename>classEigen_1_1SuperILU.html</filename>
    <templarg></templarg>
    <base>SuperLUBase&lt; _MatrixType, SuperILU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperILU.html</anchorfile>
      <anchor>a52aa43effc247084c91a5e73720a50f6</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SuperILU.html</anchorfile>
      <anchor>a5669976899907fbe6bf1be620707e5f3</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperLU</name>
    <filename>classEigen_1_1SuperLU.html</filename>
    <templarg></templarg>
    <base>SuperLUBase&lt; _MatrixType, SuperLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLU.html</anchorfile>
      <anchor>a493cdfada27415a6037b004ff974eace</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SuperLU.html</anchorfile>
      <anchor>a0b5a5fbda1a1f368003c7c01021a4636</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperLUBase</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Eigen::SparseSolverBase</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a2d3f48425328d9b3cbdca369889007f3</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a28cb3ef7914ecb6fdae1935b53f6be40</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>aa67da5c8c24110931c949c5896c5ec03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a42d9d79073379f1e75b0f2c49879ed5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SuperLUBase&lt; _MatrixType, SuperILU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <base>SparseSolverBase&lt; SuperILU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a2d3f48425328d9b3cbdca369889007f3</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a28cb3ef7914ecb6fdae1935b53f6be40</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>aa67da5c8c24110931c949c5896c5ec03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a42d9d79073379f1e75b0f2c49879ed5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SuperLUBase&lt; _MatrixType, SuperLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <base>SparseSolverBase&lt; SuperLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a2d3f48425328d9b3cbdca369889007f3</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a28cb3ef7914ecb6fdae1935b53f6be40</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>aa67da5c8c24110931c949c5896c5ec03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a42d9d79073379f1e75b0f2c49879ed5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SVDBase</name>
    <filename>classEigen_1_1SVDBase.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a6229a37997eca1072b52cca5ee7a2bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixUType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afc7fe1546b0f6e1801b86f22f5664cb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixVType &amp;</type>
      <name>matrixV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a245a453b5e7347f737295c23133238c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroSingularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afe8a555f38393a319a71ec0f0331c9ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a30b89e24f42f1692079eea31b361d26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a1c95d05398fc15e410a28560ef70a5a6</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a27586b69dbfb63f714d1d45fd6304f97</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const SingularValuesType &amp;</type>
      <name>singularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a4e7bac123570c348f7ed6be909e1e474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>ab28499936c0764fe5b56b9f4de701e26</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a98b2ee98690358951807353812a05c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SVDBase</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>abed06fc6f4b743e1f76a7b317539da87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transform</name>
    <filename>classEigen_1_1Transform.html</filename>
    <member kind="typedef">
      <type>internal::conditional&lt; int(Mode)==int(AffineCompact), MatrixType &amp;, Block&lt; MatrixType, Dim, HDim &gt; &gt;::type</type>
      <name>AffinePart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae7d9f424ba9b30a5a44ddbaa79c8917e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; int(Mode)==int(AffineCompact), const MatrixType &amp;, const Block&lt; const MatrixType, Dim, HDim &gt; &gt;::type</type>
      <name>ConstAffinePart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac909bfb8aa6ad7651acfd7e3b3333999</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>af586d6317531d250d23ebe1f41502595</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim, Options &gt;</type>
      <name>LinearMatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a607434a96cb732a951af896fa5c27634</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Block&lt; MatrixType, Dim, Dim, int(Mode)==(AffineCompact) &amp;&amp;(Options &amp;RowMajor)==0 &gt;</type>
      <name>LinearPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a58fadcc854f6150e3e38d088c4dcc265</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::make_proper_matrix_type&lt; Scalar, Rows, HDim, Options &gt;::type</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ade0fbd1fcacd613083e63671bc7ea1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa068ea7b07c68c8ae5efb540416ffbbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, TransformTimeDiagonalMode &gt;</type>
      <name>TransformTimeDiagonalReturnType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a95931b09214436fbaa3630d5ef3b1bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Block&lt; MatrixType, Dim, 1,!(internal::traits&lt; MatrixType &gt;::Flags &amp;RowMajorBit)&gt;</type>
      <name>TranslationPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac666bc39a7db53d1f3537b44a67ada4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Translation&lt; Scalar, Dim &gt;</type>
      <name>TranslationType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9cfef2ae86496b3d5b8a96921587b6ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a5e247ecac67af07898d17c205907f090</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AffinePart</type>
      <name>affine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac80f7f750018b419ebaa0af8c2be949e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstAffinePart</type>
      <name>affine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a853fea04fc13ae0fec5f420b91a8a3af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Transform, Transform&lt; NewScalarType, Dim, Mode, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8219db151425d3c7c98174f38815505a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRotationScaling</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4c34d279f8fb7a5614e118841cd9ddf8</anchor>
      <arglist>(RotationMatrixType *rotation, ScalingMatrixType *scaling) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeScalingRotation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a48d43dcf11a7deefb95934498478026d</anchor>
      <arglist>(ScalingMatrixType *scaling, RotationMatrixType *rotation) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a7fbbbfd8dfb81c0a67db28420c580670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ada9c7138626fa366ba7b98dc4e6d52ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a6b2bd9a93737948a9725c9bf31330b89</anchor>
      <arglist>(_Scalar, _Dim==Dynamic ? Dynamic :(_Dim+1) *(_Dim+1)) enum</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>fromPositionOrientationScale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a53c857c01aa92e6817d00bd12bff325d</anchor>
      <arglist>(const MatrixBase&lt; PositionDerived &gt; &amp;position, const OrientationType &amp;orientation, const MatrixBase&lt; ScaleDerived &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa3f9f5768bfb47b3b98a7d9a320e60cb</anchor>
      <arglist>(TransformTraits traits=(TransformTraits) Mode) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad745a8963993b3832daed06e38fa2775</anchor>
      <arglist>(const Transform &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>LinearPart</type>
      <name>linear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>abc49b560206a6cbf31b1068241ab4aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstLinearPart</type>
      <name>linear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ab987cff97348bf8f09438a357480e4f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAffine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac009d90f26671b182b35588a46937447</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad46a7d18e8e6f067b6ab304ca34edc46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad8607bef381c91ca012cd434d0305f47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad353e235b541b32c24b0431951afe238</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a850e4e9675c807ac22076473bdbb4ed9</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>const TransformTimeDiagonalReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8c6dee0c4c54a0b4dc548005d7ab072c</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const internal::transform_right_product_impl&lt; Transform, OtherDerived &gt;::ResultType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a1f60c6d272924bfba885b69f846deb36</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Transform</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae8bacaf6f011fc0a8b987b3c62c83b6f</anchor>
      <arglist>(const Transform &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::transform_transform_product_impl&lt; Transform, Transform&lt; Scalar, Dim, OtherMode, OtherOptions &gt; &gt;::ResultType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a80ff24b674dfaa808a7b3c0497106f58</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, OtherMode, OtherOptions &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac3e4a4f1f6032a121003e8fcb36ef875</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>acf38fbe6650e98746be4a927fe154c96</anchor>
      <arglist>(const QMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ab5379e83b9a8a080af2b9e66172985d0</anchor>
      <arglist>(const QTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>prerotate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>af4b33f694dd8ce600e3f7763659a2781</anchor>
      <arglist>(const RotationType &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>prescale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae6930d0354fe3e61d57ad15a62888f29</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>prescale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad74f2828e57ae6a073498f9c3ea10304</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>preshear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad468cab11f326a0e2b0a8571f7f4fd2a</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>pretranslate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>acc8a5d4bdbb7f0b5918c112410cf34b3</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>rotate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ab53316c7cf02d69f83c885ca2a3b7054</anchor>
      <arglist>(const RotationType &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>const LinearMatrixType</type>
      <name>rotation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a1298a684fc3d4035fbe20f66310d1f3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>scale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a108c01d1e24c7c6046add8e3957a99ac</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>scale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a930cde44a866d5db2bd2bdf807db1c18</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8ca8c5a7ae358f9ec545e8c5419fe8d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>shear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a30bb43c58626b650a78c8dae89292169</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>QMatrix</type>
      <name>toQMatrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a1953d0847b7be05688caee6f6c18920e</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>QTransform</type>
      <name>toQTransform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a7b4368b5962d88f5e1234819cbee4685</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4b132c61de1f20731374ad8d31d7e33d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a214ee6fbd1da90bae79464e0c9e11985</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a028c669ef1bd9aba99c75269ad8557df</anchor>
      <arglist>(const QMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9ffdc65e8b7ad2bdff3c8537c416fc7f</anchor>
      <arglist>(const QTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa74e87bc651994cea513267c296f5b4c</anchor>
      <arglist>(const Transform&lt; OtherScalarType, Dim, Mode, Options &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>translate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae7c6050dac09e3014e806c44e49628ef</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TranslationPart</type>
      <name>translation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aedaf8cc508362e49c384e08c7e4a8c90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTranslationPart</type>
      <name>translation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0b6306cd35f185349c155ebe31fe4483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Transform</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae751c6a2def326c4b775495cdd0c1fca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const typedef Block&lt; ConstMatrixType, Dim, Dim, int(Mode)==(AffineCompact) &amp;&amp;(Options &amp;RowMajor)==0 &gt;</type>
      <name>ConstLinearPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a18e0244314705da1942ed6784b1b93d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const typedef MatrixType</type>
      <name>ConstMatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>af0ec1d676ce6f36161a3eb1490c056af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const typedef Block&lt; ConstMatrixType, Dim, 1,!(internal::traits&lt; MatrixType &gt;::Flags &amp;RowMajorBit)&gt;</type>
      <name>ConstTranslationPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a620e6387a3ce1dea8f37c3d7abb230b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend TransformTimeDiagonalReturnType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8941cc25b120ff7ee7b435150ba699b3</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;a, const Transform &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>const friend internal::transform_left_product_impl&lt; OtherDerived, Mode, Options, _Dim, _Dim+1 &gt;::ResultType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a090b3d825f52110533fbea6d0d127ea0</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;a, const Transform &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Translation</name>
    <filename>classEigen_1_1Translation.html</filename>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>AffineTransformType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ac3f1273f4d4b5416b6a6bb4773dec949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>IsometryTransformType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a034144029a2274fe80eb03dfc6a63420</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>LinearMatrixType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a6f7d418a237b381a23909f653c6b40ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a6afc4748e5c46c602552cc704304422a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a23c44d58bf2177a10327ff6d38c7588a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Translation, Translation&lt; NewScalarType, Dim &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a4641fdaf1371847d20d876ed17ac33e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Translation</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>af27663fb0983d8337caa6b11d5fafd38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a0229049ad120930a7eda5c2eadd24c1e</anchor>
      <arglist>(const Translation &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aadee0b297a46758f68a5651ac8ef6909</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;linear) const</arglist>
    </member>
    <member kind="function">
      <type>internal::enable_if&lt; Derived::IsVectorAtCompileTime, VectorType &gt;::type</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a1acf81e4068e9550c0e87e9e3bc2b14b</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>IsometryTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a05c0a9213f19bf144ec3ec6e7c7c2ee4</anchor>
      <arglist>(const RotationBase&lt; Derived, Dim &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ae8d6aaba19b6ed31a8084fe4cc687928</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>Translation</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a9aa29e15351db443074e3b105505d22e</anchor>
      <arglist>(const Translation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ad1443cca49cc022b64e74c41c13eb2bd</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a5050800c39d054cf3c8a336e5ba06cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ad09fd2630340987ca40e0c2630f69944</anchor>
      <arglist>(const Translation&lt; OtherScalarType, Dim &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a287069b1638bd368cfc80132527b685a</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a5358ebb2b267bc63f660759cb09f7a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a9c0fdbeb2659c9605a335bbe158601fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>acf5913d64e8fe8a856be1e173df3904d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aa4e9de288390745bb8e7f485e3a89d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aa2ac5d7d12678a5e43b0a627a9679d4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a9fc8a907913e6439998cb78c4227d1f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend AffineTransformType</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a918cdd281bce3363e0e242b22bccbbec</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;linear, const Translation &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transpose</name>
    <filename>classEigen_1_1Transpose.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>internal::remove_reference&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1Transpose.html</anchorfile>
      <anchor>abf80ae3ec4c4fdee79ba5ef8fd0298d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1Transpose.html</anchorfile>
      <anchor>a2c3b67044dd52dc3233494234899189f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transpositions</name>
    <filename>classEigen_1_1Transpositions.html</filename>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a678dfbd513871473bcd36bbc453eed8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a786fd676c156124025aaf446d811d14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transpositions &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a991cbd0dcd647b414bbfdbacb642dbbd</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a415e07d885093f3f256394f59d4986f4</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>aae3eb58072f5b26f3851925eec5a006f</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a6a02dae883f9bc072de3268e1696d0ba</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Transpositions&lt; RowsAtCompileTime, MaxRowsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Transpositions.html</filename>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a678dfbd513871473bcd36bbc453eed8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a786fd676c156124025aaf446d811d14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transpositions &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a991cbd0dcd647b414bbfdbacb642dbbd</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a415e07d885093f3f256394f59d4986f4</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>aae3eb58072f5b26f3851925eec5a006f</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a6a02dae883f9bc072de3268e1696d0ba</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::TranspositionsStorage</name>
    <filename>structEigen_1_1TranspositionsStorage.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularBase</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <templarg></templarg>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a1ea7b9cf2bd27048299e39d7f884beb5a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a1ea7b9cf2bd27048299e39d7f884beb5a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriangularBase&lt; SelfAdjointView&lt; _MatrixType, UpLo &gt; &gt;</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <base>EigenBase&lt; SelfAdjointView&lt; _MatrixType, UpLo &gt; &gt;</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a1ea7b9cf2bd27048299e39d7f884beb5a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriangularBase&lt; SelfAdjointView&lt; const Derived, UpLo &gt; &gt;</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <base>EigenBase&lt; SelfAdjointView&lt; const Derived, UpLo &gt; &gt;</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a1ea7b9cf2bd27048299e39d7f884beb5a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriangularBase&lt; TriangularView&lt; _MatrixType, _Mode &gt; &gt;</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <base>EigenBase&lt; TriangularView&lt; _MatrixType, _Mode &gt; &gt;</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a1ea7b9cf2bd27048299e39d7f884beb5a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularView</name>
    <filename>classEigen_1_1TriangularView.html</filename>
    <templarg></templarg>
    <templarg>_Mode</templarg>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aaa336e1b759eea3050139bcdd55f8349</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>afe460d4d788a96183e738db66740fb31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a53c6a7764a6610f4955788f6134a8d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ab8cd6bfc705c0c05a6755ae7437376f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NestedExpression &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a5877fec0b1cd3727d08218f9938abf96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NestedExpression &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a02fdc4b367a9c83f7e2e706037558dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a297c1437532f044e04c59db7ee3890f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView&lt; MatrixTypeNestedNonRef, Mode &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a408d1e6601f83ae8b7cd5edc8ad313a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SelfAdjointView&lt; MatrixTypeNestedNonRef, Mode &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a669d39567c1a2f805582c7538f2752b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ac9efe6f446781eb1eb6e62d4a7707fd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aa45efa0f1d6f8c009b75a4f6fc00e063</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriangularView&lt; const Derived, Mode &gt;</name>
    <filename>classEigen_1_1TriangularView.html</filename>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aaa336e1b759eea3050139bcdd55f8349</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>afe460d4d788a96183e738db66740fb31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a53c6a7764a6610f4955788f6134a8d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ab8cd6bfc705c0c05a6755ae7437376f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NestedExpression &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a5877fec0b1cd3727d08218f9938abf96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const NestedExpression &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a02fdc4b367a9c83f7e2e706037558dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a297c1437532f044e04c59db7ee3890f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView&lt; MatrixTypeNestedNonRef, Mode &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a408d1e6601f83ae8b7cd5edc8ad313a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SelfAdjointView&lt; MatrixTypeNestedNonRef, Mode &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a669d39567c1a2f805582c7538f2752b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ac9efe6f446781eb1eb6e62d4a7707fd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aa45efa0f1d6f8c009b75a4f6fc00e063</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularViewImpl&lt; _MatrixType, _Mode, Dense &gt;</name>
    <filename>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Mode</templarg>
    <base>TriangularBase&lt; TriangularView&lt; _MatrixType, _Mode &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a51093bbf9d6c6bad6a8afee9c93d4b3f</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>afb8cc8b16f27fa263757506e818f3e7f</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ab1086025ddef904f5fae0282de474d24</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ad3252106d7e004d3410238cab92e3258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; TriangularViewType, OtherDerived &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ad21c964c4d5dff8aa496558ef74731f1</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>adb13b29d664962dc3f62551644f11e87</anchor>
      <arglist>(const typename internal::traits&lt; MatrixType &gt;::Scalar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a1d2edf8ab80733b8b2620d8c2a3100d3</anchor>
      <arglist>(const DenseBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a79ff0326cd78da5bb2bdc4a88f5428c9</anchor>
      <arglist>(const DenseBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>af1b9165f5ab6b57a8305c0dc359adf7c</anchor>
      <arglist>(const typename internal::traits&lt; MatrixType &gt;::Scalar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a09db8ccbd4b2da7c7e8d520458166cc1</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a556c7e90c64e86a3a8e722989dda1bc6</anchor>
      <arglist>(const TriangularBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>afe47788156e483b9025ab320cc7f925e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a02574e5085e789ff9840d2b708e0126f</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a4e6b3b2af8d0d6d06d14ec3c7092cffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a7530e86074859407aaec5132549b40ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::triangular_solve_retval&lt; Side, TriangularViewType, Other &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a911664ccf5522c778ffc5405247e8a59</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a43bae99c287250d6092c8f8d1ba90e91</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a92162527b80522093c0dd182bc7d9a6b</anchor>
      <arglist>(MatrixBase&lt; OtherDerived &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a4e16e0824796bfa218cc91da98fe05b1</anchor>
      <arglist>(TriangularBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>const friend Product&lt; OtherDerived, TriangularViewType &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>aea3c3ed2813ff9e48adc14fa7bbd9360</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const TriangularViewImpl &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularViewImpl&lt; MatrixType, Mode, Sparse &gt;</name>
    <filename>classEigen_1_1TriangularViewImpl_3_01MatrixType_00_01Mode_00_01Sparse_01_4.html</filename>
    <templarg></templarg>
    <templarg>Mode</templarg>
    <base>SparseMatrixBase&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01MatrixType_00_01Mode_00_01Sparse_01_4.html</anchorfile>
      <anchor>a3f3385e827fcc0bf27d1ec21c80740bc</anchor>
      <arglist>(MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01MatrixType_00_01Mode_00_01Sparse_01_4.html</anchorfile>
      <anchor>a70190d4105e1fd4f27abbf73365dfa0c</anchor>
      <arglist>(SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Tridiagonalization</name>
    <filename>classEigen_1_1Tridiagonalization.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>af322315c8bea9990152c9d09bfa2a69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a7bd1f9fccec1e93b77a2214b2d30aae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>add0f4b2216d0ea8ee0f7d8525deaf0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tridiagonalization &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>acd288abb081d3b40b87e4b98cd8f6ee9</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a0b7ff4860aa6f7c0761b1059c012fd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffVectorType</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>ac95b4e43dcf6c3c5074b8bea4fc67887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a000f7392eda930576ffd2af1fae54af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixTReturnType</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a6eb5ef94b8b9bb013c0e69b6df56d0df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a47858b3895e64acafb1bb2e97f98a154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SubDiagonalReturnType</type>
      <name>subDiagonal</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>ac423dbb91157c159bdcb4b5a8371232e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tridiagonalization</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a05406b7df9a92fdcba72d31443f67a98</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tridiagonalization</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a9ea2e6154bf35494ee68e037f0867cbd</anchor>
      <arglist>(Index size=Size==Dynamic ? 2 :Size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Triplet</name>
    <filename>classEigen_1_1Triplet.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const StorageIndex &amp;</type>
      <name>col</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>a3531e3e2098507a069a368d72d46471e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex &amp;</type>
      <name>row</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>ae88b0ad6d31daa53e298b9cc4201fdee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>value</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>a003ea53c6559b106406f7916d6610547</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::UmfPackLU</name>
    <filename>classEigen_1_1UmfPackLU.html</filename>
    <templarg></templarg>
    <base>SparseSolverBase&lt; UmfPackLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>ac7ea28b2017d6b26b7b08497f294e5e6</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a05fb2b5717ebd67e46b83439721ceee7</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a1471bf890503e743c45d75cc02a5345d</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a68738a0d99c67316877706f98b033402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UmfpackControl &amp;</type>
      <name>umfpackControl</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a679bd267a0407d4ca985d97f0b864101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const UmfpackControl &amp;</type>
      <name>umfpackControl</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>ae83d178202f3d44c1789c1c93842bf2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpackFactorizeReturncode</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a822fa9d82754269c379dc4ce17920b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umfpackReportControl</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>ac6ff58ef8eb8221e6af87de750d6619b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umfpackReportInfo</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>afad062dfc49ca6d2d19d534b3f8f8d28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umfpackReportStatus</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a82497bbf75d995a6d4ae7e9191f79525</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::VectorBlock</name>
    <filename>classEigen_1_1VectorBlock.html</filename>
    <member kind="function">
      <type></type>
      <name>VectorBlock</name>
      <anchorfile>classEigen_1_1VectorBlock.html</anchorfile>
      <anchor>a541567804a1a738b1207fa3a893ce39b</anchor>
      <arglist>(VectorType &amp;vector, Index start)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBlock</name>
      <anchorfile>classEigen_1_1VectorBlock.html</anchorfile>
      <anchor>a604eb96dc574d633cbe945523239d8f8</anchor>
      <arglist>(VectorType &amp;vector, Index start, Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::VectorwiseOp</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorwiseOp&lt; const ArrayWrapper&lt; ExpressionType &gt;, Horizontal &gt;</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorwiseOp&lt; const ArrayWrapper&lt; ExpressionType &gt;, Vertical &gt;</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorwiseOp&lt; const Derived, Horizontal &gt;</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorwiseOp&lt; const Derived, Vertical &gt;</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorwiseOp&lt; const Solve&lt; Decomposition, RhsType &gt;, Horizontal &gt;</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VectorwiseOp&lt; const Solve&lt; Decomposition, RhsType &gt;, Vertical &gt;</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a018a40a3db90aaf640d4789fe5a459f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cda87d46a9609db5216960d04499533</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6e10bbdc2871f8a918a2002938904368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a505388d0a4f06d681994bfc358b98189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afe2591cc4cd7c32708b35cf143c55acf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a8fa6863c4be40a37e82852d8d0ef3bed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a2a28531b7b27124bd3d76401f6409fe6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a59985ad00285b89f0bcbb642e066bf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7dadd658f4fc1f395ff6c2210a75a790</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a770f60d202082341d7b615e2c776e7a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a76c261de41bc71b48299ab163878a798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7ef64b8313ce3b23ed491ef336f85dda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; typename ReturnType&lt; internal::member_norm, RealScalar &gt;::Type &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>abf116d64d34a905a1f28e65c9d7119ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator*</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a1c60d513ccac48a83dfd3844d16495df</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator*=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aceec61a73b4f1ee44fbeade9c11100ff</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6d3cf71a4d1ccb3bfff0247c0c00eee9</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa340bb83eed6010dcbce344e71d47893</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4220da702b7975dc0a493201f87000cd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a231ac6c09c2143474eb934f32066600a</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ac6aa8ac6cda85e83660182e2fa6f9529</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af4be05a3e179f013ae12a910d74f165c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c0102341b5c631898b7ba2ea7dea10b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a240956aa151db2797667e539e0d78199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae37a750caaab9a74c50d5fbfb48b3829</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7360c9a7aaf12f4f1058ffc559af39ab</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0b20a6de87965b36228c7f0ae48d5a17</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af43e4714f44e5a4bfd740b6432171290</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>afc243a46a662bbab6a8c07db5e71939f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae1013e0bb0c54b285d52fb113341595c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a140007b32c826b7992ffb1d588dc8611</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa6d5faf7979ddcda5cdc6e1f51dac336</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aee79661fc144ddc5ff4b5508751fa442</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::WithFormat</name>
    <filename>classEigen_1_1WithFormat.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>namespaceEigen.html</filename>
    <class kind="class">Eigen::aligned_allocator</class>
    <class kind="class">Eigen::AlignedBox</class>
    <class kind="class">Eigen::AMDOrdering</class>
    <class kind="class">Eigen::AngleAxis</class>
    <class kind="class">Eigen::Array</class>
    <class kind="class">Eigen::ArrayBase</class>
    <class kind="class">Eigen::ArrayWrapper</class>
    <class kind="struct">Eigen::ArrayXpr</class>
    <class kind="class">Eigen::BDCSVD</class>
    <class kind="class">Eigen::BiCGSTAB</class>
    <class kind="class">Eigen::Block</class>
    <class kind="class">Eigen::BlockImpl&lt; XprType, BlockRows, BlockCols, InnerPanel, Sparse &gt;</class>
    <class kind="class">Eigen::CholmodBase</class>
    <class kind="class">Eigen::CholmodDecomposition</class>
    <class kind="class">Eigen::CholmodSimplicialLDLT</class>
    <class kind="class">Eigen::CholmodSimplicialLLT</class>
    <class kind="class">Eigen::CholmodSupernodalLLT</class>
    <class kind="class">Eigen::COLAMDOrdering</class>
    <class kind="class">Eigen::ColPivHouseholderQR</class>
    <class kind="class">Eigen::CommaInitializer</class>
    <class kind="class">Eigen::CompleteOrthogonalDecomposition</class>
    <class kind="class">Eigen::ComplexEigenSolver</class>
    <class kind="class">Eigen::ComplexSchur</class>
    <class kind="class">Eigen::ConjugateGradient</class>
    <class kind="class">Eigen::CwiseBinaryOp</class>
    <class kind="class">Eigen::CwiseNullaryOp</class>
    <class kind="class">Eigen::CwiseTernaryOp</class>
    <class kind="class">Eigen::CwiseUnaryOp</class>
    <class kind="class">Eigen::CwiseUnaryView</class>
    <class kind="struct">Eigen::Dense</class>
    <class kind="class">Eigen::DenseBase</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Diagonal</class>
    <class kind="class">Eigen::DiagonalMatrix</class>
    <class kind="class">Eigen::DiagonalPreconditioner</class>
    <class kind="class">Eigen::DiagonalWrapper</class>
    <class kind="class">Eigen::EigenBase</class>
    <class kind="class">Eigen::EigenSolver</class>
    <class kind="class">Eigen::ForceAlignedAccess</class>
    <class kind="class">Eigen::FullPivHouseholderQR</class>
    <class kind="class">Eigen::FullPivLU</class>
    <class kind="class">Eigen::GeneralizedEigenSolver</class>
    <class kind="class">Eigen::GeneralizedSelfAdjointEigenSolver</class>
    <class kind="class">Eigen::HessenbergDecomposition</class>
    <class kind="class">Eigen::Homogeneous</class>
    <class kind="class">Eigen::HouseholderQR</class>
    <class kind="class">Eigen::HouseholderSequence</class>
    <class kind="class">Eigen::Hyperplane</class>
    <class kind="class">Eigen::IdentityPreconditioner</class>
    <class kind="class">Eigen::IncompleteCholesky</class>
    <class kind="class">Eigen::IncompleteLUT</class>
    <class kind="class">Eigen::InnerStride</class>
    <class kind="class">Eigen::Inverse</class>
    <class kind="class">Eigen::IOFormat</class>
    <class kind="class">Eigen::IterativeSolverBase</class>
    <class kind="class">Eigen::JacobiRotation</class>
    <class kind="class">Eigen::JacobiSVD</class>
    <class kind="class">Eigen::LDLT</class>
    <class kind="class">Eigen::LeastSquareDiagonalPreconditioner</class>
    <class kind="class">Eigen::LeastSquaresConjugateGradient</class>
    <class kind="class">Eigen::LLT</class>
    <class kind="class">Eigen::Map</class>
    <class kind="class">Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; SparseMatrixType &gt;</class>
    <class kind="class">Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::MapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::MappedSparseMatrix</class>
    <class kind="class">Eigen::Matrix</class>
    <class kind="class">Eigen::MatrixBase</class>
    <class kind="class">Eigen::MatrixWrapper</class>
    <class kind="struct">Eigen::MatrixXpr</class>
    <class kind="class">Eigen::MetisOrdering</class>
    <class kind="class">Eigen::NaturalOrdering</class>
    <class kind="class">Eigen::NestByValue</class>
    <class kind="class">Eigen::NoAlias</class>
    <class kind="class">Eigen::NumTraits</class>
    <class kind="class">Eigen::OuterStride</class>
    <class kind="class">Eigen::ParametrizedLine</class>
    <class kind="class">Eigen::PardisoLDLT</class>
    <class kind="class">Eigen::PardisoLLT</class>
    <class kind="class">Eigen::PardisoLU</class>
    <class kind="class">Eigen::PartialPivLU</class>
    <class kind="class">Eigen::PartialReduxExpr</class>
    <class kind="class">Eigen::PastixLDLT</class>
    <class kind="class">Eigen::PastixLLT</class>
    <class kind="class">Eigen::PastixLU</class>
    <class kind="class">Eigen::PermutationBase</class>
    <class kind="class">Eigen::PermutationMatrix</class>
    <class kind="struct">Eigen::PermutationStorage</class>
    <class kind="class">Eigen::PermutationWrapper</class>
    <class kind="class">Eigen::PlainObjectBase</class>
    <class kind="class">Eigen::Product</class>
    <class kind="class">Eigen::Quaternion</class>
    <class kind="class">Eigen::QuaternionBase</class>
    <class kind="class">Eigen::RealQZ</class>
    <class kind="class">Eigen::RealSchur</class>
    <class kind="class">Eigen::Ref</class>
    <class kind="class">Eigen::Ref&lt; SparseMatrixType, Options &gt;</class>
    <class kind="class">Eigen::Ref&lt; SparseVectorType &gt;</class>
    <class kind="class">Eigen::Replicate</class>
    <class kind="class">Eigen::Reverse</class>
    <class kind="class">Eigen::Rotation2D</class>
    <class kind="class">Eigen::RotationBase</class>
    <class kind="class">Eigen::ScalarBinaryOpTraits</class>
    <class kind="class">Eigen::Select</class>
    <class kind="class">Eigen::SelfAdjointEigenSolver</class>
    <class kind="class">Eigen::SelfAdjointView</class>
    <class kind="class">Eigen::SimplicialCholesky</class>
    <class kind="class">Eigen::SimplicialCholeskyBase</class>
    <class kind="class">Eigen::SimplicialLDLT</class>
    <class kind="class">Eigen::SimplicialLLT</class>
    <class kind="class">Eigen::Solve</class>
    <class kind="class">Eigen::SolverBase</class>
    <class kind="struct">Eigen::SolverStorage</class>
    <class kind="class">Eigen::SolveWithGuess</class>
    <class kind="struct">Eigen::Sparse</class>
    <class kind="class">Eigen::SparseCompressedBase</class>
    <class kind="class">Eigen::SparseLU</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::SparseMatrix</class>
    <class kind="class">Eigen::SparseMatrixBase</class>
    <class kind="class">Eigen::SparseQR</class>
    <class kind="class">Eigen::SparseSelfAdjointView</class>
    <class kind="class">Eigen::SparseSolverBase</class>
    <class kind="class">Eigen::SparseVector</class>
    <class kind="class">Eigen::SparseView</class>
    <class kind="class">Eigen::SPQR</class>
    <class kind="class">Eigen::Stride</class>
    <class kind="class">Eigen::SuperILU</class>
    <class kind="class">Eigen::SuperLU</class>
    <class kind="class">Eigen::SuperLUBase</class>
    <class kind="class">Eigen::SVDBase</class>
    <class kind="class">Eigen::Transform</class>
    <class kind="class">Eigen::Translation</class>
    <class kind="class">Eigen::Transpose</class>
    <class kind="class">Eigen::Transpositions</class>
    <class kind="struct">Eigen::TranspositionsStorage</class>
    <class kind="class">Eigen::TriangularBase</class>
    <class kind="class">Eigen::TriangularView</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; _MatrixType, _Mode, Dense &gt;</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; MatrixType, Mode, Sparse &gt;</class>
    <class kind="class">Eigen::Tridiagonalization</class>
    <class kind="class">Eigen::Triplet</class>
    <class kind="class">Eigen::UmfPackLU</class>
    <class kind="class">Eigen::VectorBlock</class>
    <class kind="class">Eigen::VectorwiseOp</class>
    <class kind="class">Eigen::WithFormat</class>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 2 &gt;</type>
      <name>AlignedScaling2d</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af8975289b8134a5021e806029516e82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 2 &gt;</type>
      <name>AlignedScaling2f</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af2440178a1f5f6abef6ee0231bc49184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 3 &gt;</type>
      <name>AlignedScaling3d</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a0aff001d5740f13797c9acd4e3276673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 3 &gt;</type>
      <name>AlignedScaling3f</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a45caf8b0e6da378885f4ae3f06c5cde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; double &gt;</type>
      <name>AngleAxisd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaed936d6e9192d97f00a9608081fa9b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; float &gt;</type>
      <name>AngleAxisf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad823b9c674644b14d950fbfe165dfdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EIGEN_DEFAULT_DENSE_INDEX_TYPE</type>
      <name>Index</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a62e77e0933482dafde8fe197d9a2cfde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quaterniond</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga5daab8e66aa480465000308455578830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quaternionf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga66aa915a26d698c60ed206818c3e4c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga4289f38cc6ecf302e07d2365abc6a902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadaf7f3ee984d9828ca94d66355f0b226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, 0 &gt;</type>
      <name>QuaternionMapd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga89412d1dcf23537e5990dfb3089ace76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, 0 &gt;</type>
      <name>QuaternionMapf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga867ff508ac860bdf7cab3b8a8fc1048d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; double &gt;</type>
      <name>Rotation2Dd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab7af1ccdfb6c865c27fe1fd6bd9e759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; float &gt;</type>
      <name>Rotation2Df</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga35e2cace3ada497794734edb8bc33b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StandardCompressedFormat</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a5742907b625c0e489f85b048d1287101abd3632507a3697fb48c77eff79851a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccessorLevels</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga9f93eac38eb83deb0e8dbd42ddf11d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReadOnlyAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5daa1f2b0e6a668b11f2958940965d2b572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dabcadf08230fb1a5ef7b3195745d3a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5da50108ad00095928de06228470ceab09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectWriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dacbe59d09ba2fdf8eac127bff1a1f0234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AlignmentType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga45fe06e29902b7a2773de05ba27b47a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unaligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a4e19dd09d5ff42295ba1d72d12a46686</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned8</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a9d99d7a9ff1da5c949bec22733bfba14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned16</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ad0b140cd97bc74365b51843d28379655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned32</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a8a380b1cd0c3e5a6cceac06f8235157a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned64</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a2639cfa1e8faac751556bc0009fe95a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned128</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a60057da2408e499b5656244d0b26cc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ae12d0f8f869c40c76128260af2242bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComputationInfo</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga85fad7b87587764e5cf6b513a9e0ee5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Success</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea671a2aeb0f527802806a441d58a80fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumericalIssue</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea1c6e20706575a629b27a105f07f1883b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoConvergence</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea6a68dfb88a8336108a30588bdf356c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidInput</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea580b2a3cafe585691e789f768fb729bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CornerType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaafc7e22c8efbfefd5997e2cd9ec223e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecompositionOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gae3e239fb70022eb8747994cf5d68b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9fa9302d510cee20c26311154937e23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9aa7fb4e98834788d0b1b0f2b8467d2527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a36581f7c662f7def31efd500c284f930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a540036417bfecf2e791a70948c227f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EigenvaluesOnly</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9afd06633f270207c373875fd7ca03e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeEigenvectors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a7f7d17fba3c9bb92158e346d5979d0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ax_lBx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a5eb11a88a4bd445f58f1b24598d3848f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9a7d9813cec527e299a36b749b0f7e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9870817d373c41ba0dc7f6b5ab0895b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DirectionType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gad49a7b3738e273eb00932271b36127f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Vertical</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7ae2efac6e74ecab5e3b0b1561c5ddf83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Horizontal</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a961c62410157b64033839488f4d7f7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BothDirections</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a04fefd61992e941d509a57bc44c59794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QRPreconditioners</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga46eba0d5c621f590b8cf1b53af31d56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea2e95bc818f975b19def01e93d240dece</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea9c660eb3336bf8c77ce9d081ca07cbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd2e2f4875c5b4b6e602a433d90c4e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd745dcaff7019c5f918c68809e5ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gac22de43beeac7a78b384f99bed5cee0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheLeft</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba21b30a61e9cb10c967aec17567804007</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheRight</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba329fc3a54ceb2b6e0e73b400998b8a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaacded1a18ae58b0f554751f6cdf9eb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a0103672ae41005ab03b4176c765afd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a77c993a8d9f6efe5c1159fb2ab07dd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutoAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13ad0e7f67d40bcde3d41c12849b16ce6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a56908522e51443a0aa0567f879c2e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformTraits</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaee59a86102f150923b0cac6d4ff05107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Isometry</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a84413028615d2d718bafd2dfb93dafef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Affine</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0872f0a82453aaae40339c33acbb31fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AffineCompact</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a8192e8fdb2ec3ec46d92956cc83ef490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Projective</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0f7338b8672884554e8642bce9e44183</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UpLoType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga39e3366ff5554d731e7dc8bb642f83cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdaf581029282d421eee5aae14238c6f749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdafca2ccebb604f171656deb53e8c083c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2ef430bff6cc12c2d1e0ef01b95f7ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdac4dc554a61510151ddd5bafaf6040223</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda8f40b928c10a71ba03e5f75ad2a72fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdadd28224d7ea92689930be73c1b50b0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2424988b6fca98be70b595632753ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda7b37877e0b9b0df28c9c2b669a633265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfAdjoint</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdacf9ccb2016f8b9c0f3268f05a1e75821</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Symmetric</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdad5381b2d1c8973a08303c94e7da02333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_abs_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae27242789e7e62a8c42579b79be59b1a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_abs2_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>abs2</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a54cc34b64b4935307efc06d56cd531df</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_acos_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3fe3a136370fefae062591304c6a7ebd</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_arg_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>arg</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aa539408a09481d35961e11ee78793db1</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_asin_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a6c5c246b877ac331495d21e7a5d51616</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_atan_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a230744e17147d12e8ef3f2fc3796f64f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_ceil_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>ceil</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aa73e38be0689a463ae14141b9cf89c35</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_conjugate_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>conj</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ab84f39a06a18e1ebb23f8be80345b79d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_cos_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad01d50a42869218f1d54af13f71517a6</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_cosh_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a34b99a26a2a1e7ff985a5ace16eedfcb</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_cube_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>cube</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae04fac7e3068f05c3f01982554a21d80</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_digamma_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>digamma</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af40db84b3db19fe25fe2f77c429420e5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_erf_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>erf</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac336e0eba2b12dca8b01da1a006566c3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_erfc_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>erfc</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a17bcfbd19ed883ecf581f06ac1eeeb8c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_exp_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae491aecf7dab66ac7e11008c5766694d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_floor_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>floor</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>abf03d773a87830bc7fde51bcd94c89a0</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType &gt;</type>
      <name>householderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga5f2b3f80cdf7ae96609e4a8d2e55e371</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_imag_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>imag</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a04d60a3c8a266f63c08e03615c1985c9</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_inverse_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>inverse</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae9de9064c3b832ee804c0e0957e80334</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_isfinite_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>isfinite</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aba24ec81dec745a00b7f33adead89811</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_isinf_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>isinf</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a1f1103712e337c4c96a05f949637a4c8</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_isnan_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>isnan</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a99adfc5178f3fd5488304284388b2a10</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_lgamma_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>lgamma</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac2e6331628bb1989b7be6d7e42827649</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_log_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>log</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae8bb75ba4f5f30a7571146dbfa653c6d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_log10_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a25256faeec3ffd0f3615a0e1e45dfb14</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_log1p_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>log1p</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac5c8a2cded6b59628f2de04f24d2fff4</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Inverse&lt; PermutationType &gt;, SparseDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad225313de8037d40c2d26c17edf1a9fd</anchor>
      <arglist>(const InverseImpl&lt; PermutationType, PermutationStorage &gt; &amp;tperm, const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixDerived, PermutationDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a9723b3ff0f2c99fe1081e3eb14380d4c</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;matrix, const PermutationBase&lt; PermutationDerived &gt; &amp;permutation)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixDerived, TranspositionsDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a06ca1e6b1a30b4dd0f2633664fe4d956</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;matrix, const TranspositionsBase&lt; TranspositionsDerived &gt; &amp;transpositions)</arglist>
    </member>
    <member kind="function">
      <type>internal::matrix_type_times_scalar_type&lt; typename VectorsType::Scalar, OtherDerived &gt;::Type</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a634bfd5e206a2e77f799b4c3956ea49e</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; PermDerived, SparseDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a02fbb1bbd915b899b34a56a3cd64c438</anchor>
      <arglist>(const PermutationBase&lt; PermDerived &gt; &amp;perm, const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; PermutationDerived, MatrixDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a4d2abe28092f8070e971494c7e0b507a</anchor>
      <arglist>(const PermutationBase&lt; PermutationDerived &gt; &amp;permutation, const MatrixBase&lt; MatrixDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseDerived, Inverse&lt; PermutationType &gt;, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a8b7051d2f98498d619044089949f931d</anchor>
      <arglist>(const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix, const InverseImpl&lt; PermutationType, PermutationStorage &gt; &amp;tperm)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseDerived, PermDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a429958a0e6bd27168f3935d3100c55cf</anchor>
      <arglist>(const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix, const PermutationBase&lt; PermDerived &gt; &amp;perm)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; TranspositionsDerived, MatrixDerived, AliasFreeProduct &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a02b783ce2d2464d4f4a0bc0d1dc494f0</anchor>
      <arglist>(const TranspositionsBase&lt; TranspositionsDerived &gt; &amp;transpositions, const MatrixBase&lt; MatrixDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_real_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>real</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac74dc920119b1eba45e9218d9f402afc</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, OnTheRight &gt;</type>
      <name>rightHouseholderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga897ebce658762148f706f73a05525e89</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_round_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>round</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad9eaa98e8016ef17024a18a2f3e5bef3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_rsqrt_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>rsqrt</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a6374a6a9e972e9358d7ab3fced32d7d5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Derived &gt;</type>
      <name>Scaling</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a109425bca2048c3df19249c04e73715c</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;coeffs)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix&lt; Scalar, 2 &gt;</type>
      <name>Scaling</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aafd4d881e7a6c2a68c1db03e261c767b</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix&lt; Scalar, 3 &gt;</type>
      <name>Scaling</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a162d759175d7c5214f33fefb30862815</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy, const Scalar &amp;sz)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; std::complex&lt; RealScalar &gt; &gt;</type>
      <name>Scaling</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a76386154f2cdb77190759744830422d1</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; double &gt;</type>
      <name>Scaling</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad2e71727718ca788680b3aa9eb485f98</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; float &gt;</type>
      <name>Scaling</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a02918175ff75e5df9fd291cf5fc3fd1b</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sign_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sign</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a831e88e0403a42d0dfb328d8acd3e56f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sin_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae6e8ad270ff41c088d7651567594f796</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sinh_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af284ce359b6efd4b594a9f8a1f5e5d96</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sqrt_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af4f536e8ea56702e63088efb3706d1f0</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_square_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>square</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af28ef8cae3b37bcf1b47910cd6f20d4c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_tan_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3bc116a6243f38c22f851581aa7b521a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_tanh_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a0110c233d357169fd58fdf5656992a98</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>internal::umeyama_transform_matrix_type&lt; Derived, OtherDerived &gt;::type</type>
      <name>umeyama</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab3f5a82a24490b936f8694cf8fef8e60</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;src, const MatrixBase&lt; OtherDerived &gt; &amp;dst, bool with_scaling=true)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_sparse</type>
      <name>viewAsCholmod</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>afacb818b18280e2e1ab73836ab74cab5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, UpLo &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_dense</type>
      <name>viewAsCholmod</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a92fe7b595099051fa1d1c443641a6de3</anchor>
      <arglist>(MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_sparse</type>
      <name>viewAsCholmod</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac9fb9e40cfc9ddbdc7da84ee01bb7545</anchor>
      <arglist>(Ref&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt; mat)</arglist>
    </member>
    <member kind="function">
      <type>MappedSparseMatrix&lt; Scalar, Flags, StorageIndex &gt;</type>
      <name>viewAsEigen</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aad43574b96b756041bd8037c4b61e0d9</anchor>
      <arglist>(cholmod_sparse &amp;cm)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ActualPacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga020f88dc24a123b9afbd756c4b220db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EIGEN_DEPRECATED unsigned int</type>
      <name>AlignedBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gab1088154b1bb147229211e4f3b56d401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>CompressedAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaed0244284da47a2b8661261431173caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DirectAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gabf1e9d0516a933445a4c307ad8f14915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>Dynamic</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad81fa7195215a0ce30017dfac309f0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DynamicIndex</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a73c597189a4a99127175e8167c456fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EIGEN_DEPRECATED unsigned int</type>
      <name>EvalBeforeAssigningBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae4b8ae7db0d83f9bbed26b261e60e139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>EvalBeforeNestingBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaa34e83bae46a8eeae4e69ebe3aaecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HugeCost</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3163430a1c13173faffde69016b48aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>Infinity</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a7951593b031e13d90223c83d022ce99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LinearAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga4b983a15d57cd55806df618ac544d09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LvalueBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae2c323957f20dfdc6cb8f44428eaec1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>NoPreferredStorageOrderBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga3c186ad80ddcf5e2ed3d7ee31cca1860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>PacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga1a306a438e1ab074e8be59512e887b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>RowMajorBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae4f56c2a60bbe4bd2e44c5b19cbe8762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Cholesky_Module</name>
    <title>Cholesky module</title>
    <filename>group__Cholesky__Module.html</filename>
    <class kind="class">Eigen::LDLT</class>
    <class kind="class">Eigen::LLT</class>
  </compound>
  <compound kind="group">
    <name>CholmodSupport_Module</name>
    <title>CholmodSupport module</title>
    <filename>group__CholmodSupport__Module.html</filename>
    <class kind="class">Eigen::CholmodBase</class>
    <class kind="class">Eigen::CholmodDecomposition</class>
    <class kind="class">Eigen::CholmodSimplicialLDLT</class>
    <class kind="class">Eigen::CholmodSimplicialLLT</class>
    <class kind="class">Eigen::CholmodSupernodalLLT</class>
  </compound>
  <compound kind="group">
    <name>Core_Module</name>
    <title>Core module</title>
    <filename>group__Core__Module.html</filename>
    <subgroup>arraytypedefs</subgroup>
    <subgroup>matrixtypedefs</subgroup>
    <subgroup>flags</subgroup>
    <subgroup>enums</subgroup>
    <class kind="class">Eigen::aligned_allocator</class>
    <class kind="class">Eigen::Array</class>
    <class kind="class">Eigen::ArrayBase</class>
    <class kind="class">Eigen::ArrayWrapper</class>
    <class kind="class">Eigen::Block</class>
    <class kind="class">Eigen::CommaInitializer</class>
    <class kind="class">Eigen::CwiseBinaryOp</class>
    <class kind="class">Eigen::CwiseNullaryOp</class>
    <class kind="class">Eigen::CwiseTernaryOp</class>
    <class kind="class">Eigen::CwiseUnaryOp</class>
    <class kind="class">Eigen::CwiseUnaryView</class>
    <class kind="class">Eigen::DenseBase</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Diagonal</class>
    <class kind="class">Eigen::DiagonalMatrix</class>
    <class kind="class">Eigen::DiagonalWrapper</class>
    <class kind="class">Eigen::EigenBase</class>
    <class kind="class">Eigen::ForceAlignedAccess</class>
    <class kind="class">Eigen::IOFormat</class>
    <class kind="class">Eigen::Map</class>
    <class kind="class">Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::MapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Matrix</class>
    <class kind="class">Eigen::MatrixBase</class>
    <class kind="class">Eigen::MatrixWrapper</class>
    <class kind="class">Eigen::NestByValue</class>
    <class kind="class">Eigen::NoAlias</class>
    <class kind="class">Eigen::NumTraits</class>
    <class kind="class">Eigen::PartialReduxExpr</class>
    <class kind="class">Eigen::PermutationBase</class>
    <class kind="class">Eigen::PermutationMatrix</class>
    <class kind="class">Eigen::PermutationWrapper</class>
    <class kind="class">Eigen::PlainObjectBase</class>
    <class kind="class">Eigen::Product</class>
    <class kind="class">Eigen::Ref</class>
    <class kind="class">Eigen::Replicate</class>
    <class kind="class">Eigen::Reverse</class>
    <class kind="class">Eigen::ScalarBinaryOpTraits</class>
    <class kind="class">Eigen::Select</class>
    <class kind="class">Eigen::SelfAdjointView</class>
    <class kind="class">Eigen::Solve</class>
    <class kind="class">Eigen::Stride</class>
    <class kind="class">Eigen::Transpose</class>
    <class kind="class">Eigen::Transpositions</class>
    <class kind="class">Eigen::TriangularBase</class>
    <class kind="class">Eigen::TriangularView</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; _MatrixType, _Mode, Dense &gt;</class>
    <class kind="class">Eigen::VectorBlock</class>
    <class kind="class">Eigen::VectorwiseOp</class>
    <class kind="class">Eigen::WithFormat</class>
  </compound>
  <compound kind="group">
    <name>Eigenvalues_Module</name>
    <title>Eigenvalues module</title>
    <filename>group__Eigenvalues__Module.html</filename>
    <class kind="class">Eigen::ComplexEigenSolver</class>
    <class kind="class">Eigen::ComplexSchur</class>
    <class kind="class">Eigen::EigenSolver</class>
    <class kind="class">Eigen::GeneralizedEigenSolver</class>
    <class kind="class">Eigen::GeneralizedSelfAdjointEigenSolver</class>
    <class kind="class">Eigen::HessenbergDecomposition</class>
    <class kind="class">Eigen::RealQZ</class>
    <class kind="class">Eigen::RealSchur</class>
    <class kind="class">Eigen::SelfAdjointEigenSolver</class>
    <class kind="class">Eigen::Tridiagonalization</class>
  </compound>
  <compound kind="group">
    <name>Geometry_Module</name>
    <title>Geometry module</title>
    <filename>group__Geometry__Module.html</filename>
    <subgroup>alignedboxtypedefs</subgroup>
    <class kind="class">Eigen::AlignedBox</class>
    <class kind="class">Eigen::AngleAxis</class>
    <class kind="class">Eigen::Homogeneous</class>
    <class kind="class">Eigen::Hyperplane</class>
    <class kind="class">Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::ParametrizedLine</class>
    <class kind="class">Eigen::Quaternion</class>
    <class kind="class">Eigen::QuaternionBase</class>
    <class kind="class">Eigen::Rotation2D</class>
    <class kind="class">Scaling</class>
    <class kind="class">Eigen::Transform</class>
    <class kind="class">Eigen::Translation</class>
    <member kind="typedef">
      <type>AngleAxis&lt; double &gt;</type>
      <name>AngleAxisd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaed936d6e9192d97f00a9608081fa9b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; float &gt;</type>
      <name>AngleAxisf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad823b9c674644b14d950fbfe165dfdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quaterniond</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga5daab8e66aa480465000308455578830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quaternionf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga66aa915a26d698c60ed206818c3e4c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga4289f38cc6ecf302e07d2365abc6a902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadaf7f3ee984d9828ca94d66355f0b226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, 0 &gt;</type>
      <name>QuaternionMapd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga89412d1dcf23537e5990dfb3089ace76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, 0 &gt;</type>
      <name>QuaternionMapf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga867ff508ac860bdf7cab3b8a8fc1048d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; double &gt;</type>
      <name>Rotation2Dd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab7af1ccdfb6c865c27fe1fd6bd9e759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; float &gt;</type>
      <name>Rotation2Df</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga35e2cace3ada497794734edb8bc33b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga7b7797771a02222159dcacf02a01db08</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8b9f1498d5977737ef6eb32a04b12311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac7eeaaf17a0fca2e2296d5b3beca9b3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::umeyama_transform_matrix_type&lt; Derived, OtherDerived &gt;::type</type>
      <name>umeyama</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab3f5a82a24490b936f8694cf8fef8e60</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;src, const MatrixBase&lt; OtherDerived &gt; &amp;dst, bool with_scaling=true)</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Householder_Module</name>
    <title>Householder module</title>
    <filename>group__Householder__Module.html</filename>
    <class kind="class">Eigen::HouseholderSequence</class>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType &gt;</type>
      <name>householderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga5f2b3f80cdf7ae96609e4a8d2e55e371</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, OnTheRight &gt;</type>
      <name>rightHouseholderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga897ebce658762148f706f73a05525e89</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>IterativeLinearSolvers_Module</name>
    <title>IterativeLinearSolvers module</title>
    <filename>group__IterativeLinearSolvers__Module.html</filename>
    <class kind="class">Eigen::BiCGSTAB</class>
    <class kind="class">Eigen::ConjugateGradient</class>
    <class kind="class">Eigen::DiagonalPreconditioner</class>
    <class kind="class">Eigen::IdentityPreconditioner</class>
    <class kind="class">Eigen::IncompleteLUT</class>
    <class kind="class">Eigen::IterativeSolverBase</class>
    <class kind="class">Eigen::LeastSquareDiagonalPreconditioner</class>
    <class kind="class">Eigen::LeastSquaresConjugateGradient</class>
    <class kind="class">Eigen::SolveWithGuess</class>
  </compound>
  <compound kind="group">
    <name>Jacobi_Module</name>
    <title>Jacobi module</title>
    <filename>group__Jacobi__Module.html</filename>
    <class kind="class">Eigen::JacobiRotation</class>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LU_Module</name>
    <title>LU module</title>
    <filename>group__LU__Module.html</filename>
    <class kind="class">Eigen::FullPivLU</class>
    <class kind="class">Eigen::PartialPivLU</class>
  </compound>
  <compound kind="group">
    <name>MetisSupport_Module</name>
    <title>MetisSupport module</title>
    <filename>group__MetisSupport__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>OrderingMethods_Module</name>
    <title>OrderingMethods module</title>
    <filename>group__OrderingMethods__Module.html</filename>
    <class kind="class">Eigen::AMDOrdering</class>
    <class kind="class">Eigen::COLAMDOrdering</class>
    <class kind="class">Eigen::NaturalOrdering</class>
  </compound>
  <compound kind="group">
    <name>PardisoSupport_Module</name>
    <title>PardisoSupport module</title>
    <filename>group__PardisoSupport__Module.html</filename>
    <class kind="class">Eigen::PardisoLDLT</class>
    <class kind="class">Eigen::PardisoLLT</class>
    <class kind="class">Eigen::PardisoLU</class>
  </compound>
  <compound kind="group">
    <name>PaStiXSupport_Module</name>
    <title>PaStiXSupport module</title>
    <filename>group__PaStiXSupport__Module.html</filename>
    <class kind="class">Eigen::PastixLDLT</class>
    <class kind="class">Eigen::PastixLLT</class>
    <class kind="class">Eigen::PastixLU</class>
  </compound>
  <compound kind="group">
    <name>QR_Module</name>
    <title>QR module</title>
    <filename>group__QR__Module.html</filename>
    <class kind="class">Eigen::ColPivHouseholderQR</class>
    <class kind="class">Eigen::CompleteOrthogonalDecomposition</class>
    <class kind="class">Eigen::FullPivHouseholderQR</class>
    <class kind="class">Eigen::HouseholderQR</class>
  </compound>
  <compound kind="group">
    <name>Sparse_Module</name>
    <title>Sparse meta-module</title>
    <filename>group__Sparse__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>SparseCholesky_Module</name>
    <title>SparseCholesky module</title>
    <filename>group__SparseCholesky__Module.html</filename>
    <class kind="class">Eigen::SimplicialCholesky</class>
    <class kind="class">Eigen::SimplicialCholeskyBase</class>
    <class kind="class">Eigen::SimplicialLDLT</class>
    <class kind="class">Eigen::SimplicialLLT</class>
  </compound>
  <compound kind="group">
    <name>SparseCore_Module</name>
    <title>SparseCore module</title>
    <filename>group__SparseCore__Module.html</filename>
    <class kind="class">Eigen::Map&lt; SparseMatrixType &gt;</class>
    <class kind="class">Eigen::Ref&lt; SparseMatrixType, Options &gt;</class>
    <class kind="class">Eigen::Ref&lt; SparseVectorType &gt;</class>
    <class kind="class">Eigen::SparseCompressedBase</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::SparseMatrix</class>
    <class kind="class">Eigen::SparseMatrixBase</class>
    <class kind="class">Eigen::SparseSelfAdjointView</class>
    <class kind="class">Eigen::SparseSolverBase</class>
    <class kind="class">Eigen::SparseVector</class>
    <class kind="class">Eigen::SparseView</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; MatrixType, Mode, Sparse &gt;</class>
    <class kind="class">Eigen::Triplet</class>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SparseLU_Module</name>
    <title>SparseLU module</title>
    <filename>group__SparseLU__Module.html</filename>
    <class kind="class">Eigen::SparseLU</class>
  </compound>
  <compound kind="group">
    <name>SparseQR_Module</name>
    <title>SparseQR module</title>
    <filename>group__SparseQR__Module.html</filename>
    <class kind="class">Eigen::SparseQR</class>
  </compound>
  <compound kind="group">
    <name>SPQRSupport_Module</name>
    <title>SuiteSparseQR module</title>
    <filename>group__SPQRSupport__Module.html</filename>
    <class kind="class">Eigen::SPQR</class>
  </compound>
  <compound kind="group">
    <name>arraytypedefs</name>
    <title>Global array typedefs</title>
    <filename>group__arraytypedefs.html</filename>
  </compound>
  <compound kind="group">
    <name>matrixtypedefs</name>
    <title>Global matrix typedefs</title>
    <filename>group__matrixtypedefs.html</filename>
  </compound>
  <compound kind="group">
    <name>flags</name>
    <title>Flags</title>
    <filename>group__flags.html</filename>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ActualPacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga020f88dc24a123b9afbd756c4b220db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EIGEN_DEPRECATED unsigned int</type>
      <name>AlignedBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gab1088154b1bb147229211e4f3b56d401</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>CompressedAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaed0244284da47a2b8661261431173caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DirectAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gabf1e9d0516a933445a4c307ad8f14915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const EIGEN_DEPRECATED unsigned int</type>
      <name>EvalBeforeAssigningBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae4b8ae7db0d83f9bbed26b261e60e139</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>EvalBeforeNestingBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaa34e83bae46a8eeae4e69ebe3aaecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LinearAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga4b983a15d57cd55806df618ac544d09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LvalueBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae2c323957f20dfdc6cb8f44428eaec1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>NoPreferredStorageOrderBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga3c186ad80ddcf5e2ed3d7ee31cca1860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>PacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga1a306a438e1ab074e8be59512e887b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>RowMajorBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae4f56c2a60bbe4bd2e44c5b19cbe8762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>enums</name>
    <title>Enumerations</title>
    <filename>group__enums.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AccessorLevels</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga9f93eac38eb83deb0e8dbd42ddf11d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReadOnlyAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5daa1f2b0e6a668b11f2958940965d2b572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dabcadf08230fb1a5ef7b3195745d3a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5da50108ad00095928de06228470ceab09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectWriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dacbe59d09ba2fdf8eac127bff1a1f0234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AlignmentType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga45fe06e29902b7a2773de05ba27b47a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unaligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a4e19dd09d5ff42295ba1d72d12a46686</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned8</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a9d99d7a9ff1da5c949bec22733bfba14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned16</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ad0b140cd97bc74365b51843d28379655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned32</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a8a380b1cd0c3e5a6cceac06f8235157a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned64</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a2639cfa1e8faac751556bc0009fe95a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned128</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a60057da2408e499b5656244d0b26cc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ae12d0f8f869c40c76128260af2242bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComputationInfo</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga85fad7b87587764e5cf6b513a9e0ee5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Success</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea671a2aeb0f527802806a441d58a80fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumericalIssue</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea1c6e20706575a629b27a105f07f1883b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoConvergence</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea6a68dfb88a8336108a30588bdf356c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidInput</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea580b2a3cafe585691e789f768fb729bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CornerType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaafc7e22c8efbfefd5997e2cd9ec223e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecompositionOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gae3e239fb70022eb8747994cf5d68b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9fa9302d510cee20c26311154937e23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9aa7fb4e98834788d0b1b0f2b8467d2527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a36581f7c662f7def31efd500c284f930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a540036417bfecf2e791a70948c227f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EigenvaluesOnly</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9afd06633f270207c373875fd7ca03e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeEigenvectors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a7f7d17fba3c9bb92158e346d5979d0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ax_lBx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a5eb11a88a4bd445f58f1b24598d3848f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9a7d9813cec527e299a36b749b0f7e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9870817d373c41ba0dc7f6b5ab0895b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DirectionType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gad49a7b3738e273eb00932271b36127f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Vertical</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7ae2efac6e74ecab5e3b0b1561c5ddf83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Horizontal</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a961c62410157b64033839488f4d7f7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BothDirections</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a04fefd61992e941d509a57bc44c59794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QRPreconditioners</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga46eba0d5c621f590b8cf1b53af31d56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea2e95bc818f975b19def01e93d240dece</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea9c660eb3336bf8c77ce9d081ca07cbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd2e2f4875c5b4b6e602a433d90c4e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd745dcaff7019c5f918c68809e5ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gac22de43beeac7a78b384f99bed5cee0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheLeft</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba21b30a61e9cb10c967aec17567804007</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheRight</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba329fc3a54ceb2b6e0e73b400998b8a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaacded1a18ae58b0f554751f6cdf9eb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a0103672ae41005ab03b4176c765afd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a77c993a8d9f6efe5c1159fb2ab07dd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutoAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13ad0e7f67d40bcde3d41c12849b16ce6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a56908522e51443a0aa0567f879c2e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformTraits</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaee59a86102f150923b0cac6d4ff05107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Isometry</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a84413028615d2d718bafd2dfb93dafef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Affine</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0872f0a82453aaae40339c33acbb31fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AffineCompact</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a8192e8fdb2ec3ec46d92956cc83ef490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Projective</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0f7338b8672884554e8642bce9e44183</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UpLoType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga39e3366ff5554d731e7dc8bb642f83cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdaf581029282d421eee5aae14238c6f749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdafca2ccebb604f171656deb53e8c083c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2ef430bff6cc12c2d1e0ef01b95f7ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdac4dc554a61510151ddd5bafaf6040223</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda8f40b928c10a71ba03e5f75ad2a72fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdadd28224d7ea92689930be73c1b50b0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2424988b6fca98be70b595632753ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda7b37877e0b9b0df28c9c2b669a633265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfAdjoint</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdacf9ccb2016f8b9c0f3268f05a1e75821</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Symmetric</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdad5381b2d1c8973a08303c94e7da02333</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>alignedboxtypedefs</name>
    <title>Global aligned box typedefs</title>
    <filename>group__alignedboxtypedefs.html</filename>
  </compound>
  <compound kind="group">
    <name>SuperLUSupport_Module</name>
    <title>SuperLUSupport module</title>
    <filename>group__SuperLUSupport__Module.html</filename>
    <class kind="class">Eigen::SuperILU</class>
    <class kind="class">Eigen::SuperLU</class>
    <class kind="class">Eigen::SuperLUBase</class>
  </compound>
  <compound kind="group">
    <name>SVD_Module</name>
    <title>SVD module</title>
    <filename>group__SVD__Module.html</filename>
    <class kind="class">Eigen::BDCSVD</class>
    <class kind="class">Eigen::JacobiSVD</class>
    <class kind="class">Eigen::SVDBase</class>
  </compound>
  <compound kind="group">
    <name>UmfPackSupport_Module</name>
    <title>UmfPackSupport module</title>
    <filename>group__UmfPackSupport__Module.html</filename>
    <class kind="class">Eigen::UmfPackLU</class>
  </compound>
  <compound kind="group">
    <name>CoeffwiseMathFunctions</name>
    <title>Catalog of coefficient-wise math functions</title>
    <filename>group__CoeffwiseMathFunctions.html</filename>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_abs</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_inverse</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_conj</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_exp</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_log</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_log1p</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_log10</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_pow</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_sqrt</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_rsqrt</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_square</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_cube</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_abs2</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_sin</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_cos</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_tan</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_asin</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_acos</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_atan</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_sinh</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_cosh</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_tanh</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_ceil</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_floor</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_round</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_isfinite</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_isinf</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_isnan</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_erf</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_erfc</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_lgamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_digamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_igamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_igammac</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_polygamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_betainc</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions.html">cwisetable_zeta</docanchor>
  </compound>
  <compound kind="group">
    <name>DenseDecompositionBenchmark</name>
    <title>Benchmark of dense decompositions</title>
    <filename>group__DenseDecompositionBenchmark.html</filename>
  </compound>
  <compound kind="group">
    <name>TopicFixedSizeVectorizable</name>
    <title>Fixed-size vectorizable Eigen objects</title>
    <filename>group__TopicFixedSizeVectorizable.html</filename>
    <docanchor file="group__TopicFixedSizeVectorizable.html" title="Executive Summary">FixedSizeVectorizable_summary</docanchor>
    <docanchor file="group__TopicFixedSizeVectorizable.html" title="Explanation">FixedSizeVectorizable_explanation</docanchor>
  </compound>
  <compound kind="group">
    <name>InplaceDecomposition</name>
    <title>Inplace matrix decompositions</title>
    <filename>group__InplaceDecomposition.html</filename>
  </compound>
  <compound kind="group">
    <name>LeastSquares</name>
    <title>Solving linear least squares systems</title>
    <filename>group__LeastSquares.html</filename>
    <docanchor file="group__LeastSquares.html" title="Using the SVD decomposition">LeastSquaresSVD</docanchor>
    <docanchor file="group__LeastSquares.html" title="Using the QR decomposition">LeastSquaresQR</docanchor>
    <docanchor file="group__LeastSquares.html" title="Using normal equations">LeastSquaresNormalEquations</docanchor>
  </compound>
  <compound kind="group">
    <name>Support_modules</name>
    <title>Support modules</title>
    <filename>group__Support__modules.html</filename>
    <subgroup>CholmodSupport_Module</subgroup>
    <subgroup>MetisSupport_Module</subgroup>
    <subgroup>PardisoSupport_Module</subgroup>
    <subgroup>PaStiXSupport_Module</subgroup>
    <subgroup>SPQRSupport_Module</subgroup>
    <subgroup>SuperLUSupport_Module</subgroup>
    <subgroup>UmfPackSupport_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_chapter</name>
    <title>Dense matrix and array manipulation</title>
    <filename>group__DenseMatrixManipulation__chapter.html</filename>
    <subgroup>TutorialMatrixClass</subgroup>
    <subgroup>TutorialMatrixArithmetic</subgroup>
    <subgroup>TutorialArrayClass</subgroup>
    <subgroup>TutorialBlockOperations</subgroup>
    <subgroup>TutorialAdvancedInitialization</subgroup>
    <subgroup>TutorialReductionsVisitorsBroadcasting</subgroup>
    <subgroup>TutorialMapClass</subgroup>
    <subgroup>TutorialReshapeSlicing</subgroup>
    <subgroup>TopicAliasing</subgroup>
    <subgroup>TopicStorageOrders</subgroup>
    <subgroup>DenseMatrixManipulation_Alignement</subgroup>
    <subgroup>DenseMatrixManipulation_Reference</subgroup>
    <subgroup>CoeffwiseMathFunctions</subgroup>
    <subgroup>QuickRefPage</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_Alignement</name>
    <title>Alignment issues</title>
    <filename>group__DenseMatrixManipulation__Alignement.html</filename>
    <subgroup>TopicUnalignedArrayAssert</subgroup>
    <subgroup>TopicFixedSizeVectorizable</subgroup>
    <subgroup>TopicStructHavingEigenMembers</subgroup>
    <subgroup>TopicStlContainers</subgroup>
    <subgroup>TopicPassingByValue</subgroup>
    <subgroup>TopicWrongStackAlignment</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_Reference</name>
    <title>Reference</title>
    <filename>group__DenseMatrixManipulation__Reference.html</filename>
    <subgroup>Core_Module</subgroup>
    <subgroup>Jacobi_Module</subgroup>
    <subgroup>Householder_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseLinearSolvers_chapter</name>
    <title>Dense linear problems and decompositions</title>
    <filename>group__DenseLinearSolvers__chapter.html</filename>
    <subgroup>TutorialLinearAlgebra</subgroup>
    <subgroup>TopicLinearAlgebraDecompositions</subgroup>
    <subgroup>LeastSquares</subgroup>
    <subgroup>InplaceDecomposition</subgroup>
    <subgroup>DenseDecompositionBenchmark</subgroup>
    <subgroup>DenseLinearSolvers_Reference</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseLinearSolvers_Reference</name>
    <title>Reference</title>
    <filename>group__DenseLinearSolvers__Reference.html</filename>
    <subgroup>Cholesky_Module</subgroup>
    <subgroup>LU_Module</subgroup>
    <subgroup>QR_Module</subgroup>
    <subgroup>SVD_Module</subgroup>
    <subgroup>Eigenvalues_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>Sparse_chapter</name>
    <title>Sparse linear algebra</title>
    <filename>group__Sparse__chapter.html</filename>
    <subgroup>TutorialSparse</subgroup>
    <subgroup>TopicSparseSystems</subgroup>
    <subgroup>MatrixfreeSolverExample</subgroup>
    <subgroup>Sparse_Reference</subgroup>
    <subgroup>SparseQuickRefPage</subgroup>
  </compound>
  <compound kind="group">
    <name>Sparse_Reference</name>
    <title>Reference</title>
    <filename>group__Sparse__Reference.html</filename>
    <subgroup>SparseCore_Module</subgroup>
    <subgroup>OrderingMethods_Module</subgroup>
    <subgroup>SparseCholesky_Module</subgroup>
    <subgroup>SparseLU_Module</subgroup>
    <subgroup>SparseQR_Module</subgroup>
    <subgroup>IterativeLinearSolvers_Module</subgroup>
    <subgroup>Sparse_Module</subgroup>
    <subgroup>Support_modules</subgroup>
  </compound>
  <compound kind="group">
    <name>Geometry_chapter</name>
    <title>Geometry</title>
    <filename>group__Geometry__chapter.html</filename>
    <subgroup>TutorialGeometry</subgroup>
    <subgroup>Geometry_Reference</subgroup>
  </compound>
  <compound kind="group">
    <name>Geometry_Reference</name>
    <title>Reference</title>
    <filename>group__Geometry__Reference.html</filename>
    <subgroup>Geometry_Module</subgroup>
    <subgroup>Splines_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>MatrixfreeSolverExample</name>
    <title>Matrix-free solvers</title>
    <filename>group__MatrixfreeSolverExample.html</filename>
  </compound>
  <compound kind="group">
    <name>TopicPassingByValue</name>
    <title>Passing Eigen objects by value to functions</title>
    <filename>group__TopicPassingByValue.html</filename>
  </compound>
  <compound kind="group">
    <name>QuickRefPage</name>
    <title>Quick reference guide</title>
    <filename>group__QuickRefPage.html</filename>
    <docanchor file="group__QuickRefPage.html" title="Modules and Header files">QuickRef_Headers</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Array, matrix and vector types">QuickRef_Types</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Basic matrix manipulation">QuickRef_Basics</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Predefined Matrices">QuickRef_PredefMat</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Mapping external arrays">QuickRef_Map</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Arithmetic Operators">QuickRef_ArithmeticOperators</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Coefficient-wise &amp; Array operators">QuickRef_Coeffwise</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Reductions">QuickRef_Reductions</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Sub-matrices">QuickRef_Blocks</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Miscellaneous operations">QuickRef_Misc</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Reverse">QuickRef_Reverse</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Replicate">QuickRef_Replicate</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Diagonal, Triangular, and Self-adjoint matrices">QuickRef_DiagTriSymm</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Diagonal matrices">QuickRef_Diagonal</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Triangular views">QuickRef_TriangularView</docanchor>
    <docanchor file="group__QuickRefPage.html" title="Symmetric/selfadjoint views">QuickRef_SelfadjointMatrix</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicSparseSystems</name>
    <title>Solving Sparse Linear Systems</title>
    <filename>group__TopicSparseSystems.html</filename>
    <docanchor file="group__TopicSparseSystems.html" title="List of sparse solvers">TutorialSparseSolverList</docanchor>
    <docanchor file="group__TopicSparseSystems.html" title="Built-in direct solvers">TutorialSparseSolverList_Direct</docanchor>
    <docanchor file="group__TopicSparseSystems.html" title="Built-in iterative solvers">TutorialSparseSolverList_Iterative</docanchor>
    <docanchor file="group__TopicSparseSystems.html" title="Wrappers to external solvers">TutorialSparseSolverList_Wrapper</docanchor>
    <docanchor file="group__TopicSparseSystems.html" title="Sparse solver concept">TutorialSparseSolverConcept</docanchor>
    <docanchor file="group__TopicSparseSystems.html" title="The Compute Step">TheSparseCompute</docanchor>
    <docanchor file="group__TopicSparseSystems.html" title="The Solve step">TheSparseSolve</docanchor>
    <docanchor file="group__TopicSparseSystems.html">BenchmarkRoutine</docanchor>
  </compound>
  <compound kind="group">
    <name>SparseQuickRefPage</name>
    <title>Quick reference guide for sparse matrices</title>
    <filename>group__SparseQuickRefPage.html</filename>
    <docanchor file="group__SparseQuickRefPage.html" title="Sparse Matrix Initialization">SparseMatrixInit</docanchor>
    <docanchor file="group__SparseQuickRefPage.html" title="Matrix properties">SparseBasicInfos</docanchor>
    <docanchor file="group__SparseQuickRefPage.html" title="Arithmetic operations">SparseBasicOps</docanchor>
    <docanchor file="group__SparseQuickRefPage.html" title="Other supported operations">sparseotherops</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStlContainers</name>
    <title>Using STL Containers with Eigen</title>
    <filename>group__TopicStlContainers.html</filename>
    <docanchor file="group__TopicStlContainers.html" title="Executive summary">StlContainers_summary</docanchor>
    <docanchor file="group__TopicStlContainers.html" title="Using an aligned allocator">allocator</docanchor>
    <docanchor file="group__TopicStlContainers.html" title="The case of std::vector">StlContainers_vector</docanchor>
    <docanchor file="group__TopicStlContainers.html" title="An alternative - specializing std::vector for Eigen types">vector_spec</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStorageOrders</name>
    <title>Storage orders</title>
    <filename>group__TopicStorageOrders.html</filename>
    <docanchor file="group__TopicStorageOrders.html" title="Column-major and row-major storage">TopicStorageOrdersIntro</docanchor>
    <docanchor file="group__TopicStorageOrders.html" title="Storage orders in Eigen">TopicStorageOrdersInEigen</docanchor>
    <docanchor file="group__TopicStorageOrders.html" title="Which storage order to choose?">TopicStorageOrdersWhich</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStructHavingEigenMembers</name>
    <title>Structures Having Eigen Members</title>
    <filename>group__TopicStructHavingEigenMembers.html</filename>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="Executive Summary">StructHavingEigenMembers_summary</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="What kind of code needs to be changed?">StructHavingEigenMembers_what</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="How should such code be modified?">StructHavingEigenMembers_how</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="Why is this needed?">StructHavingEigenMembers_why</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="Should I then put all the members of Eigen types at the beginning of my class?">StructHavingEigenMembers_movetotop</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="What about dynamic-size matrices and vectors?">StructHavingEigenMembers_dynamicsize</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="So is this a bug in Eigen?">StructHavingEigenMembers_bugineigen</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="What if I want to do this conditionnally (depending on template parameters) ?">StructHavingEigenMembers_conditional</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="Other solutions">StructHavingEigenMembers_othersolutions</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="Disabling alignment">othersolutions1</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers.html" title="Private structure">othersolutions2</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicAliasing</name>
    <title>Aliasing</title>
    <filename>group__TopicAliasing.html</filename>
    <docanchor file="group__TopicAliasing.html" title="Examples">TopicAliasingExamples</docanchor>
    <docanchor file="group__TopicAliasing.html" title="Resolving aliasing issues">TopicAliasingSolution</docanchor>
    <docanchor file="group__TopicAliasing.html" title="Aliasing and component-wise operations">TopicAliasingCwise</docanchor>
    <docanchor file="group__TopicAliasing.html" title="Aliasing and matrix multiplication">TopicAliasingMatrixMult</docanchor>
    <docanchor file="group__TopicAliasing.html" title="Summary">TopicAliasingSummary</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicLinearAlgebraDecompositions</name>
    <title>Catalogue of dense decompositions</title>
    <filename>group__TopicLinearAlgebraDecompositions.html</filename>
    <docanchor file="group__TopicLinearAlgebraDecompositions.html" title="Catalogue of decompositions offered by Eigen">TopicLinAlgBigTable</docanchor>
    <docanchor file="group__TopicLinearAlgebraDecompositions.html" title="Terminology">TopicLinAlgTerminology</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialAdvancedInitialization</name>
    <title>Advanced initialization</title>
    <filename>group__TutorialAdvancedInitialization.html</filename>
    <docanchor file="group__TutorialAdvancedInitialization.html" title="The comma initializer">TutorialAdvancedInitializationCommaInitializer</docanchor>
    <docanchor file="group__TutorialAdvancedInitialization.html" title="Special matrices and arrays">TutorialAdvancedInitializationSpecialMatrices</docanchor>
    <docanchor file="group__TutorialAdvancedInitialization.html" title="Usage as temporary objects">TutorialAdvancedInitializationTemporaryObjects</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialArrayClass</name>
    <title>The Array class and coefficient-wise operations</title>
    <filename>group__TutorialArrayClass.html</filename>
    <docanchor file="group__TutorialArrayClass.html" title="What is the Array class?">TutorialArrayClassIntro</docanchor>
    <docanchor file="group__TutorialArrayClass.html" title="Array types">TutorialArrayClassTypes</docanchor>
    <docanchor file="group__TutorialArrayClass.html" title="Accessing values inside an Array">TutorialArrayClassAccess</docanchor>
    <docanchor file="group__TutorialArrayClass.html" title="Addition and subtraction">TutorialArrayClassAddSub</docanchor>
    <docanchor file="group__TutorialArrayClass.html" title="Array multiplication">TutorialArrayClassMult</docanchor>
    <docanchor file="group__TutorialArrayClass.html" title="Other coefficient-wise operations">TutorialArrayClassCwiseOther</docanchor>
    <docanchor file="group__TutorialArrayClass.html" title="Converting between array and matrix expressions">TutorialArrayClassConvert</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialBlockOperations</name>
    <title>Block operations</title>
    <filename>group__TutorialBlockOperations.html</filename>
    <docanchor file="group__TutorialBlockOperations.html" title="Using block operations">TutorialBlockOperationsUsing</docanchor>
    <docanchor file="group__TutorialBlockOperations.html" title="Columns and rows">TutorialBlockOperationsSyntaxColumnRows</docanchor>
    <docanchor file="group__TutorialBlockOperations.html" title="Corner-related operations">TutorialBlockOperationsSyntaxCorners</docanchor>
    <docanchor file="group__TutorialBlockOperations.html" title="Block operations for vectors">TutorialBlockOperationsSyntaxVectors</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialGeometry</name>
    <title>Space transformations</title>
    <filename>group__TutorialGeometry.html</filename>
    <docanchor file="group__TutorialGeometry.html" title="Transformation types">TutorialGeoElementaryTransformations</docanchor>
    <docanchor file="group__TutorialGeometry.html" title="Common API across transformation types">TutorialGeoCommontransformationAPI</docanchor>
    <docanchor file="group__TutorialGeometry.html" title="Affine transformations">TutorialGeoTransform</docanchor>
    <docanchor file="group__TutorialGeometry.html" title="Euler angles">TutorialGeoEulerAngles</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialLinearAlgebra</name>
    <title>Linear algebra and decompositions</title>
    <filename>group__TutorialLinearAlgebra.html</filename>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Basic linear solving">TutorialLinAlgBasicSolve</docanchor>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Checking if a solution really exists">TutorialLinAlgSolutionExists</docanchor>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Computing eigenvalues and eigenvectors">TutorialLinAlgEigensolving</docanchor>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Computing inverse and determinant">TutorialLinAlgInverse</docanchor>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Least squares solving">TutorialLinAlgLeastsquares</docanchor>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Separating the computation from the construction">TutorialLinAlgSeparateComputation</docanchor>
    <docanchor file="group__TutorialLinearAlgebra.html" title="Rank-revealing decompositions">TutorialLinAlgRankRevealing</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMapClass</name>
    <title>Interfacing with raw buffers: the Map class</title>
    <filename>group__TutorialMapClass.html</filename>
    <docanchor file="group__TutorialMapClass.html" title="Introduction">TutorialMapIntroduction</docanchor>
    <docanchor file="group__TutorialMapClass.html" title="Map types and declaring Map variables">TutorialMapTypes</docanchor>
    <docanchor file="group__TutorialMapClass.html" title="Using Map variables">TutorialMapUsing</docanchor>
    <docanchor file="group__TutorialMapClass.html" title="Changing the mapped array">TutorialMapPlacementNew</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMatrixArithmetic</name>
    <title>Matrix and vector arithmetic</title>
    <filename>group__TutorialMatrixArithmetic.html</filename>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Introduction">TutorialArithmeticIntroduction</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Addition and subtraction">TutorialArithmeticAddSub</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Scalar multiplication and division">TutorialArithmeticScalarMulDiv</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="A note about expression templates">TutorialArithmeticMentionXprTemplates</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Transposition and conjugation">TutorialArithmeticTranspose</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Matrix-matrix and matrix-vector multiplication">TutorialArithmeticMatrixMul</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Dot product and cross product">TutorialArithmeticDotAndCross</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Basic arithmetic reduction operations">TutorialArithmeticRedux</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic.html" title="Validity of operations">TutorialArithmeticValidity</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMatrixClass</name>
    <title>The Matrix class</title>
    <filename>group__TutorialMatrixClass.html</filename>
    <docanchor file="group__TutorialMatrixClass.html" title="The first three template parameters of Matrix">TutorialMatrixFirst3Params</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Vectors">TutorialMatrixVectors</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="The special value Dynamic">TutorialMatrixDynamic</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Constructors">TutorialMatrixConstructors</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Coefficient accessors">TutorialMatrixCoeffAccessors</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Comma-initialization">TutorialMatrixCommaInitializer</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Resizing">TutorialMatrixSizesResizing</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Assignment and resizing">TutorialMatrixAssignment</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Fixed vs. Dynamic size">TutorialMatrixFixedVsDynamic</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Optional template parameters">TutorialMatrixOptTemplParams</docanchor>
    <docanchor file="group__TutorialMatrixClass.html" title="Convenience typedefs">TutorialMatrixTypedefs</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialReductionsVisitorsBroadcasting</name>
    <title>Reductions, visitors and broadcasting</title>
    <filename>group__TutorialReductionsVisitorsBroadcasting.html</filename>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Reductions">TutorialReductionsVisitorsBroadcastingReductions</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Norm computations">TutorialReductionsVisitorsBroadcastingReductionsNorm</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Boolean reductions">TutorialReductionsVisitorsBroadcastingReductionsBool</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="User defined reductions">TutorialReductionsVisitorsBroadcastingReductionsUserdefined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Visitors">TutorialReductionsVisitorsBroadcastingVisitors</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Partial reductions">TutorialReductionsVisitorsBroadcastingPartialReductions</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Combining partial reductions with other operations">TutorialReductionsVisitorsBroadcastingPartialReductionsCombined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Broadcasting">TutorialReductionsVisitorsBroadcastingBroadcasting</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting.html" title="Combining broadcasting with other operations">TutorialReductionsVisitorsBroadcastingBroadcastingCombined</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialReshapeSlicing</name>
    <title>Reshape and Slicing</title>
    <filename>group__TutorialReshapeSlicing.html</filename>
    <docanchor file="group__TutorialReshapeSlicing.html" title="Reshape">TutorialReshape</docanchor>
    <docanchor file="group__TutorialReshapeSlicing.html" title="Slicing">TutorialSlicing</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialSparse</name>
    <title>Sparse matrix manipulations</title>
    <filename>group__TutorialSparse.html</filename>
    <docanchor file="group__TutorialSparse.html" title="Sparse matrix format">TutorialSparseIntro</docanchor>
    <docanchor file="group__TutorialSparse.html" title="First example">TutorialSparseExample</docanchor>
    <docanchor file="group__TutorialSparse.html" title="The SparseMatrix class">TutorialSparseSparseMatrix</docanchor>
    <docanchor file="group__TutorialSparse.html" title="Filling a sparse matrix">TutorialSparseFilling</docanchor>
    <docanchor file="group__TutorialSparse.html" title="Supported operators and functions">TutorialSparseFeatureSet</docanchor>
    <docanchor file="group__TutorialSparse.html" title="Basic operations">TutorialSparse_BasicOps</docanchor>
    <docanchor file="group__TutorialSparse.html" title="Matrix products">TutorialSparse_Products</docanchor>
    <docanchor file="group__TutorialSparse.html" title="Block operations">TutorialSparse_SubMatrices</docanchor>
    <docanchor file="group__TutorialSparse.html" title="Triangular and selfadjoint views">TutorialSparse_TriangularSelfadjoint</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicUnalignedArrayAssert</name>
    <title>Explanation of the assertion on unaligned arrays</title>
    <filename>group__TopicUnalignedArrayAssert.html</filename>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="Where in my own code is the cause of the problem?">where</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="Cause 1: Structures having Eigen objects as members">c1</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="Cause 2: STL Containers or manual memory allocation">c2</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="Cause 3: Passing Eigen objects by value">c3</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="Cause 4: Compiler making a wrong assumption on stack alignment (for instance GCC on Windows)">c4</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="General explanation of this assertion">explanation</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert.html" title="I don&apos;t care about optimal vectorization, how do I get rid of that stuff?">getrid</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicWrongStackAlignment</name>
    <title>Compiler making a wrong assumption on stack alignment</title>
    <filename>group__TopicWrongStackAlignment.html</filename>
    <docanchor file="group__TopicWrongStackAlignment.html" title="Local solution">sec_sol1</docanchor>
    <docanchor file="group__TopicWrongStackAlignment.html" title="Global solutions">sec_sol2</docanchor>
  </compound>
  <compound kind="group">
    <name>Splines_Module</name>
    <title>Splines_Module</title>
    <filename>group__Splines__Module.html</filename>
  </compound>
  <compound kind="page">
    <name>Eigen2ToEigen3</name>
    <title>Porting from Eigen2 to Eigen3</title>
    <filename>Eigen2ToEigen3</filename>
    <docanchor file="Eigen2ToEigen3.html" title="Eigen2 compatibility support">CompatibilitySupport</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="The USING_PART_OF_NAMESPACE_EIGEN macro">Using</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Dot products over complex numbers">ComplexDot</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Vector blocks">VectorBlocks</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Matrix Corners">Corners</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Coefficient wise operations">CoefficientWiseOperations</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Triangular and self-adjoint matrices">PartAndExtract</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Triangular in-place solving">TriangularSolveInPlace</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Matrix decompositions">Decompositions</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Linear solvers">LinearSolvers</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Changes in the Geometry module">GeometryModule</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="The Transform class">Transform</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Lazy evaluation and noalias">LazyVsNoalias</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Alignment-related macros">AlignMacros</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Aligned Map objects">AlignedMap</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="STL Containers">StdContainers</docanchor>
    <docanchor file="Eigen2ToEigen3.html" title="Internal ei_ prefix">eiPrefix</docanchor>
  </compound>
  <compound kind="page">
    <name>Experimental</name>
    <title>Experimental parts of Eigen</title>
    <filename>Experimental</filename>
    <docanchor file="Experimental.html" title="Summary">Experimental_summary</docanchor>
    <docanchor file="Experimental.html" title="Experimental modules">Experimental_modules</docanchor>
    <docanchor file="Experimental.html" title="Experimental parts of the Core module">Experimental_core</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicClassHierarchy</name>
    <title>The class hierarchy</title>
    <filename>TopicClassHierarchy</filename>
    <docanchor file="TopicClassHierarchy.html" title="Principles">TopicClassHierarchyPrinciples</docanchor>
    <docanchor file="TopicClassHierarchy.html" title="The core classes">TopicClassHierarchyCoreClasses</docanchor>
    <docanchor file="TopicClassHierarchy.html" title="Base classes">TopicClassHierarchyBaseClasses</docanchor>
    <docanchor file="TopicClassHierarchy.html" title="Inheritance diagrams">TopicClassHierarchyInheritanceDiagrams</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_CustomScalar</name>
    <title>Using custom scalar types</title>
    <filename>TopicCustomizing_CustomScalar</filename>
    <docanchor file="TopicCustomizing_CustomScalar.html">user_defined_scalars</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_InheritingMatrix</name>
    <title>Inheriting from Matrix</title>
    <filename>TopicCustomizing_InheritingMatrix</filename>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_NullaryExpr</name>
    <title>Matrix manipulation via nullary-expressions</title>
    <filename>TopicCustomizing_NullaryExpr</filename>
    <docanchor file="TopicCustomizing_NullaryExpr.html" title="Example 1: circulant matrix">NullaryExpr_Circulant</docanchor>
    <docanchor file="TopicCustomizing_NullaryExpr.html" title="Example 2: indexing rows and columns">NullaryExpr_Indexing</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_Plugins</name>
    <title>Extending MatrixBase (and other classes)</title>
    <filename>TopicCustomizing_Plugins</filename>
  </compound>
  <compound kind="page">
    <name>TopicFunctionTakingEigenTypes</name>
    <title>Writing Functions Taking %Eigen Types as Parameters</title>
    <filename>TopicFunctionTakingEigenTypes</filename>
    <docanchor file="TopicFunctionTakingEigenTypes.html" title="Some First Examples">TopicFirstExamples</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes.html" title="How to write generic, but non-templated function?">TopicUsingRefClass</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes.html" title="In which cases do functions taking plain Matrix or Array arguments work?">TopicPlainFunctionsWorking</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes.html" title="In which cases do functions taking a plain Matrix or Array argument fail?">TopicPlainFunctionsFailing</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes.html" title="How to resize matrices in generic implementations?">TopicResizingInGenericImplementations</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes.html" title="Summary">TopicSummary</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicWritingEfficientProductExpression</name>
    <title>Writing efficient matrix product expressions</title>
    <filename>TopicWritingEfficientProductExpression</filename>
    <docanchor file="TopicWritingEfficientProductExpression.html" title="General Matrix-Matrix product (GEMM)">GEMM</docanchor>
    <docanchor file="TopicWritingEfficientProductExpression.html" title="Limitations">GEMM_Limitations</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicInsideEigenExample</name>
    <title>What happens inside Eigen, on a simple example</title>
    <filename>TopicInsideEigenExample</filename>
    <docanchor file="TopicInsideEigenExample.html" title="Why it&apos;s interesting">WhyInteresting</docanchor>
    <docanchor file="TopicInsideEigenExample.html" title="Constructing vectors">ConstructingVectors</docanchor>
    <docanchor file="TopicInsideEigenExample.html" title="Construction of the sum expression">ConstructionOfSumXpr</docanchor>
    <docanchor file="TopicInsideEigenExample.html" title="The assignment">Assignment</docanchor>
  </compound>
  <compound kind="page">
    <name>UserManual_CustomizingEigen</name>
    <title>Extending/Customizing Eigen</title>
    <filename>UserManual_CustomizingEigen</filename>
  </compound>
  <compound kind="page">
    <name>UserManual_Generalities</name>
    <title>General topics</title>
    <filename>UserManual_Generalities</filename>
  </compound>
  <compound kind="page">
    <name>UserManual_UnderstandingEigen</name>
    <title>Understanding Eigen</title>
    <filename>UserManual_UnderstandingEigen</filename>
  </compound>
  <compound kind="page">
    <name>UnclassifiedPages</name>
    <title>Unclassified pages</title>
    <filename>UnclassifiedPages</filename>
  </compound>
  <compound kind="page">
    <name>TopicNewExpressionType</name>
    <title>Adding a new expression type</title>
    <filename>TopicNewExpressionType</filename>
    <docanchor file="TopicNewExpressionType.html" title="The setting">TopicSetting</docanchor>
    <docanchor file="TopicNewExpressionType.html" title="Getting started">TopicPreamble</docanchor>
    <docanchor file="TopicNewExpressionType.html" title="The traits class">TopicTraits</docanchor>
    <docanchor file="TopicNewExpressionType.html" title="The expression class">TopicExpression</docanchor>
    <docanchor file="TopicNewExpressionType.html" title="The evaluator">TopicEvaluator</docanchor>
    <docanchor file="TopicNewExpressionType.html" title="The entry point">TopicEntry</docanchor>
    <docanchor file="TopicNewExpressionType.html" title="A simple main function for testing">TopicMain</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicPitfalls</name>
    <title>Common pitfalls</title>
    <filename>TopicPitfalls</filename>
    <docanchor file="TopicPitfalls.html" title="Compilation error with template methods">TopicPitfalls_template_keyword</docanchor>
    <docanchor file="TopicPitfalls.html" title="Aliasing">TopicPitfalls_aliasing</docanchor>
    <docanchor file="TopicPitfalls.html" title="C++11 and the auto keyword">TopicPitfalls_auto_keyword</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicPreprocessorDirectives</name>
    <title>Preprocessor directives</title>
    <filename>TopicPreprocessorDirectives</filename>
    <docanchor file="TopicPreprocessorDirectives.html" title="Macros with major effects">TopicPreprocessorDirectivesMajor</docanchor>
    <docanchor file="TopicPreprocessorDirectives.html" title="C++ standard features">TopicPreprocessorDirectivesCppVersion</docanchor>
    <docanchor file="TopicPreprocessorDirectives.html" title="Assertions">TopicPreprocessorDirectivesAssertions</docanchor>
    <docanchor file="TopicPreprocessorDirectives.html" title="Alignment, vectorization and performance tweaking">TopicPreprocessorDirectivesPerformance</docanchor>
    <docanchor file="TopicPreprocessorDirectives.html" title="Plugins">TopicPreprocessorDirectivesPlugins</docanchor>
    <docanchor file="TopicPreprocessorDirectives.html" title="Macros for Eigen developers">TopicPreprocessorDirectivesDevelopers</docanchor>
  </compound>
  <compound kind="page">
    <name>GettingStarted</name>
    <title>Getting started</title>
    <filename>GettingStarted</filename>
    <docanchor file="GettingStarted.html" title="How to &quot;install&quot; Eigen?">GettingStartedInstallation</docanchor>
    <docanchor file="GettingStarted.html" title="A simple first program">GettingStartedFirstProgram</docanchor>
    <docanchor file="GettingStarted.html" title="Compiling and running your first program">GettingStartedCompiling</docanchor>
    <docanchor file="GettingStarted.html" title="Explanation of the first program">GettingStartedExplanation</docanchor>
    <docanchor file="GettingStarted.html" title="Example 2: Matrices and vectors">GettingStartedExample2</docanchor>
    <docanchor file="GettingStarted.html" title="Explanation of the second example">GettingStartedExplanation2</docanchor>
    <docanchor file="GettingStarted.html" title="Where to go from here?">GettingStartedConclusion</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicTemplateKeyword</name>
    <title>The template and typename keywords in C++</title>
    <filename>TopicTemplateKeyword</filename>
    <docanchor file="TopicTemplateKeyword.html" title="Using the template and typename keywords to define templates">TopicTemplateKeywordToDefineTemplates</docanchor>
    <docanchor file="TopicTemplateKeyword.html" title="An example showing the second use of the template keyword">TopicTemplateKeywordExample</docanchor>
    <docanchor file="TopicTemplateKeyword.html" title="Explanation">TopicTemplateKeywordExplanation</docanchor>
    <docanchor file="TopicTemplateKeyword.html" title="Resources for further reading">TopicTemplateKeywordResources</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicAssertions</name>
    <title>Assertions</title>
    <filename>TopicAssertions</filename>
    <docanchor file="TopicAssertions.html" title="Assertions">PlainAssert</docanchor>
    <docanchor file="TopicAssertions.html" title="Redefining assertions">RedefineAssert</docanchor>
    <docanchor file="TopicAssertions.html" title="Disabling assertions">DisableAssert</docanchor>
    <docanchor file="TopicAssertions.html" title="Static assertions">StaticAssert</docanchor>
    <docanchor file="TopicAssertions.html" title="Derived static assertions">DerivedStaticAssert</docanchor>
    <docanchor file="TopicAssertions.html" title="Strict assertions">StrictAssertions</docanchor>
    <docanchor file="TopicAssertions.html" title="Permissive assertions">PermissiveAssertions</docanchor>
    <docanchor file="TopicAssertions.html" title="Disabling static assertions">DisableStaticAssert</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCMakeGuide</name>
    <title>Using %Eigen in CMake Projects</title>
    <filename>TopicCMakeGuide</filename>
  </compound>
  <compound kind="page">
    <name>TopicEigenExpressionTemplates</name>
    <title>Expression templates in Eigen</title>
    <filename>TopicEigenExpressionTemplates</filename>
  </compound>
  <compound kind="page">
    <name>TopicLazyEvaluation</name>
    <title>Lazy Evaluation and Aliasing</title>
    <filename>TopicLazyEvaluation</filename>
  </compound>
  <compound kind="page">
    <name>TopicMultiThreading</name>
    <title>Eigen and multi-threading</title>
    <filename>TopicMultiThreading</filename>
    <docanchor file="TopicMultiThreading.html" title="Make Eigen run in parallel">TopicMultiThreading_MakingEigenMT</docanchor>
    <docanchor file="TopicMultiThreading.html" title="Using Eigen in a multi-threaded application">TopicMultiThreading_UsingEigenWithMT</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicResizing</name>
    <title>Resizing</title>
    <filename>TopicResizing</filename>
  </compound>
  <compound kind="page">
    <name>TopicScalarTypes</name>
    <title>Scalar types</title>
    <filename>TopicScalarTypes</filename>
  </compound>
  <compound kind="page">
    <name>TopicVectorization</name>
    <title>Vectorization</title>
    <filename>TopicVectorization</filename>
  </compound>
  <compound kind="page">
    <name>TutorialSparse_example_details</name>
    <title></title>
    <filename>TutorialSparse_example_details</filename>
  </compound>
  <compound kind="page">
    <name>TopicUsingBlasLapack</name>
    <title>Using BLAS/LAPACK from %Eigen</title>
    <filename>TopicUsingBlasLapack</filename>
  </compound>
  <compound kind="page">
    <name>TopicUsingIntelMKL</name>
    <title>Using Intel® MKL from %Eigen</title>
    <filename>TopicUsingIntelMKL</filename>
    <docanchor file="TopicUsingIntelMKL.html" title="Links">TopicUsingIntelMKL_Links</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCUDA</name>
    <title>Using Eigen in CUDA kernels</title>
    <filename>TopicCUDA</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>notitle</title>
    <filename>index</filename>
  </compound>
</tagfile>
